
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a28  080071b8  080071b8  000171b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007be0  08007be0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007be0  08007be0  00017be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007be8  08007be8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  2000007c  08007c6c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  08007c6c  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d297  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de0  00000000  00000000  0002d343  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b50  00000000  00000000  0002f128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a70  00000000  00000000  0002fc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022079  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098a5  00000000  00000000  00052761  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbc43  00000000  00000000  0005c006  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127c49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000359c  00000000  00000000  00127cc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800719c 	.word	0x0800719c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	0800719c 	.word	0x0800719c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_ldivmod>:
 8000c38:	b97b      	cbnz	r3, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3a:	b972      	cbnz	r2, 8000c5a <__aeabi_ldivmod+0x22>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bfbe      	ittt	lt
 8000c40:	2000      	movlt	r0, #0
 8000c42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c46:	e006      	blt.n	8000c56 <__aeabi_ldivmod+0x1e>
 8000c48:	bf08      	it	eq
 8000c4a:	2800      	cmpeq	r0, #0
 8000c4c:	bf1c      	itt	ne
 8000c4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c52:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c56:	f000 b9bd 	b.w	8000fd4 <__aeabi_idiv0>
 8000c5a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c62:	2900      	cmp	r1, #0
 8000c64:	db09      	blt.n	8000c7a <__aeabi_ldivmod+0x42>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db1a      	blt.n	8000ca0 <__aeabi_ldivmod+0x68>
 8000c6a:	f000 f84d 	bl	8000d08 <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4770      	bx	lr
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db1b      	blt.n	8000cbc <__aeabi_ldivmod+0x84>
 8000c84:	f000 f840 	bl	8000d08 <__udivmoddi4>
 8000c88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c90:	b004      	add	sp, #16
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	4252      	negs	r2, r2
 8000c9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9e:	4770      	bx	lr
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	f000 f82f 	bl	8000d08 <__udivmoddi4>
 8000caa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb2:	b004      	add	sp, #16
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cba:	4770      	bx	lr
 8000cbc:	4252      	negs	r2, r2
 8000cbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc2:	f000 f821 	bl	8000d08 <__udivmoddi4>
 8000cc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cce:	b004      	add	sp, #16
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <Error>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  LED_OFF;
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2120      	movs	r1, #32
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <Error+0x14>)
 8000fe2:	f002 f993 	bl	800330c <HAL_GPIO_WritePin>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020000 	.word	0x40020000

08000ff0 <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	717b      	strb	r3, [r7, #5]
 8000ffe:	4613      	mov	r3, r2
 8001000:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c2, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	b29a      	uxth	r2, r3
 800100a:	88f9      	ldrh	r1, [r7, #6]
 800100c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <I2Cx_WriteData+0x48>)
 800101e:	f002 fac7 	bl	80035b0 <HAL_I2C_Mem_Write>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <I2Cx_WriteData+0x40>
 800102c:	f7ff ffd4 	bl	8000fd8 <Error>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000052c 	.word	0x2000052c

0800103c <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	80fb      	strh	r3, [r7, #6]
 8001048:	4613      	mov	r3, r2
 800104a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001054:	797b      	ldrb	r3, [r7, #5]
 8001056:	b29a      	uxth	r2, r3
 8001058:	88f9      	ldrh	r1, [r7, #6]
 800105a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f107 030e 	add.w	r3, r7, #14
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <I2Cx_ReadData+0x50>)
 800106e:	f002 fb99 	bl	80037a4 <HAL_I2C_Mem_Read>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <I2Cx_ReadData+0x44>
 800107c:	f7ff ffac 	bl	8000fd8 <Error>
  return value;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000052c 	.word	0x2000052c

08001090 <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
 8001096:	4603      	mov	r3, r0
 8001098:	603a      	str	r2, [r7, #0]
 800109a:	80fb      	strh	r3, [r7, #6]
 800109c:	460b      	mov	r3, r1
 800109e:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 80010a4:	797b      	ldrb	r3, [r7, #5]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	88f9      	ldrh	r1, [r7, #6]
 80010aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2302      	movs	r3, #2
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <I2Cx_ReadData16+0x48>)
 80010bc:	f002 fb72 	bl	80037a4 <HAL_I2C_Mem_Read>
 80010c0:	4603      	mov	r3, r0
 80010c2:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <I2Cx_ReadData16+0x3e>
 80010ca:	f7ff ff85 	bl	8000fd8 <Error>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000052c 	.word	0x2000052c

080010dc <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	4603      	mov	r3, r0
 80010e4:	603a      	str	r2, [r7, #0]
 80010e6:	80fb      	strh	r3, [r7, #6]
 80010e8:	460b      	mov	r3, r1
 80010ea:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c2, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 80010f0:	797b      	ldrb	r3, [r7, #5]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	88f9      	ldrh	r1, [r7, #6]
 80010f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2303      	movs	r3, #3
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <I2Cx_ReadData24+0x48>)
 8001108:	f002 fb4c 	bl	80037a4 <HAL_I2C_Mem_Read>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <I2Cx_ReadData24+0x3e>
 8001116:	f7ff ff5f 	bl	8000fd8 <Error>
}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000052c 	.word	0x2000052c

08001128 <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	460a      	mov	r2, r1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8001138:	79ba      	ldrb	r2, [r7, #6]
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4619      	mov	r1, r3
 800113e:	20ec      	movs	r0, #236	; 0xec
 8001140:	f7ff ff56 	bl	8000ff0 <I2Cx_WriteData>
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4619      	mov	r1, r3
 800115a:	20ec      	movs	r0, #236	; 0xec
 800115c:	f7ff ff6e 	bl	800103c <I2Cx_ReadData>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
  return res;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	6039      	str	r1, [r7, #0]
 8001178:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	20ec      	movs	r0, #236	; 0xec
 8001182:	f7ff ff85 	bl	8001090 <I2Cx_ReadData16>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	6039      	str	r1, [r7, #0]
 8001198:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	20ec      	movs	r0, #236	; 0xec
 80011a2:	f7ff ff75 	bl	8001090 <I2Cx_ReadData16>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	6039      	str	r1, [r7, #0]
 80011b8:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	20ec      	movs	r0, #236	; 0xec
 80011c2:	f7ff ff65 	bl	8001090 <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	b29a      	uxth	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	801a      	strh	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	6039      	str	r1, [r7, #0]
 80011f4:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	20ec      	movs	r0, #236	; 0xec
 80011fe:	f7ff ff6d 	bl	80010dc <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	b2da      	uxtb	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001212:	431a      	orrs	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	041b      	lsls	r3, r3, #16
 800121a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800121e:	4313      	orrs	r3, r2
 8001220:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8001236:	20f3      	movs	r0, #243	; 0xf3
 8001238:	f7ff ff88 	bl	800114c <BME280_ReadReg>
 800123c:	4603      	mov	r3, r0
 800123e:	f003 0309 	and.w	r3, r3, #9
 8001242:	71fb      	strb	r3, [r7, #7]
  return res;
 8001244:	79fb      	ldrb	r3, [r7, #7]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 8001250:	b598      	push	{r3, r4, r7, lr}
 8001252:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001254:	49ba      	ldr	r1, [pc, #744]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 8001256:	2088      	movs	r0, #136	; 0x88
 8001258:	f7ff ff89 	bl	800116e <BME280_ReadReg_U16>
  sprintf(str1, "DIG_T1: %u\r\n", CalibData.dig_T1);
 800125c:	4bb8      	ldr	r3, [pc, #736]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	49b8      	ldr	r1, [pc, #736]	; (8001544 <BME280_ReadCoefficients+0x2f4>)
 8001264:	48b8      	ldr	r0, [pc, #736]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001266:	f004 fb3b 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800126a:	48b7      	ldr	r0, [pc, #732]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800126c:	f7fe ffd0 	bl	8000210 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	b29a      	uxth	r2, r3
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	49b3      	ldr	r1, [pc, #716]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800127a:	48b4      	ldr	r0, [pc, #720]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 800127c:	f003 fe9f 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8001280:	49b3      	ldr	r1, [pc, #716]	; (8001550 <BME280_ReadCoefficients+0x300>)
 8001282:	208a      	movs	r0, #138	; 0x8a
 8001284:	f7ff ff83 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_T2: %d\r\n", CalibData.dig_T2);
 8001288:	4bad      	ldr	r3, [pc, #692]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 800128a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800128e:	461a      	mov	r2, r3
 8001290:	49b0      	ldr	r1, [pc, #704]	; (8001554 <BME280_ReadCoefficients+0x304>)
 8001292:	48ad      	ldr	r0, [pc, #692]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001294:	f004 fb24 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001298:	48ab      	ldr	r0, [pc, #684]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800129a:	f7fe ffb9 	bl	8000210 <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	49a8      	ldr	r1, [pc, #672]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80012a8:	48a8      	ldr	r0, [pc, #672]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 80012aa:	f003 fe88 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 80012ae:	49aa      	ldr	r1, [pc, #680]	; (8001558 <BME280_ReadCoefficients+0x308>)
 80012b0:	208c      	movs	r0, #140	; 0x8c
 80012b2:	f7ff ff6c 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_T3: %d\r\n", CalibData.dig_T3);
 80012b6:	4ba2      	ldr	r3, [pc, #648]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 80012b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012bc:	461a      	mov	r2, r3
 80012be:	49a7      	ldr	r1, [pc, #668]	; (800155c <BME280_ReadCoefficients+0x30c>)
 80012c0:	48a1      	ldr	r0, [pc, #644]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80012c2:	f004 fb0d 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80012c6:	48a0      	ldr	r0, [pc, #640]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80012c8:	f7fe ffa2 	bl	8000210 <strlen>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	499c      	ldr	r1, [pc, #624]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80012d6:	489d      	ldr	r0, [pc, #628]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 80012d8:	f003 fe71 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 80012dc:	49a0      	ldr	r1, [pc, #640]	; (8001560 <BME280_ReadCoefficients+0x310>)
 80012de:	208e      	movs	r0, #142	; 0x8e
 80012e0:	f7ff ff45 	bl	800116e <BME280_ReadReg_U16>
  sprintf(str1, "DIG_P1: %u\r\n", CalibData.dig_P1);
 80012e4:	4b96      	ldr	r3, [pc, #600]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 80012e6:	88db      	ldrh	r3, [r3, #6]
 80012e8:	461a      	mov	r2, r3
 80012ea:	499e      	ldr	r1, [pc, #632]	; (8001564 <BME280_ReadCoefficients+0x314>)
 80012ec:	4896      	ldr	r0, [pc, #600]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80012ee:	f004 faf7 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80012f2:	4895      	ldr	r0, [pc, #596]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80012f4:	f7fe ff8c 	bl	8000210 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	4991      	ldr	r1, [pc, #580]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001302:	4892      	ldr	r0, [pc, #584]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 8001304:	f003 fe5b 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8001308:	4997      	ldr	r1, [pc, #604]	; (8001568 <BME280_ReadCoefficients+0x318>)
 800130a:	2090      	movs	r0, #144	; 0x90
 800130c:	f7ff ff3f 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P2: %d\r\n", CalibData.dig_P2);
 8001310:	4b8b      	ldr	r3, [pc, #556]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 8001312:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001316:	461a      	mov	r2, r3
 8001318:	4994      	ldr	r1, [pc, #592]	; (800156c <BME280_ReadCoefficients+0x31c>)
 800131a:	488b      	ldr	r0, [pc, #556]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800131c:	f004 fae0 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001320:	4889      	ldr	r0, [pc, #548]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001322:	f7fe ff75 	bl	8000210 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	4986      	ldr	r1, [pc, #536]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001330:	4886      	ldr	r0, [pc, #536]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 8001332:	f003 fe44 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8001336:	498e      	ldr	r1, [pc, #568]	; (8001570 <BME280_ReadCoefficients+0x320>)
 8001338:	2092      	movs	r0, #146	; 0x92
 800133a:	f7ff ff28 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P3: %d\r\n", CalibData.dig_P3);
 800133e:	4b80      	ldr	r3, [pc, #512]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 8001340:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001344:	461a      	mov	r2, r3
 8001346:	498b      	ldr	r1, [pc, #556]	; (8001574 <BME280_ReadCoefficients+0x324>)
 8001348:	487f      	ldr	r0, [pc, #508]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800134a:	f004 fac9 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800134e:	487e      	ldr	r0, [pc, #504]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001350:	f7fe ff5e 	bl	8000210 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	497a      	ldr	r1, [pc, #488]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800135e:	487b      	ldr	r0, [pc, #492]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 8001360:	f003 fe2d 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8001364:	4984      	ldr	r1, [pc, #528]	; (8001578 <BME280_ReadCoefficients+0x328>)
 8001366:	2094      	movs	r0, #148	; 0x94
 8001368:	f7ff ff11 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P4: %d\r\n", CalibData.dig_P4);
 800136c:	4b74      	ldr	r3, [pc, #464]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 800136e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001372:	461a      	mov	r2, r3
 8001374:	4981      	ldr	r1, [pc, #516]	; (800157c <BME280_ReadCoefficients+0x32c>)
 8001376:	4874      	ldr	r0, [pc, #464]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001378:	f004 fab2 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800137c:	4872      	ldr	r0, [pc, #456]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800137e:	f7fe ff47 	bl	8000210 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	496f      	ldr	r1, [pc, #444]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800138c:	486f      	ldr	r0, [pc, #444]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 800138e:	f003 fe16 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8001392:	497b      	ldr	r1, [pc, #492]	; (8001580 <BME280_ReadCoefficients+0x330>)
 8001394:	2096      	movs	r0, #150	; 0x96
 8001396:	f7ff fefa 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P5: %d\r\n", CalibData.dig_P5);
 800139a:	4b69      	ldr	r3, [pc, #420]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 800139c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4978      	ldr	r1, [pc, #480]	; (8001584 <BME280_ReadCoefficients+0x334>)
 80013a4:	4868      	ldr	r0, [pc, #416]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80013a6:	f004 fa9b 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80013aa:	4867      	ldr	r0, [pc, #412]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80013ac:	f7fe ff30 	bl	8000210 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	4963      	ldr	r1, [pc, #396]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80013ba:	4864      	ldr	r0, [pc, #400]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 80013bc:	f003 fdff 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 80013c0:	4971      	ldr	r1, [pc, #452]	; (8001588 <BME280_ReadCoefficients+0x338>)
 80013c2:	2098      	movs	r0, #152	; 0x98
 80013c4:	f7ff fee3 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P6: %d\r\n", CalibData.dig_P6);
 80013c8:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 80013ca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80013ce:	461a      	mov	r2, r3
 80013d0:	496e      	ldr	r1, [pc, #440]	; (800158c <BME280_ReadCoefficients+0x33c>)
 80013d2:	485d      	ldr	r0, [pc, #372]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80013d4:	f004 fa84 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80013d8:	485b      	ldr	r0, [pc, #364]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80013da:	f7fe ff19 	bl	8000210 <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	4958      	ldr	r1, [pc, #352]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80013e8:	4858      	ldr	r0, [pc, #352]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 80013ea:	f003 fde8 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 80013ee:	4968      	ldr	r1, [pc, #416]	; (8001590 <BME280_ReadCoefficients+0x340>)
 80013f0:	209a      	movs	r0, #154	; 0x9a
 80013f2:	f7ff fecc 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P7: %d\r\n", CalibData.dig_P7);
 80013f6:	4b52      	ldr	r3, [pc, #328]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 80013f8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4965      	ldr	r1, [pc, #404]	; (8001594 <BME280_ReadCoefficients+0x344>)
 8001400:	4851      	ldr	r0, [pc, #324]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001402:	f004 fa6d 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001406:	4850      	ldr	r0, [pc, #320]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001408:	f7fe ff02 	bl	8000210 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	494c      	ldr	r1, [pc, #304]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001416:	484d      	ldr	r0, [pc, #308]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 8001418:	f003 fdd1 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 800141c:	495e      	ldr	r1, [pc, #376]	; (8001598 <BME280_ReadCoefficients+0x348>)
 800141e:	209c      	movs	r0, #156	; 0x9c
 8001420:	f7ff feb5 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P8: %d\r\n", CalibData.dig_P8);
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 8001426:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800142a:	461a      	mov	r2, r3
 800142c:	495b      	ldr	r1, [pc, #364]	; (800159c <BME280_ReadCoefficients+0x34c>)
 800142e:	4846      	ldr	r0, [pc, #280]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001430:	f004 fa56 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001434:	4844      	ldr	r0, [pc, #272]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001436:	f7fe feeb 	bl	8000210 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	4941      	ldr	r1, [pc, #260]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001444:	4841      	ldr	r0, [pc, #260]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 8001446:	f003 fdba 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 800144a:	4955      	ldr	r1, [pc, #340]	; (80015a0 <BME280_ReadCoefficients+0x350>)
 800144c:	209e      	movs	r0, #158	; 0x9e
 800144e:	f7ff fe9e 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P9: %d\r\n", CalibData.dig_P9);
 8001452:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 8001454:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001458:	461a      	mov	r2, r3
 800145a:	4952      	ldr	r1, [pc, #328]	; (80015a4 <BME280_ReadCoefficients+0x354>)
 800145c:	483a      	ldr	r0, [pc, #232]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800145e:	f004 fa3f 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001462:	4839      	ldr	r0, [pc, #228]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001464:	f7fe fed4 	bl	8000210 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	b29a      	uxth	r2, r3
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	4935      	ldr	r1, [pc, #212]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001472:	4836      	ldr	r0, [pc, #216]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 8001474:	f003 fda3 	bl	8004fbe <HAL_UART_Transmit>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8001478:	20a1      	movs	r0, #161	; 0xa1
 800147a:	f7ff fe67 	bl	800114c <BME280_ReadReg>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 8001484:	761a      	strb	r2, [r3, #24]
  sprintf(str1, "DIG_H1: %d\r\n", CalibData.dig_H1);
 8001486:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 8001488:	7e1b      	ldrb	r3, [r3, #24]
 800148a:	461a      	mov	r2, r3
 800148c:	4946      	ldr	r1, [pc, #280]	; (80015a8 <BME280_ReadCoefficients+0x358>)
 800148e:	482e      	ldr	r0, [pc, #184]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001490:	f004 fa26 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001494:	482c      	ldr	r0, [pc, #176]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001496:	f7fe febb 	bl	8000210 <strlen>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	4929      	ldr	r1, [pc, #164]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80014a4:	4829      	ldr	r0, [pc, #164]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 80014a6:	f003 fd8a 	bl	8004fbe <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 80014aa:	4940      	ldr	r1, [pc, #256]	; (80015ac <BME280_ReadCoefficients+0x35c>)
 80014ac:	20e1      	movs	r0, #225	; 0xe1
 80014ae:	f7ff fe6e 	bl	800118e <BME280_ReadReg_S16>
  sprintf(str1, "DIG_H2: %d\r\n", CalibData.dig_H2);
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 80014b4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80014b8:	461a      	mov	r2, r3
 80014ba:	493d      	ldr	r1, [pc, #244]	; (80015b0 <BME280_ReadCoefficients+0x360>)
 80014bc:	4822      	ldr	r0, [pc, #136]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80014be:	f004 fa0f 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80014c2:	4821      	ldr	r0, [pc, #132]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80014c4:	f7fe fea4 	bl	8000210 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	491d      	ldr	r1, [pc, #116]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80014d2:	481e      	ldr	r0, [pc, #120]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 80014d4:	f003 fd73 	bl	8004fbe <HAL_UART_Transmit>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 80014d8:	20e3      	movs	r0, #227	; 0xe3
 80014da:	f7ff fe37 	bl	800114c <BME280_ReadReg>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 80014e4:	771a      	strb	r2, [r3, #28]
  sprintf(str1, "DIG_H3: %d\r\n", CalibData.dig_H3);
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 80014e8:	7f1b      	ldrb	r3, [r3, #28]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4931      	ldr	r1, [pc, #196]	; (80015b4 <BME280_ReadCoefficients+0x364>)
 80014ee:	4816      	ldr	r0, [pc, #88]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80014f0:	f004 f9f6 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80014f4:	4814      	ldr	r0, [pc, #80]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 80014f6:	f7fe fe8b 	bl	8000210 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	4911      	ldr	r1, [pc, #68]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <BME280_ReadCoefficients+0x2fc>)
 8001506:	f003 fd5a 	bl	8004fbe <HAL_UART_Transmit>
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 800150a:	20e4      	movs	r0, #228	; 0xe4
 800150c:	f7ff fe1e 	bl	800114c <BME280_ReadReg>
 8001510:	4603      	mov	r3, r0
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	b21c      	sxth	r4, r3
 8001516:	20e5      	movs	r0, #229	; 0xe5
 8001518:	f7ff fe18 	bl	800114c <BME280_ReadReg>
 800151c:	4603      	mov	r3, r0
 800151e:	b21b      	sxth	r3, r3
 8001520:	f003 030f 	and.w	r3, r3, #15
 8001524:	b21b      	sxth	r3, r3
 8001526:	4323      	orrs	r3, r4
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 800152c:	83da      	strh	r2, [r3, #30]
  sprintf(str1, "DIG_H4: %d\r\n", CalibData.dig_H4);
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <BME280_ReadCoefficients+0x2f0>)
 8001530:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001534:	461a      	mov	r2, r3
 8001536:	4920      	ldr	r1, [pc, #128]	; (80015b8 <BME280_ReadCoefficients+0x368>)
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <BME280_ReadCoefficients+0x2f8>)
 800153a:	f004 f9d1 	bl	80058e0 <siprintf>
 800153e:	e03d      	b.n	80015bc <BME280_ReadCoefficients+0x36c>
 8001540:	200004b0 	.word	0x200004b0
 8001544:	080071b8 	.word	0x080071b8
 8001548:	20000580 	.word	0x20000580
 800154c:	200005e4 	.word	0x200005e4
 8001550:	200004b2 	.word	0x200004b2
 8001554:	080071c8 	.word	0x080071c8
 8001558:	200004b4 	.word	0x200004b4
 800155c:	080071d8 	.word	0x080071d8
 8001560:	200004b6 	.word	0x200004b6
 8001564:	080071e8 	.word	0x080071e8
 8001568:	200004b8 	.word	0x200004b8
 800156c:	080071f8 	.word	0x080071f8
 8001570:	200004ba 	.word	0x200004ba
 8001574:	08007208 	.word	0x08007208
 8001578:	200004bc 	.word	0x200004bc
 800157c:	08007218 	.word	0x08007218
 8001580:	200004be 	.word	0x200004be
 8001584:	08007228 	.word	0x08007228
 8001588:	200004c0 	.word	0x200004c0
 800158c:	08007238 	.word	0x08007238
 8001590:	200004c2 	.word	0x200004c2
 8001594:	08007248 	.word	0x08007248
 8001598:	200004c4 	.word	0x200004c4
 800159c:	08007258 	.word	0x08007258
 80015a0:	200004c6 	.word	0x200004c6
 80015a4:	08007268 	.word	0x08007268
 80015a8:	08007278 	.word	0x08007278
 80015ac:	200004ca 	.word	0x200004ca
 80015b0:	08007288 	.word	0x08007288
 80015b4:	08007298 	.word	0x08007298
 80015b8:	080072a8 	.word	0x080072a8
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80015bc:	4825      	ldr	r0, [pc, #148]	; (8001654 <BME280_ReadCoefficients+0x404>)
 80015be:	f7fe fe27 	bl	8000210 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	4922      	ldr	r1, [pc, #136]	; (8001654 <BME280_ReadCoefficients+0x404>)
 80015cc:	4822      	ldr	r0, [pc, #136]	; (8001658 <BME280_ReadCoefficients+0x408>)
 80015ce:	f003 fcf6 	bl	8004fbe <HAL_UART_Transmit>
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 80015d2:	20e6      	movs	r0, #230	; 0xe6
 80015d4:	f7ff fdba 	bl	800114c <BME280_ReadReg>
 80015d8:	4603      	mov	r3, r0
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b21c      	sxth	r4, r3
 80015de:	20e5      	movs	r0, #229	; 0xe5
 80015e0:	f7ff fdb4 	bl	800114c <BME280_ReadReg>
 80015e4:	4603      	mov	r3, r0
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4323      	orrs	r3, r4
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <BME280_ReadCoefficients+0x40c>)
 80015f2:	841a      	strh	r2, [r3, #32]
  sprintf(str1, "DIG_H5: %d\r\n", CalibData.dig_H5);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <BME280_ReadCoefficients+0x40c>)
 80015f6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4918      	ldr	r1, [pc, #96]	; (8001660 <BME280_ReadCoefficients+0x410>)
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <BME280_ReadCoefficients+0x404>)
 8001600:	f004 f96e 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001604:	4813      	ldr	r0, [pc, #76]	; (8001654 <BME280_ReadCoefficients+0x404>)
 8001606:	f7fe fe03 	bl	8000210 <strlen>
 800160a:	4603      	mov	r3, r0
 800160c:	b29a      	uxth	r2, r3
 800160e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001612:	4910      	ldr	r1, [pc, #64]	; (8001654 <BME280_ReadCoefficients+0x404>)
 8001614:	4810      	ldr	r0, [pc, #64]	; (8001658 <BME280_ReadCoefficients+0x408>)
 8001616:	f003 fcd2 	bl	8004fbe <HAL_UART_Transmit>
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 800161a:	20e7      	movs	r0, #231	; 0xe7
 800161c:	f7ff fd96 	bl	800114c <BME280_ReadReg>
 8001620:	4603      	mov	r3, r0
 8001622:	b25a      	sxtb	r2, r3
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <BME280_ReadCoefficients+0x40c>)
 8001626:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  sprintf(str1, "DIG_H6: %d\r\n", CalibData.dig_H3);
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <BME280_ReadCoefficients+0x40c>)
 800162c:	7f1b      	ldrb	r3, [r3, #28]
 800162e:	461a      	mov	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <BME280_ReadCoefficients+0x414>)
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <BME280_ReadCoefficients+0x404>)
 8001634:	f004 f954 	bl	80058e0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <BME280_ReadCoefficients+0x404>)
 800163a:	f7fe fde9 	bl	8000210 <strlen>
 800163e:	4603      	mov	r3, r0
 8001640:	b29a      	uxth	r2, r3
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	4903      	ldr	r1, [pc, #12]	; (8001654 <BME280_ReadCoefficients+0x404>)
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <BME280_ReadCoefficients+0x408>)
 800164a:	f003 fcb8 	bl	8004fbe <HAL_UART_Transmit>
}
 800164e:	bf00      	nop
 8001650:	bd98      	pop	{r3, r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	20000580 	.word	0x20000580
 8001658:	200005e4 	.word	0x200005e4
 800165c:	200004b0 	.word	0x200004b0
 8001660:	080072b8 	.word	0x080072b8
 8001664:	080072c8 	.word	0x080072c8

08001668 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8001672:	20f5      	movs	r0, #245	; 0xf5
 8001674:	f7ff fd6a 	bl	800114c <BME280_ReadReg>
 8001678:	4603      	mov	r3, r0
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	f023 031f 	bic.w	r3, r3, #31
 8001688:	b25a      	sxtb	r2, r3
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4313      	orrs	r3, r2
 8001690:	b25b      	sxtb	r3, r3
 8001692:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	4619      	mov	r1, r3
 8001698:	20f5      	movs	r0, #245	; 0xf5
 800169a:	f7ff fd45 	bl	8001128 <BME280_WriteReg>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 80016b0:	20f5      	movs	r0, #245	; 0xf5
 80016b2:	f7ff fd4b 	bl	800114c <BME280_ReadReg>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f023 031c 	bic.w	r3, r3, #28
 80016bc:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	f003 031c 	and.w	r3, r3, #28
 80016c6:	b25a      	sxtb	r2, r3
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4619      	mov	r1, r3
 80016d6:	20f5      	movs	r0, #245	; 0xf5
 80016d8:	f7ff fd26 	bl	8001128 <BME280_WriteReg>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 80016ee:	20f4      	movs	r0, #244	; 0xf4
 80016f0:	f7ff fd2c 	bl	800114c <BME280_ReadReg>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	f023 031f 	bic.w	r3, r3, #31
 8001704:	b25a      	sxtb	r2, r3
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4313      	orrs	r3, r2
 800170c:	b25b      	sxtb	r3, r3
 800170e:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	4619      	mov	r1, r3
 8001714:	20f4      	movs	r0, #244	; 0xf4
 8001716:	f7ff fd07 	bl	8001128 <BME280_WriteReg>
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 800172c:	20f4      	movs	r0, #244	; 0xf4
 800172e:	f7ff fd0d 	bl	800114c <BME280_ReadReg>
 8001732:	4603      	mov	r3, r0
 8001734:	f023 031c 	bic.w	r3, r3, #28
 8001738:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	f003 031c 	and.w	r3, r3, #28
 8001742:	b25a      	sxtb	r2, r3
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	4313      	orrs	r3, r2
 800174a:	b25b      	sxtb	r3, r3
 800174c:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	4619      	mov	r1, r3
 8001752:	20f4      	movs	r0, #244	; 0xf4
 8001754:	f7ff fce8 	bl	8001128 <BME280_WriteReg>
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 800176a:	20f2      	movs	r0, #242	; 0xf2
 800176c:	f7ff fcee 	bl	800114c <BME280_ReadReg>
 8001770:	4603      	mov	r3, r0
 8001772:	f023 0307 	bic.w	r3, r3, #7
 8001776:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	b25a      	sxtb	r2, r3
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4313      	orrs	r3, r2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	4619      	mov	r1, r3
 8001790:	20f2      	movs	r0, #242	; 0xf2
 8001792:	f7ff fcc9 	bl	8001128 <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001796:	20f4      	movs	r0, #244	; 0xf4
 8001798:	f7ff fcd8 	bl	800114c <BME280_ReadReg>
 800179c:	4603      	mov	r3, r0
 800179e:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	4619      	mov	r1, r3
 80017a4:	20f4      	movs	r0, #244	; 0xf4
 80017a6:	f7ff fcbf 	bl	8001128 <BME280_WriteReg>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 80017bc:	20f4      	movs	r0, #244	; 0xf4
 80017be:	f7ff fcc5 	bl	800114c <BME280_ReadReg>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f023 0303 	bic.w	r3, r3, #3
 80017c8:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	b25a      	sxtb	r2, r3
 80017d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d8:	4313      	orrs	r3, r2
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	4619      	mov	r1, r3
 80017e2:	20f4      	movs	r0, #244	; 0xf4
 80017e4:	f7ff fca0 	bl	8001128 <BME280_WriteReg>
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	20fa      	movs	r0, #250	; 0xfa
 8001802:	f7ff fcf2 	bl	80011ea <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	08db      	lsrs	r3, r3, #3
 8001810:	4a20      	ldr	r2, [pc, #128]	; (8001894 <BME280_ReadTemperature+0xa4>)
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	0052      	lsls	r2, r2, #1
 8001816:	1a9b      	subs	r3, r3, r2
		((int32_t)CalibData.dig_T2)) >> 11;
 8001818:	4a1e      	ldr	r2, [pc, #120]	; (8001894 <BME280_ReadTemperature+0xa4>)
 800181a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 800181e:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 8001822:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001824:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <BME280_ReadTemperature+0xa4>)
 800182c:	8812      	ldrh	r2, [r2, #0]
 800182e:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	0912      	lsrs	r2, r2, #4
 8001834:	4917      	ldr	r1, [pc, #92]	; (8001894 <BME280_ReadTemperature+0xa4>)
 8001836:	8809      	ldrh	r1, [r1, #0]
 8001838:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800183a:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800183e:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <BME280_ReadTemperature+0xa4>)
 8001842:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001846:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 800184a:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 800184c:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4413      	add	r3, r2
 8001854:	4a10      	ldr	r2, [pc, #64]	; (8001898 <BME280_ReadTemperature+0xa8>)
 8001856:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <BME280_ReadTemperature+0xa8>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3380      	adds	r3, #128	; 0x80
 8001864:	121b      	asrs	r3, r3, #8
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186e:	edc7 7a03 	vstr	s15, [r7, #12]
	temper_float /= 100.0f;
 8001872:	ed97 7a03 	vldr	s14, [r7, #12]
 8001876:	eddf 6a09 	vldr	s13, [pc, #36]	; 800189c <BME280_ReadTemperature+0xac>
 800187a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800187e:	edc7 7a03 	vstr	s15, [r7, #12]
  return temper_float;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	ee07 3a90 	vmov	s15, r3
}
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200004b0 	.word	0x200004b0
 8001898:	200004d4 	.word	0x200004d4
 800189c:	42c80000 	.word	0x42c80000

080018a0 <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 80018a0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80018a4:	b08a      	sub	sp, #40	; 0x28
 80018a6:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 80018ae:	f7ff ff9f 	bl	80017f0 <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 80018b2:	463b      	mov	r3, r7
 80018b4:	4619      	mov	r1, r3
 80018b6:	20f7      	movs	r0, #247	; 0xf7
 80018b8:	f7ff fc97 	bl	80011ea <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	091b      	lsrs	r3, r3, #4
 80018c0:	603b      	str	r3, [r7, #0]
	val1 = ((int64_t) temper_int) - 128000;
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <BME280_ReadPressure+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4619      	mov	r1, r3
 80018c8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80018cc:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80018d0:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 80018d4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	fb02 f203 	mul.w	r2, r2, r3
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	69b9      	ldr	r1, [r7, #24]
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	441a      	add	r2, r3
 80018ea:	69b9      	ldr	r1, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fba1 3403 	umull	r3, r4, r1, r3
 80018f2:	4422      	add	r2, r4
 80018f4:	4614      	mov	r4, r2
 80018f6:	4a59      	ldr	r2, [pc, #356]	; (8001a5c <BME280_ReadPressure+0x1bc>)
 80018f8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80018fc:	b211      	sxth	r1, r2
 80018fe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001902:	fb01 f504 	mul.w	r5, r1, r4
 8001906:	fb03 f002 	mul.w	r0, r3, r2
 800190a:	4428      	add	r0, r5
 800190c:	fba3 3401 	umull	r3, r4, r3, r1
 8001910:	1902      	adds	r2, r0, r4
 8001912:	4614      	mov	r4, r2
 8001914:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001918:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 800191c:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <BME280_ReadPressure+0x1bc>)
 800191e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001922:	b21b      	sxth	r3, r3
 8001924:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	fb04 f102 	mul.w	r1, r4, r2
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	fb03 f202 	mul.w	r2, r3, r2
 8001934:	1888      	adds	r0, r1, r2
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	fba2 1203 	umull	r1, r2, r2, r3
 800193c:	1883      	adds	r3, r0, r2
 800193e:	461a      	mov	r2, r3
 8001940:	f04f 0500 	mov.w	r5, #0
 8001944:	f04f 0600 	mov.w	r6, #0
 8001948:	0456      	lsls	r6, r2, #17
 800194a:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800194e:	044d      	lsls	r5, r1, #17
 8001950:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001954:	186b      	adds	r3, r5, r1
 8001956:	eb46 0402 	adc.w	r4, r6, r2
 800195a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <BME280_ReadPressure+0x1bc>)
 8001960:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001964:	b219      	sxth	r1, r3
 8001966:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800196a:	f04f 0500 	mov.w	r5, #0
 800196e:	f04f 0600 	mov.w	r6, #0
 8001972:	00ce      	lsls	r6, r1, #3
 8001974:	2500      	movs	r5, #0
 8001976:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800197a:	186b      	adds	r3, r5, r1
 800197c:	eb46 0402 	adc.w	r4, r6, r2
 8001980:	e9c7 3404 	strd	r3, r4, [r7, #16]
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	fb02 f203 	mul.w	r2, r2, r3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	69b9      	ldr	r1, [r7, #24]
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	441a      	add	r2, r3
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fba1 3403 	umull	r3, r4, r1, r3
 800199e:	4422      	add	r2, r4
 80019a0:	4614      	mov	r4, r2
 80019a2:	4a2e      	ldr	r2, [pc, #184]	; (8001a5c <BME280_ReadPressure+0x1bc>)
 80019a4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80019a8:	b211      	sxth	r1, r2
 80019aa:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80019ae:	fb01 f504 	mul.w	r5, r1, r4
 80019b2:	fb03 f002 	mul.w	r0, r3, r2
 80019b6:	4428      	add	r0, r5
 80019b8:	fba3 3401 	umull	r3, r4, r3, r1
 80019bc:	1902      	adds	r2, r0, r4
 80019be:	4614      	mov	r4, r2
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	0a19      	lsrs	r1, r3, #8
 80019ca:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80019ce:	1222      	asrs	r2, r4, #8
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <BME280_ReadPressure+0x1bc>)
 80019d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80019dc:	69b8      	ldr	r0, [r7, #24]
 80019de:	fb04 f500 	mul.w	r5, r4, r0
 80019e2:	69f8      	ldr	r0, [r7, #28]
 80019e4:	fb03 f000 	mul.w	r0, r3, r0
 80019e8:	4428      	add	r0, r5
 80019ea:	69bd      	ldr	r5, [r7, #24]
 80019ec:	fba5 5603 	umull	r5, r6, r5, r3
 80019f0:	1983      	adds	r3, r0, r6
 80019f2:	461e      	mov	r6, r3
 80019f4:	f04f 0b00 	mov.w	fp, #0
 80019f8:	f04f 0c00 	mov.w	ip, #0
 80019fc:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001a00:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001a04:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8001a08:	eb1b 0301 	adds.w	r3, fp, r1
 8001a0c:	eb4c 0402 	adc.w	r4, ip, r2
 8001a10:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 8001a14:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a18:	1c19      	adds	r1, r3, #0
 8001a1a:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <BME280_ReadPressure+0x1bc>)
 8001a20:	88db      	ldrh	r3, [r3, #6]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	f04f 0400 	mov.w	r4, #0
 8001a28:	fb03 f502 	mul.w	r5, r3, r2
 8001a2c:	fb01 f004 	mul.w	r0, r1, r4
 8001a30:	4428      	add	r0, r5
 8001a32:	fba1 3403 	umull	r3, r4, r1, r3
 8001a36:	1902      	adds	r2, r0, r4
 8001a38:	4614      	mov	r4, r2
 8001a3a:	f04f 0100 	mov.w	r1, #0
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	1061      	asrs	r1, r4, #1
 8001a44:	17e2      	asrs	r2, r4, #31
 8001a46:	e9c7 1206 	strd	r1, r2, [r7, #24]
	if (val1 == 0) {
 8001a4a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a4e:	4323      	orrs	r3, r4
 8001a50:	d106      	bne.n	8001a60 <BME280_ReadPressure+0x1c0>
		return 0; // avoid exception caused by division by zero
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e111      	b.n	8001c7c <BME280_ReadPressure+0x3dc>
 8001a58:	200004d4 	.word	0x200004d4
 8001a5c:	200004b0 	.word	0x200004b0
	}
	p = 1048576 - press_raw;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001a66:	f04f 0400 	mov.w	r4, #0
 8001a6a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	p = (((p << 31) - val2) * 3125) / val1;
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	ea4f 0953 	mov.w	r9, r3, lsr #1
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001a7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001a7e:	4645      	mov	r5, r8
 8001a80:	464e      	mov	r6, r9
 8001a82:	1aed      	subs	r5, r5, r3
 8001a84:	eb66 0604 	sbc.w	r6, r6, r4
 8001a88:	46a8      	mov	r8, r5
 8001a8a:	46b1      	mov	r9, r6
 8001a8c:	eb18 0308 	adds.w	r3, r8, r8
 8001a90:	eb49 0409 	adc.w	r4, r9, r9
 8001a94:	4698      	mov	r8, r3
 8001a96:	46a1      	mov	r9, r4
 8001a98:	eb18 0805 	adds.w	r8, r8, r5
 8001a9c:	eb49 0906 	adc.w	r9, r9, r6
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001aac:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001ab0:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001ab4:	eb18 0801 	adds.w	r8, r8, r1
 8001ab8:	eb49 0902 	adc.w	r9, r9, r2
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001ac8:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001acc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001ad0:	4688      	mov	r8, r1
 8001ad2:	4691      	mov	r9, r2
 8001ad4:	eb18 0805 	adds.w	r8, r8, r5
 8001ad8:	eb49 0906 	adc.w	r9, r9, r6
 8001adc:	f04f 0100 	mov.w	r1, #0
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001ae8:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001aec:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001af0:	4688      	mov	r8, r1
 8001af2:	4691      	mov	r9, r2
 8001af4:	eb18 0005 	adds.w	r0, r8, r5
 8001af8:	eb49 0106 	adc.w	r1, r9, r6
 8001afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b00:	f7ff f89a 	bl	8000c38 <__aeabi_ldivmod>
 8001b04:	4603      	mov	r3, r0
 8001b06:	460c      	mov	r4, r1
 8001b08:	e9c7 3402 	strd	r3, r4, [r7, #8]
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001b0c:	4b5f      	ldr	r3, [pc, #380]	; (8001c8c <BME280_ReadPressure+0x3ec>)
 8001b0e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001b12:	b219      	sxth	r1, r3
 8001b14:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001b18:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	f04f 0400 	mov.w	r4, #0
 8001b24:	0b6b      	lsrs	r3, r5, #13
 8001b26:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001b2a:	1374      	asrs	r4, r6, #13
 8001b2c:	fb03 f502 	mul.w	r5, r3, r2
 8001b30:	fb01 f004 	mul.w	r0, r1, r4
 8001b34:	4428      	add	r0, r5
 8001b36:	fba1 1203 	umull	r1, r2, r1, r3
 8001b3a:	1883      	adds	r3, r0, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	f04f 0400 	mov.w	r4, #0
 8001b4a:	0b6b      	lsrs	r3, r5, #13
 8001b4c:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001b50:	1374      	asrs	r4, r6, #13
 8001b52:	fb03 f502 	mul.w	r5, r3, r2
 8001b56:	fb01 f004 	mul.w	r0, r1, r4
 8001b5a:	4428      	add	r0, r5
 8001b5c:	fba1 1203 	umull	r1, r2, r1, r3
 8001b60:	1883      	adds	r3, r0, r2
 8001b62:	461a      	mov	r2, r3
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	f04f 0400 	mov.w	r4, #0
 8001b6c:	0e4b      	lsrs	r3, r1, #25
 8001b6e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001b72:	1654      	asrs	r4, r2, #25
 8001b74:	e9c7 3406 	strd	r3, r4, [r7, #24]
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8001b78:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <BME280_ReadPressure+0x3ec>)
 8001b7a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	fb04 f102 	mul.w	r1, r4, r2
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	fb03 f202 	mul.w	r2, r3, r2
 8001b90:	1888      	adds	r0, r1, r2
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	fba2 1203 	umull	r1, r2, r2, r3
 8001b98:	1883      	adds	r3, r0, r2
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f04f 0400 	mov.w	r4, #0
 8001ba4:	0ccb      	lsrs	r3, r1, #19
 8001ba6:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001baa:	14d4      	asrs	r4, r2, #19
 8001bac:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8001bb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001bb4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001bb8:	eb11 0803 	adds.w	r8, r1, r3
 8001bbc:	eb42 0904 	adc.w	r9, r2, r4
 8001bc0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001bc4:	eb13 0508 	adds.w	r5, r3, r8
 8001bc8:	eb44 0609 	adc.w	r6, r4, r9
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	0a29      	lsrs	r1, r5, #8
 8001bd6:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001bda:	1232      	asrs	r2, r6, #8
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <BME280_ReadPressure+0x3ec>)
 8001bde:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001be2:	b21d      	sxth	r5, r3
 8001be4:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001be8:	f04f 0800 	mov.w	r8, #0
 8001bec:	f04f 0900 	mov.w	r9, #0
 8001bf0:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001bf4:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001bf8:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001bfc:	eb18 0301 	adds.w	r3, r8, r1
 8001c00:	eb49 0402 	adc.w	r4, r9, r2
 8001c04:	e9c7 3402 	strd	r3, r4, [r7, #8]
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8001c08:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	f04f 0400 	mov.w	r4, #0
 8001c14:	0a0b      	lsrs	r3, r1, #8
 8001c16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c1a:	1214      	asrs	r4, r2, #8
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c22:	fb03 f502 	mul.w	r5, r3, r2
 8001c26:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c2a:	f04f 01ff 	mov.w	r1, #255	; 0xff
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	ea03 0801 	and.w	r8, r3, r1
 8001c36:	ea04 0902 	and.w	r9, r4, r2
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <BME280_ReadPressure+0x3f0>)
 8001c3c:	fb02 f109 	mul.w	r1, r2, r9
 8001c40:	2200      	movs	r2, #0
 8001c42:	fb02 f208 	mul.w	r2, r2, r8
 8001c46:	440a      	add	r2, r1
 8001c48:	4911      	ldr	r1, [pc, #68]	; (8001c90 <BME280_ReadPressure+0x3f0>)
 8001c4a:	fba8 0101 	umull	r0, r1, r8, r1
 8001c4e:	1853      	adds	r3, r2, r1
 8001c50:	4619      	mov	r1, r3
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <BME280_ReadPressure+0x3f4>)
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	f7fe ffee 	bl	8000c38 <__aeabi_ldivmod>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	460c      	mov	r4, r1
 8001c60:	442b      	add	r3, r5
 8001c62:	607b      	str	r3, [r7, #4]
	press_float = pres_int / 100.0f;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c6e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001c98 <BME280_ReadPressure+0x3f8>
 8001c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c76:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  return press_float;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	ee07 3a90 	vmov	s15, r3
}
 8001c80:	eeb0 0a67 	vmov.f32	s0, s15
 8001c84:	3728      	adds	r7, #40	; 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8001c8c:	200004b0 	.word	0x200004b0
 8001c90:	0005f5e1 	.word	0x0005f5e1
 8001c94:	000186a0 	.word	0x000186a0
 8001c98:	42c80000 	.word	0x42c80000

08001c9c <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
	int16_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001ca8:	f7ff fda2 	bl	80017f0 <BME280_ReadTemperature>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 8001cac:	1cbb      	adds	r3, r7, #2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	20fd      	movs	r0, #253	; 0xfd
 8001cb2:	f7ff fa7c 	bl	80011ae <BME280_ReadReg_BE_S16>
	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8001cb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	60bb      	str	r3, [r7, #8]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 8001cbe:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <BME280_ReadHumidity+0xf8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001cc6:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	039a      	lsls	r2, r3, #14
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <BME280_ReadHumidity+0xfc>)
 8001cce:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001cd2:	051b      	lsls	r3, r3, #20
 8001cd4:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <BME280_ReadHumidity+0xfc>)
 8001cd8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	fb03 f301 	mul.w	r3, r3, r1
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001ce4:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001ce6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001cea:	13db      	asrs	r3, r3, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001cec:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <BME280_ReadHumidity+0xfc>)
 8001cee:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	fb02 f201 	mul.w	r2, r2, r1
 8001cfa:	1292      	asrs	r2, r2, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001cfc:	4926      	ldr	r1, [pc, #152]	; (8001d98 <BME280_ReadHumidity+0xfc>)
 8001cfe:	7f09      	ldrb	r1, [r1, #28]
 8001d00:	4608      	mov	r0, r1
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	fb01 f100 	mul.w	r1, r1, r0
 8001d08:	12c9      	asrs	r1, r1, #11
 8001d0a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001d0e:	fb01 f202 	mul.w	r2, r1, r2
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001d12:	1292      	asrs	r2, r2, #10
 8001d14:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 8001d18:	491f      	ldr	r1, [pc, #124]	; (8001d98 <BME280_ReadHumidity+0xfc>)
 8001d1a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001d1e:	fb01 f202 	mul.w	r2, r1, r2
 8001d22:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001d26:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	13db      	asrs	r3, r3, #15
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	13d2      	asrs	r2, r2, #15
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 8001d3c:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <BME280_ReadHumidity+0xfc>)
 8001d3e:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_H1)) >> 4));
 8001d44:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d52:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001d5a:	bfa8      	it	ge
 8001d5c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001d60:	607b      	str	r3, [r7, #4]
	hum_float = (v_x1_u32r>>12);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	131b      	asrs	r3, r3, #12
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6e:	edc7 7a03 	vstr	s15, [r7, #12]
	hum_float /= 1024.0f;
 8001d72:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d76:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001d9c <BME280_ReadHumidity+0x100>
 8001d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7e:	edc7 7a03 	vstr	s15, [r7, #12]
  return hum_float;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	ee07 3a90 	vmov	s15, r3
}
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200004d4 	.word	0x200004d4
 8001d98:	200004b0 	.word	0x200004b0
 8001d9c:	44800000 	.word	0x44800000

08001da0 <BME280_ReadAltitude>:
//------------------------------------------------
float BME280_ReadAltitude(float seaLevel)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	ed87 0a01 	vstr	s0, [r7, #4]
  float att = 0.0f;
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
	float atm = BME280_ReadPressure();
 8001db0:	f7ff fd76 	bl	80018a0 <BME280_ReadPressure>
 8001db4:	ed87 0a02 	vstr	s0, [r7, #8]
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
 8001db8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dc4:	ee16 0a90 	vmov	r0, s13
 8001dc8:	f7fe fbde 	bl	8000588 <__aeabi_f2d>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001e20 <BME280_ReadAltitude+0x80>
 8001dd4:	ec44 3b10 	vmov	d0, r3, r4
 8001dd8:	f004 f988 	bl	80060ec <pow>
 8001ddc:	ec54 3b10 	vmov	r3, r4, d0
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	f04f 0000 	mov.w	r0, #0
 8001de8:	4911      	ldr	r1, [pc, #68]	; (8001e30 <BME280_ReadAltitude+0x90>)
 8001dea:	f7fe fa6d 	bl	80002c8 <__aeabi_dsub>
 8001dee:	4603      	mov	r3, r0
 8001df0:	460c      	mov	r4, r1
 8001df2:	4618      	mov	r0, r3
 8001df4:	4621      	mov	r1, r4
 8001df6:	a30c      	add	r3, pc, #48	; (adr r3, 8001e28 <BME280_ReadAltitude+0x88>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc1c 	bl	8000638 <__aeabi_dmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	460c      	mov	r4, r1
 8001e04:	4618      	mov	r0, r3
 8001e06:	4621      	mov	r1, r4
 8001e08:	f7fe fec6 	bl	8000b98 <__aeabi_d2f>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60fb      	str	r3, [r7, #12]
  return att;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	ee07 3a90 	vmov	s15, r3
}
 8001e16:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	1a36e2eb 	.word	0x1a36e2eb
 8001e24:	3fc85bc0 	.word	0x3fc85bc0
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40e5a540 	.word	0x40e5a540
 8001e30:	3ff00000 	.word	0x3ff00000

08001e34 <BME280_Init>:
//------------------------------------------------
void BME280_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af02      	add	r7, sp, #8
  uint8_t value=0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  uint32_t value32=0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
  LED_ON;
 8001e42:	2201      	movs	r2, #1
 8001e44:	2120      	movs	r1, #32
 8001e46:	4845      	ldr	r0, [pc, #276]	; (8001f5c <BME280_Init+0x128>)
 8001e48:	f001 fa60 	bl	800330c <HAL_GPIO_WritePin>
	value = BME280_ReadReg(BME280_REG_ID);
 8001e4c:	20d0      	movs	r0, #208	; 0xd0
 8001e4e:	f7ff f97d 	bl	800114c <BME280_ReadReg>
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	sprintf(str1, "\r\n\r\nID: 0x%02X\r\n", value);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4941      	ldr	r1, [pc, #260]	; (8001f60 <BME280_Init+0x12c>)
 8001e5c:	4841      	ldr	r0, [pc, #260]	; (8001f64 <BME280_Init+0x130>)
 8001e5e:	f003 fd3f 	bl	80058e0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001e62:	4840      	ldr	r0, [pc, #256]	; (8001f64 <BME280_Init+0x130>)
 8001e64:	f7fe f9d4 	bl	8000210 <strlen>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e70:	493c      	ldr	r1, [pc, #240]	; (8001f64 <BME280_Init+0x130>)
 8001e72:	483d      	ldr	r0, [pc, #244]	; (8001f68 <BME280_Init+0x134>)
 8001e74:	f003 f8a3 	bl	8004fbe <HAL_UART_Transmit>
	if(value !=BME280_ID)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b60      	cmp	r3, #96	; 0x60
 8001e7c:	d002      	beq.n	8001e84 <BME280_Init+0x50>
	{
		Error();
 8001e7e:	f7ff f8ab 	bl	8000fd8 <Error>
		return;
 8001e82:	e067      	b.n	8001f54 <BME280_Init+0x120>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 8001e84:	21b6      	movs	r1, #182	; 0xb6
 8001e86:	20e0      	movs	r0, #224	; 0xe0
 8001e88:	f7ff f94e 	bl	8001128 <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 8001e8c:	bf00      	nop
 8001e8e:	f7ff f9cf 	bl	8001230 <BME280_ReadStatus>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f8      	bne.n	8001e8e <BME280_Init+0x5a>
	BME280_ReadCoefficients();
 8001e9c:	f7ff f9d8 	bl	8001250 <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 8001ea0:	20a0      	movs	r0, #160	; 0xa0
 8001ea2:	f7ff fbe1 	bl	8001668 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 8001ea6:	2008      	movs	r0, #8
 8001ea8:	f7ff fbfd 	bl	80016a6 <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 8001eac:	2060      	movs	r0, #96	; 0x60
 8001eae:	f7ff fc19 	bl	80016e4 <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 8001eb2:	2008      	movs	r0, #8
 8001eb4:	f7ff fc35 	bl	8001722 <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff fc51 	bl	8001760 <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001ebe:	20f4      	movs	r0, #244	; 0xf4
 8001ec0:	f7ff f944 	bl	800114c <BME280_ReadReg>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 8001ec8:	20f2      	movs	r0, #242	; 0xf2
 8001eca:	f7ff f93f 	bl	800114c <BME280_ReadReg>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	603b      	str	r3, [r7, #0]
	sprintf(str1, "Measurements status: %04X\r\n", value32);
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4923      	ldr	r1, [pc, #140]	; (8001f6c <BME280_Init+0x138>)
 8001ede:	4821      	ldr	r0, [pc, #132]	; (8001f64 <BME280_Init+0x130>)
 8001ee0:	f003 fcfe 	bl	80058e0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001ee4:	481f      	ldr	r0, [pc, #124]	; (8001f64 <BME280_Init+0x130>)
 8001ee6:	f7fe f993 	bl	8000210 <strlen>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef2:	491c      	ldr	r1, [pc, #112]	; (8001f64 <BME280_Init+0x130>)
 8001ef4:	481c      	ldr	r0, [pc, #112]	; (8001f68 <BME280_Init+0x134>)
 8001ef6:	f003 f862 	bl	8004fbe <HAL_UART_Transmit>
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
		(value32 & BME280_OSRS_T_MSK) ? "ON" : "OFF",
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <BME280_Init+0xd4>
 8001f04:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <BME280_Init+0x13c>)
 8001f06:	e000      	b.n	8001f0a <BME280_Init+0xd6>
 8001f08:	4a1a      	ldr	r2, [pc, #104]	; (8001f74 <BME280_Init+0x140>)
		(value32 & BME280_OSRS_P_MSK) ? "ON" : "OFF",
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f003 031c 	and.w	r3, r3, #28
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <BME280_Init+0xe4>
 8001f14:	4916      	ldr	r1, [pc, #88]	; (8001f70 <BME280_Init+0x13c>)
 8001f16:	e000      	b.n	8001f1a <BME280_Init+0xe6>
 8001f18:	4916      	ldr	r1, [pc, #88]	; (8001f74 <BME280_Init+0x140>)
		((value32 >> 8) & BME280_OSRS_H_MSK) ? "ON" : "OFF");
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <BME280_Init+0xf6>
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <BME280_Init+0x13c>)
 8001f28:	e000      	b.n	8001f2c <BME280_Init+0xf8>
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <BME280_Init+0x140>)
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4911      	ldr	r1, [pc, #68]	; (8001f78 <BME280_Init+0x144>)
 8001f32:	480c      	ldr	r0, [pc, #48]	; (8001f64 <BME280_Init+0x130>)
 8001f34:	f003 fcd4 	bl	80058e0 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001f38:	480a      	ldr	r0, [pc, #40]	; (8001f64 <BME280_Init+0x130>)
 8001f3a:	f7fe f969 	bl	8000210 <strlen>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f46:	4907      	ldr	r1, [pc, #28]	; (8001f64 <BME280_Init+0x130>)
 8001f48:	4807      	ldr	r0, [pc, #28]	; (8001f68 <BME280_Init+0x134>)
 8001f4a:	f003 f838 	bl	8004fbe <HAL_UART_Transmit>
	BME280_SetMode(BME280_MODE_NORMAL);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f7ff fc2f 	bl	80017b2 <BME280_SetMode>
}
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	080072d8 	.word	0x080072d8
 8001f64:	20000580 	.word	0x20000580
 8001f68:	200005e4 	.word	0x200005e4
 8001f6c:	080072ec 	.word	0x080072ec
 8001f70:	08007308 	.word	0x08007308
 8001f74:	0800730c 	.word	0x0800730c
 8001f78:	08007310 	.word	0x08007310

08001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f80:	b08b      	sub	sp, #44	; 0x2c
 8001f82:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	float tf = 0.0f, pf = 0.0f, af = 0.0f, hf = 0.0f;
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f9c:	f000 feaa 	bl	8002cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa0:	f000 f91e 	bl	80021e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa4:	f000 fa10 	bl	80023c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fa8:	f000 f988 	bl	80022bc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001fac:	f000 f9b4 	bl	8002318 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001fb0:	f000 f9e0 	bl	8002374 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	ssd1306_Init();
 8001fb4:	f000 faa6 	bl	8002504 <ssd1306_Init>
	ssd1306_FlipScreenVertically();
 8001fb8:	f000 fcae 	bl	8002918 <ssd1306_FlipScreenVertically>
	ssd1306_SetColor(White);
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f000 fa91 	bl	80024e4 <ssd1306_SetColor>
	ssd1306_SetCursor(0,0);
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f000 fc8f 	bl	80028e8 <ssd1306_SetCursor>
	ssd1306_UpdateScreen();
 8001fca:	f000 fb35 	bl	8002638 <ssd1306_UpdateScreen>

	BME280_Init();
 8001fce:	f7ff ff31 	bl	8001e34 <BME280_Init>

	int btn = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ssd1306_Clear();
 8001fd6:	f000 fca9 	bl	800292c <ssd1306_Clear>
		switch (btn) {
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	f200 80dd 	bhi.w	800219c <main+0x220>
 8001fe2:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <main+0x6c>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08002001 	.word	0x08002001
 8001fec:	0800204f 	.word	0x0800204f
 8001ff0:	08002113 	.word	0x08002113
 8001ff4:	0800219d 	.word	0x0800219d
 8001ff8:	08001ffd 	.word	0x08001ffd
			case 4:
			btn = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

			case 0:
			tf = BME280_ReadTemperature();
 8002000:	f7ff fbf6 	bl	80017f0 <BME280_ReadTemperature>
 8002004:	ed87 0a04 	vstr	s0, [r7, #16]
			sprintf(str1, "Temperature: %.3f *C\r\n", tf);
 8002008:	6938      	ldr	r0, [r7, #16]
 800200a:	f7fe fabd 	bl	8000588 <__aeabi_f2d>
 800200e:	4603      	mov	r3, r0
 8002010:	460c      	mov	r4, r1
 8002012:	461a      	mov	r2, r3
 8002014:	4623      	mov	r3, r4
 8002016:	4965      	ldr	r1, [pc, #404]	; (80021ac <main+0x230>)
 8002018:	4865      	ldr	r0, [pc, #404]	; (80021b0 <main+0x234>)
 800201a:	f003 fc61 	bl	80058e0 <siprintf>
			ssd1306_WriteString(str1, Font_7x10);
 800201e:	4b65      	ldr	r3, [pc, #404]	; (80021b4 <main+0x238>)
 8002020:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002024:	4862      	ldr	r0, [pc, #392]	; (80021b0 <main+0x234>)
 8002026:	f000 fc39 	bl	800289c <ssd1306_WriteString>
			sprintf(str1, "%11.3f *C", tf);
 800202a:	6938      	ldr	r0, [r7, #16]
 800202c:	f7fe faac 	bl	8000588 <__aeabi_f2d>
 8002030:	4603      	mov	r3, r0
 8002032:	460c      	mov	r4, r1
 8002034:	461a      	mov	r2, r3
 8002036:	4623      	mov	r3, r4
 8002038:	495f      	ldr	r1, [pc, #380]	; (80021b8 <main+0x23c>)
 800203a:	485d      	ldr	r0, [pc, #372]	; (80021b0 <main+0x234>)
 800203c:	f003 fc50 	bl	80058e0 <siprintf>
			ssd1306_WriteString(str1, Font_7x10);
 8002040:	4b5c      	ldr	r3, [pc, #368]	; (80021b4 <main+0x238>)
 8002042:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002046:	485a      	ldr	r0, [pc, #360]	; (80021b0 <main+0x234>)
 8002048:	f000 fc28 	bl	800289c <ssd1306_WriteString>
			break;
 800204c:	e0a6      	b.n	800219c <main+0x220>


			case 1:
			pf = BME280_ReadPressure();
 800204e:	f7ff fc27 	bl	80018a0 <BME280_ReadPressure>
 8002052:	ed87 0a03 	vstr	s0, [r7, #12]
			sprintf(str1, "Pressure: %.3f Pa; %.3f hPa; %.3f mmHg\r\n", pf,
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f7fe fa96 	bl	8000588 <__aeabi_f2d>
 800205c:	4680      	mov	r8, r0
 800205e:	4689      	mov	r9, r1
					pf / 1000.0f, pf * 0.000750061683f);
 8002060:	edd7 7a03 	vldr	s15, [r7, #12]
 8002064:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80021bc <main+0x240>
 8002068:	eec7 6a87 	vdiv.f32	s13, s15, s14
			sprintf(str1, "Pressure: %.3f Pa; %.3f hPa; %.3f mmHg\r\n", pf,
 800206c:	ee16 0a90 	vmov	r0, s13
 8002070:	f7fe fa8a 	bl	8000588 <__aeabi_f2d>
 8002074:	4604      	mov	r4, r0
 8002076:	460d      	mov	r5, r1
					pf / 1000.0f, pf * 0.000750061683f);
 8002078:	edd7 7a03 	vldr	s15, [r7, #12]
 800207c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80021c0 <main+0x244>
 8002080:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf(str1, "Pressure: %.3f Pa; %.3f hPa; %.3f mmHg\r\n", pf,
 8002084:	ee17 0a90 	vmov	r0, s15
 8002088:	f7fe fa7e 	bl	8000588 <__aeabi_f2d>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002094:	e9cd 4500 	strd	r4, r5, [sp]
 8002098:	4642      	mov	r2, r8
 800209a:	464b      	mov	r3, r9
 800209c:	4949      	ldr	r1, [pc, #292]	; (80021c4 <main+0x248>)
 800209e:	4844      	ldr	r0, [pc, #272]	; (80021b0 <main+0x234>)
 80020a0:	f003 fc1e 	bl	80058e0 <siprintf>
			ssd1306_WriteString(str1, Font_7x10);
 80020a4:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <main+0x238>)
 80020a6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020aa:	4841      	ldr	r0, [pc, #260]	; (80021b0 <main+0x234>)
 80020ac:	f000 fbf6 	bl	800289c <ssd1306_WriteString>
			sprintf(str1, "%11.3f hPa\n", pf / 1000.0f);
 80020b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80021bc <main+0x240>
 80020b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020bc:	ee16 0a90 	vmov	r0, s13
 80020c0:	f7fe fa62 	bl	8000588 <__aeabi_f2d>
 80020c4:	4603      	mov	r3, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	461a      	mov	r2, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	493e      	ldr	r1, [pc, #248]	; (80021c8 <main+0x24c>)
 80020ce:	4838      	ldr	r0, [pc, #224]	; (80021b0 <main+0x234>)
 80020d0:	f003 fc06 	bl	80058e0 <siprintf>
			ssd1306_WriteString(str1, Font_7x10);
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <main+0x238>)
 80020d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80020da:	4835      	ldr	r0, [pc, #212]	; (80021b0 <main+0x234>)
 80020dc:	f000 fbde 	bl	800289c <ssd1306_WriteString>
			sprintf(str1, "%11.3f mmHg", pf * 0.000750061683f);
 80020e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80021c0 <main+0x244>
 80020e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ec:	ee17 0a90 	vmov	r0, s15
 80020f0:	f7fe fa4a 	bl	8000588 <__aeabi_f2d>
 80020f4:	4603      	mov	r3, r0
 80020f6:	460c      	mov	r4, r1
 80020f8:	461a      	mov	r2, r3
 80020fa:	4623      	mov	r3, r4
 80020fc:	4933      	ldr	r1, [pc, #204]	; (80021cc <main+0x250>)
 80020fe:	482c      	ldr	r0, [pc, #176]	; (80021b0 <main+0x234>)
 8002100:	f003 fbee 	bl	80058e0 <siprintf>
			ssd1306_WriteString(str1, Font_7x10);
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <main+0x238>)
 8002106:	e893 0006 	ldmia.w	r3, {r1, r2}
 800210a:	4829      	ldr	r0, [pc, #164]	; (80021b0 <main+0x234>)
 800210c:	f000 fbc6 	bl	800289c <ssd1306_WriteString>
			break;
 8002110:	e044      	b.n	800219c <main+0x220>

			case 2:
			af = BME280_ReadAltitude(SEALEVELPRESSURE_PA);
 8002112:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80021d0 <main+0x254>
 8002116:	f7ff fe43 	bl	8001da0 <BME280_ReadAltitude>
 800211a:	ed87 0a02 	vstr	s0, [r7, #8]
			sprintf(str1, "Altitude: %.3f m\r\n", af);
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	f7fe fa32 	bl	8000588 <__aeabi_f2d>
 8002124:	4603      	mov	r3, r0
 8002126:	460c      	mov	r4, r1
 8002128:	461a      	mov	r2, r3
 800212a:	4623      	mov	r3, r4
 800212c:	4929      	ldr	r1, [pc, #164]	; (80021d4 <main+0x258>)
 800212e:	4820      	ldr	r0, [pc, #128]	; (80021b0 <main+0x234>)
 8002130:	f003 fbd6 	bl	80058e0 <siprintf>
			ssd1306_WriteString(str1, Font_7x10);
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <main+0x238>)
 8002136:	e893 0006 	ldmia.w	r3, {r1, r2}
 800213a:	481d      	ldr	r0, [pc, #116]	; (80021b0 <main+0x234>)
 800213c:	f000 fbae 	bl	800289c <ssd1306_WriteString>
			hf = BME280_ReadHumidity();
 8002140:	f7ff fdac 	bl	8001c9c <BME280_ReadHumidity>
 8002144:	ed87 0a01 	vstr	s0, [r7, #4]
			sprintf(str1, "Humidity: %.3f %%\r\n", hf);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe fa1d 	bl	8000588 <__aeabi_f2d>
 800214e:	4603      	mov	r3, r0
 8002150:	460c      	mov	r4, r1
 8002152:	461a      	mov	r2, r3
 8002154:	4623      	mov	r3, r4
 8002156:	4920      	ldr	r1, [pc, #128]	; (80021d8 <main+0x25c>)
 8002158:	4815      	ldr	r0, [pc, #84]	; (80021b0 <main+0x234>)
 800215a:	f003 fbc1 	bl	80058e0 <siprintf>
			ssd1306_WriteString(str1, Font_7x10);
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <main+0x238>)
 8002160:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002164:	4812      	ldr	r0, [pc, #72]	; (80021b0 <main+0x234>)
 8002166:	f000 fb99 	bl	800289c <ssd1306_WriteString>
			sprintf(str1, "%7.3f %% %4.1f m", hf, af);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fa0c 	bl	8000588 <__aeabi_f2d>
 8002170:	4605      	mov	r5, r0
 8002172:	460e      	mov	r6, r1
 8002174:	68b8      	ldr	r0, [r7, #8]
 8002176:	f7fe fa07 	bl	8000588 <__aeabi_f2d>
 800217a:	4603      	mov	r3, r0
 800217c:	460c      	mov	r4, r1
 800217e:	e9cd 3400 	strd	r3, r4, [sp]
 8002182:	462a      	mov	r2, r5
 8002184:	4633      	mov	r3, r6
 8002186:	4915      	ldr	r1, [pc, #84]	; (80021dc <main+0x260>)
 8002188:	4809      	ldr	r0, [pc, #36]	; (80021b0 <main+0x234>)
 800218a:	f003 fba9 	bl	80058e0 <siprintf>
			ssd1306_WriteString(str1, Font_7x10);
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <main+0x238>)
 8002190:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002194:	4806      	ldr	r0, [pc, #24]	; (80021b0 <main+0x234>)
 8002196:	f000 fb81 	bl	800289c <ssd1306_WriteString>
			break;
 800219a:	bf00      	nop
		}
		ssd1306_UpdateScreen();
 800219c:	f000 fa4c 	bl	8002638 <ssd1306_UpdateScreen>
		HAL_Delay(1000);
 80021a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021a4:	f000 fe18 	bl	8002dd8 <HAL_Delay>
		ssd1306_Clear();
 80021a8:	e715      	b.n	8001fd6 <main+0x5a>
 80021aa:	bf00      	nop
 80021ac:	08007340 	.word	0x08007340
 80021b0:	20000580 	.word	0x20000580
 80021b4:	20000000 	.word	0x20000000
 80021b8:	08007358 	.word	0x08007358
 80021bc:	447a0000 	.word	0x447a0000
 80021c0:	3a449fca 	.word	0x3a449fca
 80021c4:	08007364 	.word	0x08007364
 80021c8:	08007390 	.word	0x08007390
 80021cc:	0800739c 	.word	0x0800739c
 80021d0:	49776020 	.word	0x49776020
 80021d4:	080073a8 	.word	0x080073a8
 80021d8:	080073bc 	.word	0x080073bc
 80021dc:	080073d0 	.word	0x080073d0

080021e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b094      	sub	sp, #80	; 0x50
 80021e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	2234      	movs	r2, #52	; 0x34
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 fb6e 	bl	80058d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f4:	f107 0308 	add.w	r3, r7, #8
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <SystemClock_Config+0xd4>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <SystemClock_Config+0xd4>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002212:	6413      	str	r3, [r2, #64]	; 0x40
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <SystemClock_Config+0xd4>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002220:	2300      	movs	r3, #0
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <SystemClock_Config+0xd8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800222c:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <SystemClock_Config+0xd8>)
 800222e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <SystemClock_Config+0xd8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002240:	2301      	movs	r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002248:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224a:	2302      	movs	r3, #2
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800224e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002254:	2304      	movs	r3, #4
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002258:	2354      	movs	r3, #84	; 0x54
 800225a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800225c:	2302      	movs	r3, #2
 800225e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002260:	2302      	movs	r3, #2
 8002262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002264:	2302      	movs	r3, #2
 8002266:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fbff 	bl	8004a70 <HAL_RCC_OscConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002278:	f000 f90c 	bl	8002494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800227c:	230f      	movs	r3, #15
 800227e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002280:	2302      	movs	r3, #2
 8002282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800228e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002292:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002294:	f107 0308 	add.w	r3, r7, #8
 8002298:	2102      	movs	r1, #2
 800229a:	4618      	mov	r0, r3
 800229c:	f002 f92e 	bl	80044fc <HAL_RCC_ClockConfig>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80022a6:	f000 f8f5 	bl	8002494 <Error_Handler>
  }
}
 80022aa:	bf00      	nop
 80022ac:	3750      	adds	r7, #80	; 0x50
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40007000 	.word	0x40007000

080022bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <MX_I2C1_Init+0x50>)
 80022c2:	4a13      	ldr	r2, [pc, #76]	; (8002310 <MX_I2C1_Init+0x54>)
 80022c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <MX_I2C1_Init+0x50>)
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <MX_I2C1_Init+0x58>)
 80022ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <MX_I2C1_Init+0x50>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MX_I2C1_Init+0x50>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <MX_I2C1_Init+0x50>)
 80022da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <MX_I2C1_Init+0x50>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <MX_I2C1_Init+0x50>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <MX_I2C1_Init+0x50>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <MX_I2C1_Init+0x50>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022f8:	4804      	ldr	r0, [pc, #16]	; (800230c <MX_I2C1_Init+0x50>)
 80022fa:	f001 f821 	bl	8003340 <HAL_I2C_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002304:	f000 f8c6 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200004d8 	.word	0x200004d8
 8002310:	40005400 	.word	0x40005400
 8002314:	00061a80 	.word	0x00061a80

08002318 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <MX_I2C2_Init+0x50>)
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <MX_I2C2_Init+0x54>)
 8002320:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <MX_I2C2_Init+0x50>)
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <MX_I2C2_Init+0x58>)
 8002326:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <MX_I2C2_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_I2C2_Init+0x50>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_I2C2_Init+0x50>)
 8002336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800233a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <MX_I2C2_Init+0x50>)
 800233e:	2200      	movs	r2, #0
 8002340:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_I2C2_Init+0x50>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <MX_I2C2_Init+0x50>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_I2C2_Init+0x50>)
 8002350:	2200      	movs	r2, #0
 8002352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <MX_I2C2_Init+0x50>)
 8002356:	f000 fff3 	bl	8003340 <HAL_I2C_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002360:	f000 f898 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2000052c 	.word	0x2000052c
 800236c:	40005800 	.word	0x40005800
 8002370:	00061a80 	.word	0x00061a80

08002374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <MX_USART2_UART_Init+0x4c>)
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <MX_USART2_UART_Init+0x50>)
 800237c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <MX_USART2_UART_Init+0x4c>)
 8002380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <MX_USART2_UART_Init+0x4c>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <MX_USART2_UART_Init+0x4c>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <MX_USART2_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <MX_USART2_UART_Init+0x4c>)
 800239a:	220c      	movs	r2, #12
 800239c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <MX_USART2_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <MX_USART2_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <MX_USART2_UART_Init+0x4c>)
 80023ac:	f002 fdba 	bl	8004f24 <HAL_UART_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023b6:	f000 f86d 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200005e4 	.word	0x200005e4
 80023c4:	40004400 	.word	0x40004400

080023c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <MX_GPIO_Init+0xc0>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <MX_GPIO_Init+0xc0>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b26      	ldr	r3, [pc, #152]	; (8002488 <MX_GPIO_Init+0xc0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <MX_GPIO_Init+0xc0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a21      	ldr	r2, [pc, #132]	; (8002488 <MX_GPIO_Init+0xc0>)
 8002404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <MX_GPIO_Init+0xc0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <MX_GPIO_Init+0xc0>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <MX_GPIO_Init+0xc0>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <MX_GPIO_Init+0xc0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <MX_GPIO_Init+0xc0>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a13      	ldr	r2, [pc, #76]	; (8002488 <MX_GPIO_Init+0xc0>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <MX_GPIO_Init+0xc0>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800244e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	480a      	ldr	r0, [pc, #40]	; (800248c <MX_GPIO_Init+0xc4>)
 8002464:	f000 fdc0 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002468:	2320      	movs	r3, #32
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4619      	mov	r1, r3
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_GPIO_Init+0xc8>)
 800247c:	f000 fdb4 	bl	8002fe8 <HAL_GPIO_Init>

}
 8002480:	bf00      	nop
 8002482:	3728      	adds	r7, #40	; 0x28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	40020800 	.word	0x40020800
 8002490:	40020000 	.word	0x40020000

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	2340      	movs	r3, #64	; 0x40
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <ssd1306_GetWidth>:
/* CODE END Private functions */

/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 80024c6:	2380      	movs	r3, #128	; 0x80
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 80024d6:	2340      	movs	r3, #64	; 0x40
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <ssd1306_SetColor>:
{
	return SSD1306.Color;
}

void ssd1306_SetColor(SSD1306_COLOR color)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <ssd1306_SetColor+0x1c>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	7153      	strb	r3, [r2, #5]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	20000098 	.word	0x20000098

08002504 <ssd1306_Init>:

//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8002508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250c:	2205      	movs	r2, #5
 800250e:	2178      	movs	r1, #120	; 0x78
 8002510:	4846      	ldr	r0, [pc, #280]	; (800262c <ssd1306_Init+0x128>)
 8002512:	f001 fb6d 	bl	8003bf0 <HAL_I2C_IsDeviceReady>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 800251c:	4b44      	ldr	r3, [pc, #272]	; (8002630 <ssd1306_Init+0x12c>)
 800251e:	2200      	movs	r2, #0
 8002520:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8002522:	2300      	movs	r3, #0
 8002524:	e07f      	b.n	8002626 <ssd1306_Init+0x122>
	}

	// Wait for the screen to boot
	HAL_Delay(100);
 8002526:	2064      	movs	r0, #100	; 0x64
 8002528:	f000 fc56 	bl	8002dd8 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 800252c:	20ae      	movs	r0, #174	; 0xae
 800252e:	f000 fa09 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8002532:	20d5      	movs	r0, #213	; 0xd5
 8002534:	f000 fa06 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8002538:	20f0      	movs	r0, #240	; 0xf0
 800253a:	f000 fa03 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 800253e:	20a8      	movs	r0, #168	; 0xa8
 8002540:	f000 fa00 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8002544:	f7ff ffb5 	bl	80024b2 <height>
 8002548:	4603      	mov	r3, r0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	4618      	mov	r0, r3
 8002552:	f000 f9f7 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8002556:	20d3      	movs	r0, #211	; 0xd3
 8002558:	f000 f9f4 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f000 f9f1 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 8002562:	2040      	movs	r0, #64	; 0x40
 8002564:	f000 f9ee 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8002568:	208d      	movs	r0, #141	; 0x8d
 800256a:	f000 f9eb 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 800256e:	2014      	movs	r0, #20
 8002570:	f000 f9e8 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8002574:	2020      	movs	r0, #32
 8002576:	f000 f9e5 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 800257a:	2000      	movs	r0, #0
 800257c:	f000 f9e2 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8002580:	20a0      	movs	r0, #160	; 0xa0
 8002582:	f000 f9df 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8002586:	20c0      	movs	r0, #192	; 0xc0
 8002588:	f000 f9dc 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 800258c:	20da      	movs	r0, #218	; 0xda
 800258e:	f000 f9d9 	bl	8002944 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 8002592:	4b28      	ldr	r3, [pc, #160]	; (8002634 <ssd1306_Init+0x130>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d103      	bne.n	80025a2 <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 800259a:	2012      	movs	r0, #18
 800259c:	f000 f9d2 	bl	8002944 <ssd1306_WriteCommand>
 80025a0:	e006      	b.n	80025b0 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <ssd1306_Init+0x130>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 80025aa:	2002      	movs	r0, #2
 80025ac:	f000 f9ca 	bl	8002944 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETCONTRAST);
 80025b0:	2081      	movs	r0, #129	; 0x81
 80025b2:	f000 f9c7 	bl	8002944 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <ssd1306_Init+0x130>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 80025be:	20cf      	movs	r0, #207	; 0xcf
 80025c0:	f000 f9c0 	bl	8002944 <ssd1306_WriteCommand>
 80025c4:	e006      	b.n	80025d4 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <ssd1306_Init+0x130>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 80025ce:	208f      	movs	r0, #143	; 0x8f
 80025d0:	f000 f9b8 	bl	8002944 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETPRECHARGE);
 80025d4:	20d9      	movs	r0, #217	; 0xd9
 80025d6:	f000 f9b5 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 80025da:	20f1      	movs	r0, #241	; 0xf1
 80025dc:	f000 f9b2 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 80025e0:	20db      	movs	r0, #219	; 0xdb
 80025e2:	f000 f9af 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 80025e6:	2040      	movs	r0, #64	; 0x40
 80025e8:	f000 f9ac 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 80025ec:	20a4      	movs	r0, #164	; 0xa4
 80025ee:	f000 f9a9 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 80025f2:	20a6      	movs	r0, #166	; 0xa6
 80025f4:	f000 f9a6 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 80025f8:	202e      	movs	r0, #46	; 0x2e
 80025fa:	f000 f9a3 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 80025fe:	20af      	movs	r0, #175	; 0xaf
 8002600:	f000 f9a0 	bl	8002944 <ssd1306_WriteCommand>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <ssd1306_Init+0x12c>)
 8002606:	2200      	movs	r2, #0
 8002608:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <ssd1306_Init+0x12c>)
 800260c:	2200      	movs	r2, #0
 800260e:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <ssd1306_Init+0x12c>)
 8002612:	2200      	movs	r2, #0
 8002614:	715a      	strb	r2, [r3, #5]

	// Clear screen
	ssd1306_Clear();
 8002616:	f000 f989 	bl	800292c <ssd1306_Clear>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800261a:	f000 f80d 	bl	8002638 <ssd1306_UpdateScreen>

	SSD1306.Initialized = 1;
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <ssd1306_Init+0x12c>)
 8002620:	2201      	movs	r2, #1
 8002622:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return 1;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200004d8 	.word	0x200004d8
 8002630:	20000098 	.word	0x20000098
 8002634:	200004a0 	.word	0x200004a0

08002638 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	71fb      	strb	r3, [r7, #7]
 8002642:	e019      	b.n	8002678 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	3b50      	subs	r3, #80	; 0x50
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f97a 	bl	8002944 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8002650:	2000      	movs	r0, #0
 8002652:	f000 f977 	bl	8002944 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8002656:	2010      	movs	r0, #16
 8002658:	f000 f974 	bl	8002944 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	01db      	lsls	r3, r3, #7
 8002660:	4a09      	ldr	r2, [pc, #36]	; (8002688 <ssd1306_UpdateScreen+0x50>)
 8002662:	189c      	adds	r4, r3, r2
 8002664:	f7ff ff1d 	bl	80024a2 <width>
 8002668:	4603      	mov	r3, r0
 800266a:	4619      	mov	r1, r3
 800266c:	4620      	mov	r0, r4
 800266e:	f000 f981 	bl	8002974 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	3301      	adds	r3, #1
 8002676:	71fb      	strb	r3, [r7, #7]
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	2b07      	cmp	r3, #7
 800267c:	d9e2      	bls.n	8002644 <ssd1306_UpdateScreen+0xc>
	}
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	200000a0 	.word	0x200000a0

0800268c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 800268c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	460a      	mov	r2, r1
 8002696:	71fb      	strb	r3, [r7, #7]
 8002698:	4613      	mov	r3, r2
 800269a:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 800269c:	4b34      	ldr	r3, [pc, #208]	; (8002770 <ssd1306_DrawPixel+0xe4>)
 800269e:	795b      	ldrb	r3, [r3, #5]
 80026a0:	73fb      	strb	r3, [r7, #15]

	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	b29c      	uxth	r4, r3
 80026a6:	f7ff ff0c 	bl	80024c2 <ssd1306_GetWidth>
 80026aa:	4603      	mov	r3, r0
 80026ac:	429c      	cmp	r4, r3
 80026ae:	d25a      	bcs.n	8002766 <ssd1306_DrawPixel+0xda>
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	b29c      	uxth	r4, r3
 80026b4:	f7ff ff0d 	bl	80024d2 <ssd1306_GetHeight>
 80026b8:	4603      	mov	r3, r0
 80026ba:	429c      	cmp	r4, r3
 80026bc:	d253      	bcs.n	8002766 <ssd1306_DrawPixel+0xda>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80026be:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <ssd1306_DrawPixel+0xe4>)
 80026c0:	791b      	ldrb	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	73fb      	strb	r3, [r7, #15]
	}

	// Draw in the right color
	if (color == White)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d121      	bne.n	800271e <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 80026da:	79fc      	ldrb	r4, [r7, #7]
 80026dc:	79bb      	ldrb	r3, [r7, #6]
 80026de:	08db      	lsrs	r3, r3, #3
 80026e0:	b2dd      	uxtb	r5, r3
 80026e2:	462e      	mov	r6, r5
 80026e4:	f7ff fedd 	bl	80024a2 <width>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4618      	mov	r0, r3
 80026ec:	4603      	mov	r3, r0
 80026ee:	fb03 f306 	mul.w	r3, r3, r6
 80026f2:	4423      	add	r3, r4
 80026f4:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <ssd1306_DrawPixel+0xe8>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	b25a      	sxtb	r2, r3
 80026fa:	79bb      	ldrb	r3, [r7, #6]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	b25b      	sxtb	r3, r3
 8002708:	4313      	orrs	r3, r2
 800270a:	b259      	sxtb	r1, r3
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	462b      	mov	r3, r5
 8002710:	fb00 f303 	mul.w	r3, r0, r3
 8002714:	4413      	add	r3, r2
 8002716:	b2c9      	uxtb	r1, r1
 8002718:	4a16      	ldr	r2, [pc, #88]	; (8002774 <ssd1306_DrawPixel+0xe8>)
 800271a:	54d1      	strb	r1, [r2, r3]
 800271c:	e024      	b.n	8002768 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 800271e:	79fc      	ldrb	r4, [r7, #7]
 8002720:	79bb      	ldrb	r3, [r7, #6]
 8002722:	08db      	lsrs	r3, r3, #3
 8002724:	b2dd      	uxtb	r5, r3
 8002726:	462e      	mov	r6, r5
 8002728:	f7ff febb 	bl	80024a2 <width>
 800272c:	4603      	mov	r3, r0
 800272e:	4618      	mov	r0, r3
 8002730:	4603      	mov	r3, r0
 8002732:	fb03 f306 	mul.w	r3, r3, r6
 8002736:	4423      	add	r3, r4
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <ssd1306_DrawPixel+0xe8>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	b25a      	sxtb	r2, r3
 800273e:	79bb      	ldrb	r3, [r7, #6]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	b25b      	sxtb	r3, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	b25b      	sxtb	r3, r3
 8002750:	4013      	ands	r3, r2
 8002752:	b259      	sxtb	r1, r3
 8002754:	79fa      	ldrb	r2, [r7, #7]
 8002756:	462b      	mov	r3, r5
 8002758:	fb00 f303 	mul.w	r3, r0, r3
 800275c:	4413      	add	r3, r2
 800275e:	b2c9      	uxtb	r1, r1
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <ssd1306_DrawPixel+0xe8>)
 8002762:	54d1      	strb	r1, [r2, r3]
 8002764:	e000      	b.n	8002768 <ssd1306_DrawPixel+0xdc>
		return;
 8002766:	bf00      	nop
	}
}
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800276e:	bf00      	nop
 8002770:	20000098 	.word	0x20000098
 8002774:	200000a0 	.word	0x200000a0

08002778 <ssd1306_WriteChar>:
		pY += 8;
	}
}

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	e883 0006 	stmia.w	r3, {r1, r2}
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002788:	f7ff fe8b 	bl	80024a2 <width>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <ssd1306_WriteChar+0x120>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	793b      	ldrb	r3, [r7, #4]
 8002798:	440b      	add	r3, r1
 800279a:	429a      	cmp	r2, r3
 800279c:	dd0a      	ble.n	80027b4 <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 800279e:	f7ff fe88 	bl	80024b2 <height>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <ssd1306_WriteChar+0x120>)
 80027a8:	885b      	ldrh	r3, [r3, #2]
 80027aa:	4619      	mov	r1, r3
 80027ac:	797b      	ldrb	r3, [r7, #5]
 80027ae:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	dc01      	bgt.n	80027b8 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e06a      	b.n	800288e <ssd1306_WriteChar+0x116>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	e059      	b.n	8002872 <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	3b20      	subs	r3, #32
 80027c4:	7979      	ldrb	r1, [r7, #5]
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4619      	mov	r1, r3
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	440b      	add	r3, r1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	e041      	b.n	8002862 <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d011      	beq.n	8002812 <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <ssd1306_WriteChar+0x120>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	b2d8      	uxtb	r0, r3
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <ssd1306_WriteChar+0x120>)
 80027fe:	885b      	ldrh	r3, [r3, #2]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4413      	add	r3, r2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	4619      	mov	r1, r3
 800280c:	f7ff ff3e 	bl	800268c <ssd1306_DrawPixel>
 8002810:	e024      	b.n	800285c <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 8002812:	4b21      	ldr	r3, [pc, #132]	; (8002898 <ssd1306_WriteChar+0x120>)
 8002814:	795b      	ldrb	r3, [r3, #5]
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf0c      	ite	eq
 800281a:	2301      	moveq	r3, #1
 800281c:	2300      	movne	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <ssd1306_WriteChar+0x120>)
 8002824:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8002826:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <ssd1306_WriteChar+0x120>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4413      	add	r3, r2
 8002832:	b2d8      	uxtb	r0, r3
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <ssd1306_WriteChar+0x120>)
 8002836:	885b      	ldrh	r3, [r3, #2]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4413      	add	r3, r2
 8002840:	b2db      	uxtb	r3, r3
 8002842:	4619      	mov	r1, r3
 8002844:	f7ff ff22 	bl	800268c <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <ssd1306_WriteChar+0x120>)
 800284a:	795b      	ldrb	r3, [r3, #5]
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <ssd1306_WriteChar+0x120>)
 800285a:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	3301      	adds	r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	793b      	ldrb	r3, [r7, #4]
 8002864:	461a      	mov	r2, r3
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4293      	cmp	r3, r2
 800286a:	d3b8      	bcc.n	80027de <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3301      	adds	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	797b      	ldrb	r3, [r7, #5]
 8002874:	461a      	mov	r2, r3
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4293      	cmp	r3, r2
 800287a:	d3a0      	bcc.n	80027be <ssd1306_WriteChar+0x46>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <ssd1306_WriteChar+0x120>)
 800287e:	881a      	ldrh	r2, [r3, #0]
 8002880:	793b      	ldrb	r3, [r7, #4]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4413      	add	r3, r2
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <ssd1306_WriteChar+0x120>)
 800288a:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000098 	.word	0x20000098

0800289c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 80028aa:	e012      	b.n	80028d2 <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	7818      	ldrb	r0, [r3, #0]
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80028b6:	f7ff ff5f 	bl	8002778 <ssd1306_WriteChar>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d002      	beq.n	80028cc <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	e008      	b.n	80028de <ssd1306_WriteString+0x42>
		}

		// Next char
		str++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
	while (*str)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e8      	bne.n	80028ac <ssd1306_WriteString+0x10>
	}

	// Everything ok
	return *str;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	781b      	ldrb	r3, [r3, #0]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	460a      	mov	r2, r1
 80028f2:	71fb      	strb	r3, [r7, #7]
 80028f4:	4613      	mov	r3, r2
 80028f6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <ssd1306_SetCursor+0x2c>)
 80028fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002900:	79bb      	ldrb	r3, [r7, #6]
 8002902:	b29a      	uxth	r2, r3
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <ssd1306_SetCursor+0x2c>)
 8002906:	805a      	strh	r2, [r3, #2]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	20000098 	.word	0x20000098

08002918 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}

void ssd1306_FlipScreenVertically()
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 800291c:	20a1      	movs	r0, #161	; 0xa1
 800291e:	f000 f811 	bl	8002944 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8002922:	20c8      	movs	r0, #200	; 0xc8
 8002924:	f000 f80e 	bl	8002944 <ssd1306_WriteCommand>
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <ssd1306_Clear>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}

void ssd1306_Clear()
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8002930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002934:	2100      	movs	r1, #0
 8002936:	4802      	ldr	r0, [pc, #8]	; (8002940 <ssd1306_Clear+0x14>)
 8002938:	f002 ffca 	bl	80058d0 <memset>
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	200000a0 	.word	0x200000a0

08002944 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af04      	add	r7, sp, #16
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800294e:	230a      	movs	r3, #10
 8002950:	9302      	str	r3, [sp, #8]
 8002952:	2301      	movs	r3, #1
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	1dfb      	adds	r3, r7, #7
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2301      	movs	r3, #1
 800295c:	2200      	movs	r2, #0
 800295e:	2178      	movs	r1, #120	; 0x78
 8002960:	4803      	ldr	r0, [pc, #12]	; (8002970 <ssd1306_WriteCommand+0x2c>)
 8002962:	f000 fe25 	bl	80035b0 <HAL_I2C_Mem_Write>
#endif
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200004d8 	.word	0x200004d8

08002974 <ssd1306_WriteData>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af04      	add	r7, sp, #16
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8002980:	2364      	movs	r3, #100	; 0x64
 8002982:	9302      	str	r3, [sp, #8]
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2301      	movs	r3, #1
 800298e:	2240      	movs	r2, #64	; 0x40
 8002990:	2178      	movs	r1, #120	; 0x78
 8002992:	4803      	ldr	r0, [pc, #12]	; (80029a0 <ssd1306_WriteData+0x2c>)
 8002994:	f000 fe0c 	bl	80035b0 <HAL_I2C_Mem_Write>
#endif
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200004d8 	.word	0x200004d8

080029a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <HAL_MspInit+0x4c>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_MspInit+0x4c>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <HAL_MspInit+0x4c>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	; 0x40
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_MspInit+0x4c>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029e2:	2007      	movs	r0, #7
 80029e4:	f000 facc 	bl	8002f80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	; 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <HAL_I2C_MspInit+0x128>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d12c      	bne.n	8002a70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a32:	23c0      	movs	r3, #192	; 0xc0
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a36:	2312      	movs	r3, #18
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a42:	2304      	movs	r3, #4
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4835      	ldr	r0, [pc, #212]	; (8002b24 <HAL_I2C_MspInit+0x130>)
 8002a4e:	f000 facb 	bl	8002fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a31      	ldr	r2, [pc, #196]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a6e:	e050      	b.n	8002b12 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <HAL_I2C_MspInit+0x134>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d14b      	bne.n	8002b12 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab8:	2312      	movs	r3, #18
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002abc:	2301      	movs	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4815      	ldr	r0, [pc, #84]	; (8002b24 <HAL_I2C_MspInit+0x130>)
 8002ad0:	f000 fa8a 	bl	8002fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ada:	2312      	movs	r3, #18
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aea:	f107 031c 	add.w	r3, r7, #28
 8002aee:	4619      	mov	r1, r3
 8002af0:	480e      	ldr	r0, [pc, #56]	; (8002b2c <HAL_I2C_MspInit+0x138>)
 8002af2:	f000 fa79 	bl	8002fe8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_I2C_MspInit+0x12c>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
}
 8002b12:	bf00      	nop
 8002b14:	3730      	adds	r7, #48	; 0x30
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40005400 	.word	0x40005400
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40005800 	.word	0x40005800
 8002b2c:	40020800 	.word	0x40020800

08002b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	; 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_UART_MspInit+0x84>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d12b      	bne.n	8002baa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <HAL_UART_MspInit+0x88>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4805      	ldr	r0, [pc, #20]	; (8002bbc <HAL_UART_MspInit+0x8c>)
 8002ba6:	f000 fa1f 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002baa:	bf00      	nop
 8002bac:	3728      	adds	r7, #40	; 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40004400 	.word	0x40004400
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020000 	.word	0x40020000

08002bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd2:	e7fe      	b.n	8002bd2 <HardFault_Handler+0x4>

08002bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <MemManage_Handler+0x4>

08002bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <BusFault_Handler+0x4>

08002be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <UsageFault_Handler+0x4>

08002be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c14:	f000 f8c0 	bl	8002d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <_sbrk+0x50>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <_sbrk+0x16>
		heap_end = &end;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <_sbrk+0x50>)
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <_sbrk+0x54>)
 8002c30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <_sbrk+0x50>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <_sbrk+0x50>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	466a      	mov	r2, sp
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d907      	bls.n	8002c56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c46:	f002 fe19 	bl	800587c <__errno>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	230c      	movs	r3, #12
 8002c4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c54:	e006      	b.n	8002c64 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <_sbrk+0x50>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	4a03      	ldr	r2, [pc, #12]	; (8002c6c <_sbrk+0x50>)
 8002c60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200004a4 	.word	0x200004a4
 8002c70:	20000630 	.word	0x20000630

08002c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <SystemInit+0x28>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <SystemInit+0x28>)
 8002c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <SystemInit+0x28>)
 8002c8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c8e:	609a      	str	r2, [r3, #8]
#endif
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ca6:	e003      	b.n	8002cb0 <LoopCopyDataInit>

08002ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cae:	3104      	adds	r1, #4

08002cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cb0:	480b      	ldr	r0, [pc, #44]	; (8002ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cb8:	d3f6      	bcc.n	8002ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8002cba:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cbc:	e002      	b.n	8002cc4 <LoopFillZerobss>

08002cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cc0:	f842 3b04 	str.w	r3, [r2], #4

08002cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cc8:	d3f9      	bcc.n	8002cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cca:	f7ff ffd3 	bl	8002c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cce:	f002 fddb 	bl	8005888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cd2:	f7ff f953 	bl	8001f7c <main>
  bx  lr    
 8002cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002cdc:	08007bf0 	.word	0x08007bf0
  ldr  r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ce4:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002ce8:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002cec:	2000062c 	.word	0x2000062c

08002cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf0:	e7fe      	b.n	8002cf0 <ADC_IRQHandler>
	...

08002cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_Init+0x40>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	; (8002d34 <HAL_Init+0x40>)
 8002cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_Init+0x40>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <HAL_Init+0x40>)
 8002d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_Init+0x40>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a07      	ldr	r2, [pc, #28]	; (8002d34 <HAL_Init+0x40>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d1c:	2003      	movs	r0, #3
 8002d1e:	f000 f92f 	bl	8002f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f000 f808 	bl	8002d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d28:	f7ff fe3c 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00

08002d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d40:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_InitTick+0x54>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_InitTick+0x58>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f939 	bl	8002fce <HAL_SYSTICK_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00e      	b.n	8002d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b0f      	cmp	r3, #15
 8002d6a:	d80a      	bhi.n	8002d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d74:	f000 f90f 	bl	8002f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d78:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <HAL_InitTick+0x5c>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e000      	b.n	8002d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	20000010 	.word	0x20000010
 8002d94:	2000000c 	.word	0x2000000c

08002d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_IncTick+0x20>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_IncTick+0x24>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <HAL_IncTick+0x24>)
 8002daa:	6013      	str	r3, [r2, #0]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000010 	.word	0x20000010
 8002dbc:	20000624 	.word	0x20000624

08002dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	; (8002dd4 <HAL_GetTick+0x14>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000624 	.word	0x20000624

08002dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de0:	f7ff ffee 	bl	8002dc0 <HAL_GetTick>
 8002de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df0:	d005      	beq.n	8002dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_Delay+0x40>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dfe:	bf00      	nop
 8002e00:	f7ff ffde 	bl	8002dc0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d8f7      	bhi.n	8002e00 <HAL_Delay+0x28>
  {
  }
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000010 	.word	0x20000010

08002e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4e:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	60d3      	str	r3, [r2, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <__NVIC_GetPriorityGrouping+0x18>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0307 	and.w	r3, r3, #7
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db0a      	blt.n	8002eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	490c      	ldr	r1, [pc, #48]	; (8002ecc <__NVIC_SetPriority+0x4c>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea8:	e00a      	b.n	8002ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <__NVIC_SetPriority+0x50>)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	761a      	strb	r2, [r3, #24]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000e100 	.word	0xe000e100
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f1c3 0307 	rsb	r3, r3, #7
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf28      	it	cs
 8002ef2:	2304      	movcs	r3, #4
 8002ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d902      	bls.n	8002f04 <NVIC_EncodePriority+0x30>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3b03      	subs	r3, #3
 8002f02:	e000      	b.n	8002f06 <NVIC_EncodePriority+0x32>
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43d9      	mvns	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	4313      	orrs	r3, r2
         );
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f4c:	d301      	bcc.n	8002f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00f      	b.n	8002f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <SysTick_Config+0x40>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f60:	f7ff ff8e 	bl	8002e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <SysTick_Config+0x40>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <SysTick_Config+0x40>)
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	e000e010 	.word	0xe000e010

08002f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff47 	bl	8002e1c <__NVIC_SetPriorityGrouping>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa8:	f7ff ff5c 	bl	8002e64 <__NVIC_GetPriorityGrouping>
 8002fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff8e 	bl	8002ed4 <NVIC_EncodePriority>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff5d 	bl	8002e80 <__NVIC_SetPriority>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffb0 	bl	8002f3c <SysTick_Config>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e165      	b.n	80032d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	f040 8154 	bne.w	80032ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d00b      	beq.n	8003042 <HAL_GPIO_Init+0x5a>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d007      	beq.n	8003042 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003036:	2b11      	cmp	r3, #17
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b12      	cmp	r3, #18
 8003040:	d130      	bne.n	80030a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003078:	2201      	movs	r2, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 0201 	and.w	r2, r3, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0xfc>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b12      	cmp	r3, #18
 80030e2:	d123      	bne.n	800312c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	08da      	lsrs	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3208      	adds	r2, #8
 80030ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	220f      	movs	r2, #15
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	08da      	lsrs	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	69b9      	ldr	r1, [r7, #24]
 8003128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80ae 	beq.w	80032ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	4b5c      	ldr	r3, [pc, #368]	; (80032e4 <HAL_GPIO_Init+0x2fc>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	4a5b      	ldr	r2, [pc, #364]	; (80032e4 <HAL_GPIO_Init+0x2fc>)
 8003178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317c:	6453      	str	r3, [r2, #68]	; 0x44
 800317e:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_GPIO_Init+0x2fc>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318a:	4a57      	ldr	r2, [pc, #348]	; (80032e8 <HAL_GPIO_Init+0x300>)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	3302      	adds	r3, #2
 8003192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	220f      	movs	r2, #15
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4e      	ldr	r2, [pc, #312]	; (80032ec <HAL_GPIO_Init+0x304>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d025      	beq.n	8003202 <HAL_GPIO_Init+0x21a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4d      	ldr	r2, [pc, #308]	; (80032f0 <HAL_GPIO_Init+0x308>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01f      	beq.n	80031fe <HAL_GPIO_Init+0x216>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4c      	ldr	r2, [pc, #304]	; (80032f4 <HAL_GPIO_Init+0x30c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d019      	beq.n	80031fa <HAL_GPIO_Init+0x212>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4b      	ldr	r2, [pc, #300]	; (80032f8 <HAL_GPIO_Init+0x310>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_GPIO_Init+0x20e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a4a      	ldr	r2, [pc, #296]	; (80032fc <HAL_GPIO_Init+0x314>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00d      	beq.n	80031f2 <HAL_GPIO_Init+0x20a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a49      	ldr	r2, [pc, #292]	; (8003300 <HAL_GPIO_Init+0x318>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <HAL_GPIO_Init+0x206>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a48      	ldr	r2, [pc, #288]	; (8003304 <HAL_GPIO_Init+0x31c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_GPIO_Init+0x202>
 80031e6:	2306      	movs	r3, #6
 80031e8:	e00c      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031ea:	2307      	movs	r3, #7
 80031ec:	e00a      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031ee:	2305      	movs	r3, #5
 80031f0:	e008      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031f2:	2304      	movs	r3, #4
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x21c>
 8003202:	2300      	movs	r3, #0
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f002 0203 	and.w	r2, r2, #3
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	4093      	lsls	r3, r2
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003214:	4934      	ldr	r1, [pc, #208]	; (80032e8 <HAL_GPIO_Init+0x300>)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003222:	4b39      	ldr	r3, [pc, #228]	; (8003308 <HAL_GPIO_Init+0x320>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003246:	4a30      	ldr	r2, [pc, #192]	; (8003308 <HAL_GPIO_Init+0x320>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800324c:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <HAL_GPIO_Init+0x320>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003270:	4a25      	ldr	r2, [pc, #148]	; (8003308 <HAL_GPIO_Init+0x320>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <HAL_GPIO_Init+0x320>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800329a:	4a1b      	ldr	r2, [pc, #108]	; (8003308 <HAL_GPIO_Init+0x320>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_GPIO_Init+0x320>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032c4:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_GPIO_Init+0x320>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	f67f ae96 	bls.w	8003004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	3724      	adds	r7, #36	; 0x24
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40013800 	.word	0x40013800
 80032ec:	40020000 	.word	0x40020000
 80032f0:	40020400 	.word	0x40020400
 80032f4:	40020800 	.word	0x40020800
 80032f8:	40020c00 	.word	0x40020c00
 80032fc:	40021000 	.word	0x40021000
 8003300:	40021400 	.word	0x40021400
 8003304:	40021800 	.word	0x40021800
 8003308:	40013c00 	.word	0x40013c00

0800330c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	807b      	strh	r3, [r7, #2]
 8003318:	4613      	mov	r3, r2
 800331a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800331c:	787b      	ldrb	r3, [r7, #1]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003328:	e003      	b.n	8003332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	619a      	str	r2, [r3, #24]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e11f      	b.n	8003592 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fb44 	bl	80029f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	; 0x24
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003392:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033a4:	f001 f99c 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80033a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4a7b      	ldr	r2, [pc, #492]	; (800359c <HAL_I2C_Init+0x25c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d807      	bhi.n	80033c4 <HAL_I2C_Init+0x84>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a7a      	ldr	r2, [pc, #488]	; (80035a0 <HAL_I2C_Init+0x260>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	bf94      	ite	ls
 80033bc:	2301      	movls	r3, #1
 80033be:	2300      	movhi	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e006      	b.n	80033d2 <HAL_I2C_Init+0x92>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a77      	ldr	r2, [pc, #476]	; (80035a4 <HAL_I2C_Init+0x264>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	bf94      	ite	ls
 80033cc:	2301      	movls	r3, #1
 80033ce:	2300      	movhi	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0db      	b.n	8003592 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4a72      	ldr	r2, [pc, #456]	; (80035a8 <HAL_I2C_Init+0x268>)
 80033de:	fba2 2303 	umull	r2, r3, r2, r3
 80033e2:	0c9b      	lsrs	r3, r3, #18
 80033e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a64      	ldr	r2, [pc, #400]	; (800359c <HAL_I2C_Init+0x25c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d802      	bhi.n	8003414 <HAL_I2C_Init+0xd4>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3301      	adds	r3, #1
 8003412:	e009      	b.n	8003428 <HAL_I2C_Init+0xe8>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800341a:	fb02 f303 	mul.w	r3, r2, r3
 800341e:	4a63      	ldr	r2, [pc, #396]	; (80035ac <HAL_I2C_Init+0x26c>)
 8003420:	fba2 2303 	umull	r2, r3, r2, r3
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	3301      	adds	r3, #1
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	430b      	orrs	r3, r1
 800342e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800343a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4956      	ldr	r1, [pc, #344]	; (800359c <HAL_I2C_Init+0x25c>)
 8003444:	428b      	cmp	r3, r1
 8003446:	d80d      	bhi.n	8003464 <HAL_I2C_Init+0x124>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e59      	subs	r1, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fbb1 f3f3 	udiv	r3, r1, r3
 8003456:	3301      	adds	r3, #1
 8003458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345c:	2b04      	cmp	r3, #4
 800345e:	bf38      	it	cc
 8003460:	2304      	movcc	r3, #4
 8003462:	e04f      	b.n	8003504 <HAL_I2C_Init+0x1c4>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <HAL_I2C_Init+0x150>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e58      	subs	r0, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	440b      	add	r3, r1
 800347a:	fbb0 f3f3 	udiv	r3, r0, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e012      	b.n	80034b6 <HAL_I2C_Init+0x176>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e58      	subs	r0, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	0099      	lsls	r1, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Init+0x17e>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e022      	b.n	8003504 <HAL_I2C_Init+0x1c4>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10e      	bne.n	80034e4 <HAL_I2C_Init+0x1a4>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1e58      	subs	r0, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	440b      	add	r3, r1
 80034d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e2:	e00f      	b.n	8003504 <HAL_I2C_Init+0x1c4>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	6809      	ldr	r1, [r1, #0]
 8003508:	4313      	orrs	r3, r2
 800350a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003532:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6911      	ldr	r1, [r2, #16]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68d2      	ldr	r2, [r2, #12]
 800353e:	4311      	orrs	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	430b      	orrs	r3, r1
 8003546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	000186a0 	.word	0x000186a0
 80035a0:	001e847f 	.word	0x001e847f
 80035a4:	003d08ff 	.word	0x003d08ff
 80035a8:	431bde83 	.word	0x431bde83
 80035ac:	10624dd3 	.word	0x10624dd3

080035b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	817b      	strh	r3, [r7, #10]
 80035c2:	460b      	mov	r3, r1
 80035c4:	813b      	strh	r3, [r7, #8]
 80035c6:	4613      	mov	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035ca:	f7ff fbf9 	bl	8002dc0 <HAL_GetTick>
 80035ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b20      	cmp	r3, #32
 80035da:	f040 80d9 	bne.w	8003790 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2319      	movs	r3, #25
 80035e4:	2201      	movs	r2, #1
 80035e6:	496d      	ldr	r1, [pc, #436]	; (800379c <HAL_I2C_Mem_Write+0x1ec>)
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fda9 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
 80035f6:	e0cc      	b.n	8003792 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <HAL_I2C_Mem_Write+0x56>
 8003602:	2302      	movs	r3, #2
 8003604:	e0c5      	b.n	8003792 <HAL_I2C_Mem_Write+0x1e2>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d007      	beq.n	800362c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2221      	movs	r2, #33	; 0x21
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a4d      	ldr	r2, [pc, #308]	; (80037a0 <HAL_I2C_Mem_Write+0x1f0>)
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800366e:	88f8      	ldrh	r0, [r7, #6]
 8003670:	893a      	ldrh	r2, [r7, #8]
 8003672:	8979      	ldrh	r1, [r7, #10]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	4603      	mov	r3, r0
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fbe4 	bl	8003e4c <I2C_RequestMemoryWrite>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d052      	beq.n	8003730 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e081      	b.n	8003792 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fe2a 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d107      	bne.n	80036b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06b      	b.n	8003792 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d11b      	bne.n	8003730 <HAL_I2C_Mem_Write+0x180>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d017      	beq.n	8003730 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1aa      	bne.n	800368e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fe16 	bl	800436e <I2C_WaitOnBTFFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00d      	beq.n	8003764 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	2b04      	cmp	r3, #4
 800374e:	d107      	bne.n	8003760 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e016      	b.n	8003792 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	00100002 	.word	0x00100002
 80037a0:	ffff0000 	.word	0xffff0000

080037a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	; 0x30
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	4608      	mov	r0, r1
 80037ae:	4611      	mov	r1, r2
 80037b0:	461a      	mov	r2, r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	817b      	strh	r3, [r7, #10]
 80037b6:	460b      	mov	r3, r1
 80037b8:	813b      	strh	r3, [r7, #8]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037be:	f7ff faff 	bl	8002dc0 <HAL_GetTick>
 80037c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	f040 8208 	bne.w	8003be2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2319      	movs	r3, #25
 80037d8:	2201      	movs	r2, #1
 80037da:	497b      	ldr	r1, [pc, #492]	; (80039c8 <HAL_I2C_Mem_Read+0x224>)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fcaf 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
 80037ea:	e1fb      	b.n	8003be4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_I2C_Mem_Read+0x56>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e1f4      	b.n	8003be4 <HAL_I2C_Mem_Read+0x440>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d007      	beq.n	8003820 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2222      	movs	r2, #34	; 0x22
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2240      	movs	r2, #64	; 0x40
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a5b      	ldr	r2, [pc, #364]	; (80039cc <HAL_I2C_Mem_Read+0x228>)
 8003860:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003862:	88f8      	ldrh	r0, [r7, #6]
 8003864:	893a      	ldrh	r2, [r7, #8]
 8003866:	8979      	ldrh	r1, [r7, #10]
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	4603      	mov	r3, r0
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fb7e 	bl	8003f74 <I2C_RequestMemoryRead>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e1b0      	b.n	8003be4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	d113      	bne.n	80038b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	623b      	str	r3, [r7, #32]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	623b      	str	r3, [r7, #32]
 800389e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e184      	b.n	8003bbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d11b      	bne.n	80038f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e164      	b.n	8003bbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d11b      	bne.n	8003932 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003908:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391a:	2300      	movs	r3, #0
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	e144      	b.n	8003bbc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003948:	e138      	b.n	8003bbc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394e:	2b03      	cmp	r3, #3
 8003950:	f200 80f1 	bhi.w	8003b36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	2b01      	cmp	r3, #1
 800395a:	d123      	bne.n	80039a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 fd45 	bl	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e139      	b.n	8003be4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039a2:	e10b      	b.n	8003bbc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d14e      	bne.n	8003a4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	2200      	movs	r2, #0
 80039b4:	4906      	ldr	r1, [pc, #24]	; (80039d0 <HAL_I2C_Mem_Read+0x22c>)
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fbc2 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e10e      	b.n	8003be4 <HAL_I2C_Mem_Read+0x440>
 80039c6:	bf00      	nop
 80039c8:	00100002 	.word	0x00100002
 80039cc:	ffff0000 	.word	0xffff0000
 80039d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a48:	e0b8      	b.n	8003bbc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	2200      	movs	r2, #0
 8003a52:	4966      	ldr	r1, [pc, #408]	; (8003bec <HAL_I2C_Mem_Read+0x448>)
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 fb73 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0bf      	b.n	8003be4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	2200      	movs	r2, #0
 8003aae:	494f      	ldr	r1, [pc, #316]	; (8003bec <HAL_I2C_Mem_Read+0x448>)
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fb45 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e091      	b.n	8003be4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b34:	e042      	b.n	8003bbc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fc58 	bl	80043f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e04c      	b.n	8003be4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d118      	bne.n	8003bbc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f47f aec2 	bne.w	800394a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3728      	adds	r7, #40	; 0x28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	00010004 	.word	0x00010004

08003bf0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff f8de 	bl	8002dc0 <HAL_GetTick>
 8003c04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	f040 8110 	bne.w	8003e38 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2319      	movs	r3, #25
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4988      	ldr	r1, [pc, #544]	; (8003e44 <HAL_I2C_IsDeviceReady+0x254>)
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fa8c 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e103      	b.n	8003e3a <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2C_IsDeviceReady+0x50>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0fc      	b.n	8003e3a <HAL_I2C_IsDeviceReady+0x24a>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d007      	beq.n	8003c66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2224      	movs	r2, #36	; 0x24
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a70      	ldr	r2, [pc, #448]	; (8003e48 <HAL_I2C_IsDeviceReady+0x258>)
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fa4a 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00c      	beq.n	8003ccc <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e0b6      	b.n	8003e3a <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ccc:	897b      	ldrh	r3, [r7, #10]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cda:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cdc:	f7ff f870 	bl	8002dc0 <HAL_GetTick>
 8003ce0:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d10:	e025      	b.n	8003d5e <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d12:	f7ff f855 	bl	8002dc0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d302      	bcc.n	8003d28 <HAL_I2C_IsDeviceReady+0x138>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d103      	bne.n	8003d30 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	22a0      	movs	r2, #160	; 0xa0
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	bf0c      	ite	eq
 8003d56:	2301      	moveq	r3, #1
 8003d58:	2300      	movne	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2ba0      	cmp	r3, #160	; 0xa0
 8003d68:	d005      	beq.n	8003d76 <HAL_I2C_IsDeviceReady+0x186>
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <HAL_I2C_IsDeviceReady+0x186>
 8003d70:	7dbb      	ldrb	r3, [r7, #22]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0cd      	beq.n	8003d12 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d129      	bne.n	8003de0 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2319      	movs	r3, #25
 8003db8:	2201      	movs	r2, #1
 8003dba:	4922      	ldr	r1, [pc, #136]	; (8003e44 <HAL_I2C_IsDeviceReady+0x254>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f9bf 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e036      	b.n	8003e3a <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e02c      	b.n	8003e3a <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003df8:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	2319      	movs	r3, #25
 8003e00:	2201      	movs	r2, #1
 8003e02:	4910      	ldr	r1, [pc, #64]	; (8003e44 <HAL_I2C_IsDeviceReady+0x254>)
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f99b 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e012      	b.n	8003e3a <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	f4ff af33 	bcc.w	8003c8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	00100002 	.word	0x00100002
 8003e48:	ffff0000 	.word	0xffff0000

08003e4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	4608      	mov	r0, r1
 8003e56:	4611      	mov	r1, r2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	817b      	strh	r3, [r7, #10]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	813b      	strh	r3, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f95c 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e05f      	b.n	8003f68 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ea8:	897b      	ldrh	r3, [r7, #10]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	6a3a      	ldr	r2, [r7, #32]
 8003ebc:	492c      	ldr	r1, [pc, #176]	; (8003f70 <I2C_RequestMemoryWrite+0x124>)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f995 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e04c      	b.n	8003f68 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f9ff 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d107      	bne.n	8003f0c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e02b      	b.n	8003f68 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f16:	893b      	ldrh	r3, [r7, #8]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
 8003f20:	e021      	b.n	8003f66 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f22:	893b      	ldrh	r3, [r7, #8]
 8003f24:	0a1b      	lsrs	r3, r3, #8
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f32:	6a39      	ldr	r1, [r7, #32]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f9d9 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d107      	bne.n	8003f58 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e005      	b.n	8003f68 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5c:	893b      	ldrh	r3, [r7, #8]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	00010002 	.word	0x00010002

08003f74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	4611      	mov	r1, r2
 8003f80:	461a      	mov	r2, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	817b      	strh	r3, [r7, #10]
 8003f86:	460b      	mov	r3, r1
 8003f88:	813b      	strh	r3, [r7, #8]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f8c0 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00c      	beq.n	8003fe0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0a9      	b.n	8004134 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe0:	897b      	ldrh	r3, [r7, #10]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	6a3a      	ldr	r2, [r7, #32]
 8003ff4:	4951      	ldr	r1, [pc, #324]	; (800413c <I2C_RequestMemoryRead+0x1c8>)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f8f9 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e096      	b.n	8004134 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	6a39      	ldr	r1, [r7, #32]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f963 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00d      	beq.n	8004048 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	2b04      	cmp	r3, #4
 8004032:	d107      	bne.n	8004044 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004042:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e075      	b.n	8004134 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d105      	bne.n	800405a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800404e:	893b      	ldrh	r3, [r7, #8]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]
 8004058:	e021      	b.n	800409e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800405a:	893b      	ldrh	r3, [r7, #8]
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	b29b      	uxth	r3, r3
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	6a39      	ldr	r1, [r7, #32]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f93d 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	2b04      	cmp	r3, #4
 800407e:	d107      	bne.n	8004090 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e04f      	b.n	8004134 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004094:	893b      	ldrh	r3, [r7, #8]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800409e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a0:	6a39      	ldr	r1, [r7, #32]
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f922 	bl	80042ec <I2C_WaitOnTXEFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d107      	bne.n	80040c6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e034      	b.n	8004134 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f82a 	bl	8004140 <I2C_WaitOnFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e013      	b.n	8004134 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800410c:	897b      	ldrh	r3, [r7, #10]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	4906      	ldr	r1, [pc, #24]	; (800413c <I2C_RequestMemoryRead+0x1c8>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f863 	bl	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	00010002 	.word	0x00010002

08004140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004150:	e025      	b.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004158:	d021      	beq.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800415a:	f7fe fe31 	bl	8002dc0 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d302      	bcc.n	8004170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d116      	bne.n	800419e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e023      	b.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10d      	bne.n	80041c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	43da      	mvns	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4013      	ands	r3, r2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf0c      	ite	eq
 80041ba:	2301      	moveq	r3, #1
 80041bc:	2300      	movne	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	e00c      	b.n	80041de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	43da      	mvns	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0b6      	beq.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041fc:	e051      	b.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420c:	d123      	bne.n	8004256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004226:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e046      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425c:	d021      	beq.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7fe fdaf 	bl	8002dc0 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	429a      	cmp	r2, r3
 800426c:	d302      	bcc.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e020      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10c      	bne.n	80042c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	43da      	mvns	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4013      	ands	r3, r2
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	e00b      	b.n	80042de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	43da      	mvns	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d18d      	bne.n	80041fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f8:	e02d      	b.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 f8ce 	bl	800449c <I2C_IsAcknowledgeFailed>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e02d      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004310:	d021      	beq.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fd55 	bl	8002dc0 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e007      	b.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d1ca      	bne.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800437a:	e02d      	b.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f88d 	bl	800449c <I2C_IsAcknowledgeFailed>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e02d      	b.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004392:	d021      	beq.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fe fd14 	bl	8002dc0 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e007      	b.n	80043e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d1ca      	bne.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043fc:	e042      	b.n	8004484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d119      	bne.n	8004440 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0210 	mvn.w	r2, #16
 8004414:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e029      	b.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004440:	f7fe fcbe 	bl	8002dc0 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d116      	bne.n	8004484 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e007      	b.n	8004494 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d1b5      	bne.n	80043fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b2:	d11b      	bne.n	80044ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0cc      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004510:	4b68      	ldr	r3, [pc, #416]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d90c      	bls.n	8004538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0b8      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d020      	beq.n	8004586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004550:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4a58      	ldr	r2, [pc, #352]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800455a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004568:	4b53      	ldr	r3, [pc, #332]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4a52      	ldr	r2, [pc, #328]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004574:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	494d      	ldr	r1, [pc, #308]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d044      	beq.n	800461c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d119      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e07f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d003      	beq.n	80045ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e06f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ca:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e067      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f023 0203 	bic.w	r2, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4934      	ldr	r1, [pc, #208]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fe fbe8 	bl	8002dc0 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	e00a      	b.n	800460a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f4:	f7fe fbe4 	bl	8002dc0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e04f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460a:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 020c 	and.w	r2, r3, #12
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	429a      	cmp	r2, r3
 800461a:	d1eb      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d20c      	bcs.n	8004644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e032      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4916      	ldr	r1, [pc, #88]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	490e      	ldr	r1, [pc, #56]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004682:	f000 f855 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8004686:	4601      	mov	r1, r0
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004694:	5cd3      	ldrb	r3, [r2, r3]
 8004696:	fa21 f303 	lsr.w	r3, r1, r3
 800469a:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_ClockConfig+0x1c8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe fb48 	bl	8002d38 <HAL_InitTick>

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40023c00 	.word	0x40023c00
 80046b8:	40023800 	.word	0x40023800
 80046bc:	08007b50 	.word	0x08007b50
 80046c0:	20000008 	.word	0x20000008
 80046c4:	2000000c 	.word	0x2000000c

080046c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000008 	.word	0x20000008

080046e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046e4:	f7ff fff0 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 80046e8:	4601      	mov	r1, r0
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0a9b      	lsrs	r3, r3, #10
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4a03      	ldr	r2, [pc, #12]	; (8004704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f6:	5cd3      	ldrb	r3, [r2, r3]
 80046f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40023800 	.word	0x40023800
 8004704:	08007b60 	.word	0x08007b60

08004708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800470c:	f7ff ffdc 	bl	80046c8 <HAL_RCC_GetHCLKFreq>
 8004710:	4601      	mov	r1, r0
 8004712:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	0b5b      	lsrs	r3, r3, #13
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	4a03      	ldr	r2, [pc, #12]	; (800472c <HAL_RCC_GetPCLK2Freq+0x24>)
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004724:	4618      	mov	r0, r3
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40023800 	.word	0x40023800
 800472c:	08007b60 	.word	0x08007b60

08004730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800474a:	4bc6      	ldr	r3, [pc, #792]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b0c      	cmp	r3, #12
 8004754:	f200 817e 	bhi.w	8004a54 <HAL_RCC_GetSysClockFreq+0x324>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <HAL_RCC_GetSysClockFreq+0x30>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004795 	.word	0x08004795
 8004764:	08004a55 	.word	0x08004a55
 8004768:	08004a55 	.word	0x08004a55
 800476c:	08004a55 	.word	0x08004a55
 8004770:	0800479b 	.word	0x0800479b
 8004774:	08004a55 	.word	0x08004a55
 8004778:	08004a55 	.word	0x08004a55
 800477c:	08004a55 	.word	0x08004a55
 8004780:	080047a1 	.word	0x080047a1
 8004784:	08004a55 	.word	0x08004a55
 8004788:	08004a55 	.word	0x08004a55
 800478c:	08004a55 	.word	0x08004a55
 8004790:	080048fd 	.word	0x080048fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004794:	4bb4      	ldr	r3, [pc, #720]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x338>)
 8004796:	613b      	str	r3, [r7, #16]
       break;
 8004798:	e15f      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800479a:	4bb4      	ldr	r3, [pc, #720]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x33c>)
 800479c:	613b      	str	r3, [r7, #16]
      break;
 800479e:	e15c      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047a0:	4bb0      	ldr	r3, [pc, #704]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047aa:	4bae      	ldr	r3, [pc, #696]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d04a      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b6:	4bab      	ldr	r3, [pc, #684]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	f04f 0400 	mov.w	r4, #0
 80047c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	ea03 0501 	and.w	r5, r3, r1
 80047cc:	ea04 0602 	and.w	r6, r4, r2
 80047d0:	4629      	mov	r1, r5
 80047d2:	4632      	mov	r2, r6
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	f04f 0400 	mov.w	r4, #0
 80047dc:	0154      	lsls	r4, r2, #5
 80047de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80047e2:	014b      	lsls	r3, r1, #5
 80047e4:	4619      	mov	r1, r3
 80047e6:	4622      	mov	r2, r4
 80047e8:	1b49      	subs	r1, r1, r5
 80047ea:	eb62 0206 	sbc.w	r2, r2, r6
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	f04f 0400 	mov.w	r4, #0
 80047f6:	0194      	lsls	r4, r2, #6
 80047f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80047fc:	018b      	lsls	r3, r1, #6
 80047fe:	1a5b      	subs	r3, r3, r1
 8004800:	eb64 0402 	sbc.w	r4, r4, r2
 8004804:	f04f 0100 	mov.w	r1, #0
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	00e2      	lsls	r2, r4, #3
 800480e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004812:	00d9      	lsls	r1, r3, #3
 8004814:	460b      	mov	r3, r1
 8004816:	4614      	mov	r4, r2
 8004818:	195b      	adds	r3, r3, r5
 800481a:	eb44 0406 	adc.w	r4, r4, r6
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	0262      	lsls	r2, r4, #9
 8004828:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800482c:	0259      	lsls	r1, r3, #9
 800482e:	460b      	mov	r3, r1
 8004830:	4614      	mov	r4, r2
 8004832:	4618      	mov	r0, r3
 8004834:	4621      	mov	r1, r4
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f04f 0400 	mov.w	r4, #0
 800483c:	461a      	mov	r2, r3
 800483e:	4623      	mov	r3, r4
 8004840:	f7fc fa4a 	bl	8000cd8 <__aeabi_uldivmod>
 8004844:	4603      	mov	r3, r0
 8004846:	460c      	mov	r4, r1
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e049      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484c:	4b85      	ldr	r3, [pc, #532]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	099b      	lsrs	r3, r3, #6
 8004852:	f04f 0400 	mov.w	r4, #0
 8004856:	f240 11ff 	movw	r1, #511	; 0x1ff
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	ea03 0501 	and.w	r5, r3, r1
 8004862:	ea04 0602 	and.w	r6, r4, r2
 8004866:	4629      	mov	r1, r5
 8004868:	4632      	mov	r2, r6
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	f04f 0400 	mov.w	r4, #0
 8004872:	0154      	lsls	r4, r2, #5
 8004874:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004878:	014b      	lsls	r3, r1, #5
 800487a:	4619      	mov	r1, r3
 800487c:	4622      	mov	r2, r4
 800487e:	1b49      	subs	r1, r1, r5
 8004880:	eb62 0206 	sbc.w	r2, r2, r6
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	f04f 0400 	mov.w	r4, #0
 800488c:	0194      	lsls	r4, r2, #6
 800488e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004892:	018b      	lsls	r3, r1, #6
 8004894:	1a5b      	subs	r3, r3, r1
 8004896:	eb64 0402 	sbc.w	r4, r4, r2
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	00e2      	lsls	r2, r4, #3
 80048a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048a8:	00d9      	lsls	r1, r3, #3
 80048aa:	460b      	mov	r3, r1
 80048ac:	4614      	mov	r4, r2
 80048ae:	195b      	adds	r3, r3, r5
 80048b0:	eb44 0406 	adc.w	r4, r4, r6
 80048b4:	f04f 0100 	mov.w	r1, #0
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	02a2      	lsls	r2, r4, #10
 80048be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80048c2:	0299      	lsls	r1, r3, #10
 80048c4:	460b      	mov	r3, r1
 80048c6:	4614      	mov	r4, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	4621      	mov	r1, r4
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f04f 0400 	mov.w	r4, #0
 80048d2:	461a      	mov	r2, r3
 80048d4:	4623      	mov	r3, r4
 80048d6:	f7fc f9ff 	bl	8000cd8 <__aeabi_uldivmod>
 80048da:	4603      	mov	r3, r0
 80048dc:	460c      	mov	r4, r1
 80048de:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048e0:	4b60      	ldr	r3, [pc, #384]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	3301      	adds	r3, #1
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	613b      	str	r3, [r7, #16]
      break;
 80048fa:	e0ae      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fc:	4b59      	ldr	r3, [pc, #356]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004904:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004906:	4b57      	ldr	r3, [pc, #348]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d04a      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004912:	4b54      	ldr	r3, [pc, #336]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	f04f 0400 	mov.w	r4, #0
 800491c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	ea03 0501 	and.w	r5, r3, r1
 8004928:	ea04 0602 	and.w	r6, r4, r2
 800492c:	4629      	mov	r1, r5
 800492e:	4632      	mov	r2, r6
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	f04f 0400 	mov.w	r4, #0
 8004938:	0154      	lsls	r4, r2, #5
 800493a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800493e:	014b      	lsls	r3, r1, #5
 8004940:	4619      	mov	r1, r3
 8004942:	4622      	mov	r2, r4
 8004944:	1b49      	subs	r1, r1, r5
 8004946:	eb62 0206 	sbc.w	r2, r2, r6
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	f04f 0400 	mov.w	r4, #0
 8004952:	0194      	lsls	r4, r2, #6
 8004954:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004958:	018b      	lsls	r3, r1, #6
 800495a:	1a5b      	subs	r3, r3, r1
 800495c:	eb64 0402 	sbc.w	r4, r4, r2
 8004960:	f04f 0100 	mov.w	r1, #0
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	00e2      	lsls	r2, r4, #3
 800496a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800496e:	00d9      	lsls	r1, r3, #3
 8004970:	460b      	mov	r3, r1
 8004972:	4614      	mov	r4, r2
 8004974:	195b      	adds	r3, r3, r5
 8004976:	eb44 0406 	adc.w	r4, r4, r6
 800497a:	f04f 0100 	mov.w	r1, #0
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	0262      	lsls	r2, r4, #9
 8004984:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004988:	0259      	lsls	r1, r3, #9
 800498a:	460b      	mov	r3, r1
 800498c:	4614      	mov	r4, r2
 800498e:	4618      	mov	r0, r3
 8004990:	4621      	mov	r1, r4
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f04f 0400 	mov.w	r4, #0
 8004998:	461a      	mov	r2, r3
 800499a:	4623      	mov	r3, r4
 800499c:	f7fc f99c 	bl	8000cd8 <__aeabi_uldivmod>
 80049a0:	4603      	mov	r3, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e049      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a8:	4b2e      	ldr	r3, [pc, #184]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	099b      	lsrs	r3, r3, #6
 80049ae:	f04f 0400 	mov.w	r4, #0
 80049b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	ea03 0501 	and.w	r5, r3, r1
 80049be:	ea04 0602 	and.w	r6, r4, r2
 80049c2:	4629      	mov	r1, r5
 80049c4:	4632      	mov	r2, r6
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	f04f 0400 	mov.w	r4, #0
 80049ce:	0154      	lsls	r4, r2, #5
 80049d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049d4:	014b      	lsls	r3, r1, #5
 80049d6:	4619      	mov	r1, r3
 80049d8:	4622      	mov	r2, r4
 80049da:	1b49      	subs	r1, r1, r5
 80049dc:	eb62 0206 	sbc.w	r2, r2, r6
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	f04f 0400 	mov.w	r4, #0
 80049e8:	0194      	lsls	r4, r2, #6
 80049ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049ee:	018b      	lsls	r3, r1, #6
 80049f0:	1a5b      	subs	r3, r3, r1
 80049f2:	eb64 0402 	sbc.w	r4, r4, r2
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	00e2      	lsls	r2, r4, #3
 8004a00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a04:	00d9      	lsls	r1, r3, #3
 8004a06:	460b      	mov	r3, r1
 8004a08:	4614      	mov	r4, r2
 8004a0a:	195b      	adds	r3, r3, r5
 8004a0c:	eb44 0406 	adc.w	r4, r4, r6
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	02a2      	lsls	r2, r4, #10
 8004a1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a1e:	0299      	lsls	r1, r3, #10
 8004a20:	460b      	mov	r3, r1
 8004a22:	4614      	mov	r4, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	4621      	mov	r1, r4
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f04f 0400 	mov.w	r4, #0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4623      	mov	r3, r4
 8004a32:	f7fc f951 	bl	8000cd8 <__aeabi_uldivmod>
 8004a36:	4603      	mov	r3, r0
 8004a38:	460c      	mov	r4, r1
 8004a3a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x334>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	0f1b      	lsrs	r3, r3, #28
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	613b      	str	r3, [r7, #16]
      break;
 8004a52:	e002      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x338>)
 8004a56:	613b      	str	r3, [r7, #16]
      break;
 8004a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5a:	693b      	ldr	r3, [r7, #16]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a64:	40023800 	.word	0x40023800
 8004a68:	00f42400 	.word	0x00f42400
 8004a6c:	007a1200 	.word	0x007a1200

08004a70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8083 	beq.w	8004b90 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a8a:	4b95      	ldr	r3, [pc, #596]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d019      	beq.n	8004aca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a96:	4b92      	ldr	r3, [pc, #584]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d106      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004aa2:	4b8f      	ldr	r3, [pc, #572]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004aae:	d00c      	beq.n	8004aca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab0:	4b8b      	ldr	r3, [pc, #556]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ab8:	2b0c      	cmp	r3, #12
 8004aba:	d112      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004abc:	4b88      	ldr	r3, [pc, #544]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac8:	d10b      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aca:	4b85      	ldr	r3, [pc, #532]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d05b      	beq.n	8004b8e <HAL_RCC_OscConfig+0x11e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d157      	bne.n	8004b8e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e216      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x8a>
 8004aec:	4b7c      	ldr	r3, [pc, #496]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a7b      	ldr	r2, [pc, #492]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	e01d      	b.n	8004b36 <HAL_RCC_OscConfig+0xc6>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b02:	d10c      	bne.n	8004b1e <HAL_RCC_OscConfig+0xae>
 8004b04:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a75      	ldr	r2, [pc, #468]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b73      	ldr	r3, [pc, #460]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a72      	ldr	r2, [pc, #456]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e00b      	b.n	8004b36 <HAL_RCC_OscConfig+0xc6>
 8004b1e:	4b70      	ldr	r3, [pc, #448]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a6f      	ldr	r2, [pc, #444]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b6d      	ldr	r3, [pc, #436]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a6c      	ldr	r2, [pc, #432]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d013      	beq.n	8004b66 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fe f93f 	bl	8002dc0 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b46:	f7fe f93b 	bl	8002dc0 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b64      	cmp	r3, #100	; 0x64
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e1db      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b58:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0xd6>
 8004b64:	e014      	b.n	8004b90 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b66:	f7fe f92b 	bl	8002dc0 <HAL_GetTick>
 8004b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b6e:	f7fe f927 	bl	8002dc0 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b64      	cmp	r3, #100	; 0x64
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e1c7      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b80:	4b57      	ldr	r3, [pc, #348]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f0      	bne.n	8004b6e <HAL_RCC_OscConfig+0xfe>
 8004b8c:	e000      	b.n	8004b90 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d06f      	beq.n	8004c7c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b9c:	4b50      	ldr	r3, [pc, #320]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d017      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ba8:	4b4d      	ldr	r3, [pc, #308]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d105      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bb4:	4b4a      	ldr	r3, [pc, #296]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00b      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bc0:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d11c      	bne.n	8004c06 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bcc:	4b44      	ldr	r3, [pc, #272]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d116      	bne.n	8004c06 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd8:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x180>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e18f      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4938      	ldr	r1, [pc, #224]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c04:	e03a      	b.n	8004c7c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d020      	beq.n	8004c50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0e:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <HAL_RCC_OscConfig+0x274>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fe f8d4 	bl	8002dc0 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c1c:	f7fe f8d0 	bl	8002dc0 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e170      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2e:	4b2c      	ldr	r3, [pc, #176]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4925      	ldr	r1, [pc, #148]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]
 8004c4e:	e015      	b.n	8004c7c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c50:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <HAL_RCC_OscConfig+0x274>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c56:	f7fe f8b3 	bl	8002dc0 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c5e:	f7fe f8af 	bl	8002dc0 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e14f      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c70:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d037      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c90:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <HAL_RCC_OscConfig+0x278>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fe f893 	bl	8002dc0 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c9e:	f7fe f88f 	bl	8002dc0 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e12f      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_RCC_OscConfig+0x270>)
 8004cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x22e>
 8004cbc:	e01c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <HAL_RCC_OscConfig+0x278>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fe f87c 	bl	8002dc0 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cca:	e00f      	b.n	8004cec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fe f878 	bl	8002dc0 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d908      	bls.n	8004cec <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e118      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	42470000 	.word	0x42470000
 8004ce8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cec:	4b8a      	ldr	r3, [pc, #552]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e9      	bne.n	8004ccc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8097 	beq.w	8004e34 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d06:	2300      	movs	r3, #0
 8004d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d0a:	4b83      	ldr	r3, [pc, #524]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10f      	bne.n	8004d36 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	4b7f      	ldr	r3, [pc, #508]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	4a7e      	ldr	r2, [pc, #504]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d24:	6413      	str	r3, [r2, #64]	; 0x40
 8004d26:	4b7c      	ldr	r3, [pc, #496]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d36:	4b79      	ldr	r3, [pc, #484]	; (8004f1c <HAL_RCC_OscConfig+0x4ac>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d118      	bne.n	8004d74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d42:	4b76      	ldr	r3, [pc, #472]	; (8004f1c <HAL_RCC_OscConfig+0x4ac>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a75      	ldr	r2, [pc, #468]	; (8004f1c <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4e:	f7fe f837 	bl	8002dc0 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d56:	f7fe f833 	bl	8002dc0 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0d3      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d68:	4b6c      	ldr	r3, [pc, #432]	; (8004f1c <HAL_RCC_OscConfig+0x4ac>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f0      	beq.n	8004d56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCC_OscConfig+0x31a>
 8004d7c:	4b66      	ldr	r3, [pc, #408]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	4a65      	ldr	r2, [pc, #404]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	6713      	str	r3, [r2, #112]	; 0x70
 8004d88:	e01c      	b.n	8004dc4 <HAL_RCC_OscConfig+0x354>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	d10c      	bne.n	8004dac <HAL_RCC_OscConfig+0x33c>
 8004d92:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	4a60      	ldr	r2, [pc, #384]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004d98:	f043 0304 	orr.w	r3, r3, #4
 8004d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9e:	4b5e      	ldr	r3, [pc, #376]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a5d      	ldr	r2, [pc, #372]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70
 8004daa:	e00b      	b.n	8004dc4 <HAL_RCC_OscConfig+0x354>
 8004dac:	4b5a      	ldr	r3, [pc, #360]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4a59      	ldr	r2, [pc, #356]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	6713      	str	r3, [r2, #112]	; 0x70
 8004db8:	4b57      	ldr	r3, [pc, #348]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	4a56      	ldr	r2, [pc, #344]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004dbe:	f023 0304 	bic.w	r3, r3, #4
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d015      	beq.n	8004df8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fd fff8 	bl	8002dc0 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd4:	f7fd fff4 	bl	8002dc0 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e092      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dea:	4b4b      	ldr	r3, [pc, #300]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0ee      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x364>
 8004df6:	e014      	b.n	8004e22 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fd ffe2 	bl	8002dc0 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fd ffde 	bl	8002dc0 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e07c      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e16:	4b40      	ldr	r3, [pc, #256]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1ee      	bne.n	8004e00 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d105      	bne.n	8004e34 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e28:	4b3b      	ldr	r3, [pc, #236]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	4a3a      	ldr	r2, [pc, #232]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d068      	beq.n	8004f0e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d060      	beq.n	8004f0a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d145      	bne.n	8004edc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e50:	4b33      	ldr	r3, [pc, #204]	; (8004f20 <HAL_RCC_OscConfig+0x4b0>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fd ffb3 	bl	8002dc0 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5e:	f7fd ffaf 	bl	8002dc0 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e04f      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e70:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f0      	bne.n	8004e5e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	019b      	lsls	r3, r3, #6
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	3b01      	subs	r3, #1
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	061b      	lsls	r3, r3, #24
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	071b      	lsls	r3, r3, #28
 8004ea8:	491b      	ldr	r1, [pc, #108]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eae:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <HAL_RCC_OscConfig+0x4b0>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd ff84 	bl	8002dc0 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fd ff80 	bl	8002dc0 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e020      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ece:	4b12      	ldr	r3, [pc, #72]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x44c>
 8004eda:	e018      	b.n	8004f0e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <HAL_RCC_OscConfig+0x4b0>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fd ff6d 	bl	8002dc0 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eea:	f7fd ff69 	bl	8002dc0 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e009      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_RCC_OscConfig+0x4a8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f0      	bne.n	8004eea <HAL_RCC_OscConfig+0x47a>
 8004f08:	e001      	b.n	8004f0e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40007000 	.word	0x40007000
 8004f20:	42470060 	.word	0x42470060

08004f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e03f      	b.n	8004fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fd fdf0 	bl	8002b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2224      	movs	r2, #36	; 0x24
 8004f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f90b 	bl	8005184 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691a      	ldr	r2, [r3, #16]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695a      	ldr	r2, [r3, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b088      	sub	sp, #32
 8004fc2:	af02      	add	r7, sp, #8
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	f040 8083 	bne.w	80050e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_UART_Transmit+0x2e>
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e07b      	b.n	80050e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_UART_Transmit+0x40>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e074      	b.n	80050e8 <HAL_UART_Transmit+0x12a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2221      	movs	r2, #33	; 0x21
 8005010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005014:	f7fd fed4 	bl	8002dc0 <HAL_GetTick>
 8005018:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	88fa      	ldrh	r2, [r7, #6]
 800501e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800502e:	e042      	b.n	80050b6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005046:	d122      	bne.n	800508e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2200      	movs	r2, #0
 8005050:	2180      	movs	r1, #128	; 0x80
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f84c 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e042      	b.n	80050e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005074:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	3302      	adds	r3, #2
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	e017      	b.n	80050b6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	3301      	adds	r3, #1
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	e013      	b.n	80050b6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2200      	movs	r2, #0
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f829 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e01f      	b.n	80050e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	60ba      	str	r2, [r7, #8]
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1b7      	bne.n	8005030 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	2200      	movs	r2, #0
 80050c8:	2140      	movs	r1, #64	; 0x40
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f810 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e006      	b.n	80050e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e000      	b.n	80050e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
  }
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005100:	e02c      	b.n	800515c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005108:	d028      	beq.n	800515c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <UART_WaitOnFlagUntilTimeout+0x30>
 8005110:	f7fd fe56 	bl	8002dc0 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	429a      	cmp	r2, r3
 800511e:	d21d      	bcs.n	800515c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800512e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e00f      	b.n	800517c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	429a      	cmp	r2, r3
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	429a      	cmp	r2, r3
 8005178:	d0c3      	beq.n	8005102 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80051c6:	f023 030c 	bic.w	r3, r3, #12
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f2:	f040 818b 	bne.w	800550c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4ac1      	ldr	r2, [pc, #772]	; (8005500 <UART_SetConfig+0x37c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d005      	beq.n	800520c <UART_SetConfig+0x88>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4abf      	ldr	r2, [pc, #764]	; (8005504 <UART_SetConfig+0x380>)
 8005206:	4293      	cmp	r3, r2
 8005208:	f040 80bd 	bne.w	8005386 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7ff fa7c 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8005210:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	461d      	mov	r5, r3
 8005216:	f04f 0600 	mov.w	r6, #0
 800521a:	46a8      	mov	r8, r5
 800521c:	46b1      	mov	r9, r6
 800521e:	eb18 0308 	adds.w	r3, r8, r8
 8005222:	eb49 0409 	adc.w	r4, r9, r9
 8005226:	4698      	mov	r8, r3
 8005228:	46a1      	mov	r9, r4
 800522a:	eb18 0805 	adds.w	r8, r8, r5
 800522e:	eb49 0906 	adc.w	r9, r9, r6
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800523e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005242:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005246:	4688      	mov	r8, r1
 8005248:	4691      	mov	r9, r2
 800524a:	eb18 0005 	adds.w	r0, r8, r5
 800524e:	eb49 0106 	adc.w	r1, r9, r6
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	461d      	mov	r5, r3
 8005258:	f04f 0600 	mov.w	r6, #0
 800525c:	196b      	adds	r3, r5, r5
 800525e:	eb46 0406 	adc.w	r4, r6, r6
 8005262:	461a      	mov	r2, r3
 8005264:	4623      	mov	r3, r4
 8005266:	f7fb fd37 	bl	8000cd8 <__aeabi_uldivmod>
 800526a:	4603      	mov	r3, r0
 800526c:	460c      	mov	r4, r1
 800526e:	461a      	mov	r2, r3
 8005270:	4ba5      	ldr	r3, [pc, #660]	; (8005508 <UART_SetConfig+0x384>)
 8005272:	fba3 2302 	umull	r2, r3, r3, r2
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	461d      	mov	r5, r3
 8005280:	f04f 0600 	mov.w	r6, #0
 8005284:	46a9      	mov	r9, r5
 8005286:	46b2      	mov	sl, r6
 8005288:	eb19 0309 	adds.w	r3, r9, r9
 800528c:	eb4a 040a 	adc.w	r4, sl, sl
 8005290:	4699      	mov	r9, r3
 8005292:	46a2      	mov	sl, r4
 8005294:	eb19 0905 	adds.w	r9, r9, r5
 8005298:	eb4a 0a06 	adc.w	sl, sl, r6
 800529c:	f04f 0100 	mov.w	r1, #0
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052b0:	4689      	mov	r9, r1
 80052b2:	4692      	mov	sl, r2
 80052b4:	eb19 0005 	adds.w	r0, r9, r5
 80052b8:	eb4a 0106 	adc.w	r1, sl, r6
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	461d      	mov	r5, r3
 80052c2:	f04f 0600 	mov.w	r6, #0
 80052c6:	196b      	adds	r3, r5, r5
 80052c8:	eb46 0406 	adc.w	r4, r6, r6
 80052cc:	461a      	mov	r2, r3
 80052ce:	4623      	mov	r3, r4
 80052d0:	f7fb fd02 	bl	8000cd8 <__aeabi_uldivmod>
 80052d4:	4603      	mov	r3, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	461a      	mov	r2, r3
 80052da:	4b8b      	ldr	r3, [pc, #556]	; (8005508 <UART_SetConfig+0x384>)
 80052dc:	fba3 1302 	umull	r1, r3, r3, r2
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	2164      	movs	r1, #100	; 0x64
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	3332      	adds	r3, #50	; 0x32
 80052ee:	4a86      	ldr	r2, [pc, #536]	; (8005508 <UART_SetConfig+0x384>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052fc:	4498      	add	r8, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	461d      	mov	r5, r3
 8005302:	f04f 0600 	mov.w	r6, #0
 8005306:	46a9      	mov	r9, r5
 8005308:	46b2      	mov	sl, r6
 800530a:	eb19 0309 	adds.w	r3, r9, r9
 800530e:	eb4a 040a 	adc.w	r4, sl, sl
 8005312:	4699      	mov	r9, r3
 8005314:	46a2      	mov	sl, r4
 8005316:	eb19 0905 	adds.w	r9, r9, r5
 800531a:	eb4a 0a06 	adc.w	sl, sl, r6
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800532a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800532e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005332:	4689      	mov	r9, r1
 8005334:	4692      	mov	sl, r2
 8005336:	eb19 0005 	adds.w	r0, r9, r5
 800533a:	eb4a 0106 	adc.w	r1, sl, r6
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	461d      	mov	r5, r3
 8005344:	f04f 0600 	mov.w	r6, #0
 8005348:	196b      	adds	r3, r5, r5
 800534a:	eb46 0406 	adc.w	r4, r6, r6
 800534e:	461a      	mov	r2, r3
 8005350:	4623      	mov	r3, r4
 8005352:	f7fb fcc1 	bl	8000cd8 <__aeabi_uldivmod>
 8005356:	4603      	mov	r3, r0
 8005358:	460c      	mov	r4, r1
 800535a:	461a      	mov	r2, r3
 800535c:	4b6a      	ldr	r3, [pc, #424]	; (8005508 <UART_SetConfig+0x384>)
 800535e:	fba3 1302 	umull	r1, r3, r3, r2
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2164      	movs	r1, #100	; 0x64
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	3332      	adds	r3, #50	; 0x32
 8005370:	4a65      	ldr	r2, [pc, #404]	; (8005508 <UART_SetConfig+0x384>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	f003 0207 	and.w	r2, r3, #7
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4442      	add	r2, r8
 8005382:	609a      	str	r2, [r3, #8]
 8005384:	e26f      	b.n	8005866 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005386:	f7ff f9ab 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 800538a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	461d      	mov	r5, r3
 8005390:	f04f 0600 	mov.w	r6, #0
 8005394:	46a8      	mov	r8, r5
 8005396:	46b1      	mov	r9, r6
 8005398:	eb18 0308 	adds.w	r3, r8, r8
 800539c:	eb49 0409 	adc.w	r4, r9, r9
 80053a0:	4698      	mov	r8, r3
 80053a2:	46a1      	mov	r9, r4
 80053a4:	eb18 0805 	adds.w	r8, r8, r5
 80053a8:	eb49 0906 	adc.w	r9, r9, r6
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053c0:	4688      	mov	r8, r1
 80053c2:	4691      	mov	r9, r2
 80053c4:	eb18 0005 	adds.w	r0, r8, r5
 80053c8:	eb49 0106 	adc.w	r1, r9, r6
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	461d      	mov	r5, r3
 80053d2:	f04f 0600 	mov.w	r6, #0
 80053d6:	196b      	adds	r3, r5, r5
 80053d8:	eb46 0406 	adc.w	r4, r6, r6
 80053dc:	461a      	mov	r2, r3
 80053de:	4623      	mov	r3, r4
 80053e0:	f7fb fc7a 	bl	8000cd8 <__aeabi_uldivmod>
 80053e4:	4603      	mov	r3, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <UART_SetConfig+0x384>)
 80053ec:	fba3 2302 	umull	r2, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	461d      	mov	r5, r3
 80053fa:	f04f 0600 	mov.w	r6, #0
 80053fe:	46a9      	mov	r9, r5
 8005400:	46b2      	mov	sl, r6
 8005402:	eb19 0309 	adds.w	r3, r9, r9
 8005406:	eb4a 040a 	adc.w	r4, sl, sl
 800540a:	4699      	mov	r9, r3
 800540c:	46a2      	mov	sl, r4
 800540e:	eb19 0905 	adds.w	r9, r9, r5
 8005412:	eb4a 0a06 	adc.w	sl, sl, r6
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005422:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005426:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800542a:	4689      	mov	r9, r1
 800542c:	4692      	mov	sl, r2
 800542e:	eb19 0005 	adds.w	r0, r9, r5
 8005432:	eb4a 0106 	adc.w	r1, sl, r6
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	461d      	mov	r5, r3
 800543c:	f04f 0600 	mov.w	r6, #0
 8005440:	196b      	adds	r3, r5, r5
 8005442:	eb46 0406 	adc.w	r4, r6, r6
 8005446:	461a      	mov	r2, r3
 8005448:	4623      	mov	r3, r4
 800544a:	f7fb fc45 	bl	8000cd8 <__aeabi_uldivmod>
 800544e:	4603      	mov	r3, r0
 8005450:	460c      	mov	r4, r1
 8005452:	461a      	mov	r2, r3
 8005454:	4b2c      	ldr	r3, [pc, #176]	; (8005508 <UART_SetConfig+0x384>)
 8005456:	fba3 1302 	umull	r1, r3, r3, r2
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	2164      	movs	r1, #100	; 0x64
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	3332      	adds	r3, #50	; 0x32
 8005468:	4a27      	ldr	r2, [pc, #156]	; (8005508 <UART_SetConfig+0x384>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005476:	4498      	add	r8, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	461d      	mov	r5, r3
 800547c:	f04f 0600 	mov.w	r6, #0
 8005480:	46a9      	mov	r9, r5
 8005482:	46b2      	mov	sl, r6
 8005484:	eb19 0309 	adds.w	r3, r9, r9
 8005488:	eb4a 040a 	adc.w	r4, sl, sl
 800548c:	4699      	mov	r9, r3
 800548e:	46a2      	mov	sl, r4
 8005490:	eb19 0905 	adds.w	r9, r9, r5
 8005494:	eb4a 0a06 	adc.w	sl, sl, r6
 8005498:	f04f 0100 	mov.w	r1, #0
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054ac:	4689      	mov	r9, r1
 80054ae:	4692      	mov	sl, r2
 80054b0:	eb19 0005 	adds.w	r0, r9, r5
 80054b4:	eb4a 0106 	adc.w	r1, sl, r6
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	461d      	mov	r5, r3
 80054be:	f04f 0600 	mov.w	r6, #0
 80054c2:	196b      	adds	r3, r5, r5
 80054c4:	eb46 0406 	adc.w	r4, r6, r6
 80054c8:	461a      	mov	r2, r3
 80054ca:	4623      	mov	r3, r4
 80054cc:	f7fb fc04 	bl	8000cd8 <__aeabi_uldivmod>
 80054d0:	4603      	mov	r3, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	461a      	mov	r2, r3
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <UART_SetConfig+0x384>)
 80054d8:	fba3 1302 	umull	r1, r3, r3, r2
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	2164      	movs	r1, #100	; 0x64
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	3332      	adds	r3, #50	; 0x32
 80054ea:	4a07      	ldr	r2, [pc, #28]	; (8005508 <UART_SetConfig+0x384>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	f003 0207 	and.w	r2, r3, #7
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4442      	add	r2, r8
 80054fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80054fe:	e1b2      	b.n	8005866 <UART_SetConfig+0x6e2>
 8005500:	40011000 	.word	0x40011000
 8005504:	40011400 	.word	0x40011400
 8005508:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4ad7      	ldr	r2, [pc, #860]	; (8005870 <UART_SetConfig+0x6ec>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d005      	beq.n	8005522 <UART_SetConfig+0x39e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4ad6      	ldr	r2, [pc, #856]	; (8005874 <UART_SetConfig+0x6f0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	f040 80d1 	bne.w	80056c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005522:	f7ff f8f1 	bl	8004708 <HAL_RCC_GetPCLK2Freq>
 8005526:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	469a      	mov	sl, r3
 800552c:	f04f 0b00 	mov.w	fp, #0
 8005530:	46d0      	mov	r8, sl
 8005532:	46d9      	mov	r9, fp
 8005534:	eb18 0308 	adds.w	r3, r8, r8
 8005538:	eb49 0409 	adc.w	r4, r9, r9
 800553c:	4698      	mov	r8, r3
 800553e:	46a1      	mov	r9, r4
 8005540:	eb18 080a 	adds.w	r8, r8, sl
 8005544:	eb49 090b 	adc.w	r9, r9, fp
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005554:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005558:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800555c:	4688      	mov	r8, r1
 800555e:	4691      	mov	r9, r2
 8005560:	eb1a 0508 	adds.w	r5, sl, r8
 8005564:	eb4b 0609 	adc.w	r6, fp, r9
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4619      	mov	r1, r3
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	f04f 0400 	mov.w	r4, #0
 800557a:	0094      	lsls	r4, r2, #2
 800557c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005580:	008b      	lsls	r3, r1, #2
 8005582:	461a      	mov	r2, r3
 8005584:	4623      	mov	r3, r4
 8005586:	4628      	mov	r0, r5
 8005588:	4631      	mov	r1, r6
 800558a:	f7fb fba5 	bl	8000cd8 <__aeabi_uldivmod>
 800558e:	4603      	mov	r3, r0
 8005590:	460c      	mov	r4, r1
 8005592:	461a      	mov	r2, r3
 8005594:	4bb8      	ldr	r3, [pc, #736]	; (8005878 <UART_SetConfig+0x6f4>)
 8005596:	fba3 2302 	umull	r2, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	469b      	mov	fp, r3
 80055a4:	f04f 0c00 	mov.w	ip, #0
 80055a8:	46d9      	mov	r9, fp
 80055aa:	46e2      	mov	sl, ip
 80055ac:	eb19 0309 	adds.w	r3, r9, r9
 80055b0:	eb4a 040a 	adc.w	r4, sl, sl
 80055b4:	4699      	mov	r9, r3
 80055b6:	46a2      	mov	sl, r4
 80055b8:	eb19 090b 	adds.w	r9, r9, fp
 80055bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055c0:	f04f 0100 	mov.w	r1, #0
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055d4:	4689      	mov	r9, r1
 80055d6:	4692      	mov	sl, r2
 80055d8:	eb1b 0509 	adds.w	r5, fp, r9
 80055dc:	eb4c 060a 	adc.w	r6, ip, sl
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4619      	mov	r1, r3
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	f04f 0400 	mov.w	r4, #0
 80055f2:	0094      	lsls	r4, r2, #2
 80055f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055f8:	008b      	lsls	r3, r1, #2
 80055fa:	461a      	mov	r2, r3
 80055fc:	4623      	mov	r3, r4
 80055fe:	4628      	mov	r0, r5
 8005600:	4631      	mov	r1, r6
 8005602:	f7fb fb69 	bl	8000cd8 <__aeabi_uldivmod>
 8005606:	4603      	mov	r3, r0
 8005608:	460c      	mov	r4, r1
 800560a:	461a      	mov	r2, r3
 800560c:	4b9a      	ldr	r3, [pc, #616]	; (8005878 <UART_SetConfig+0x6f4>)
 800560e:	fba3 1302 	umull	r1, r3, r3, r2
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2164      	movs	r1, #100	; 0x64
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	3332      	adds	r3, #50	; 0x32
 8005620:	4a95      	ldr	r2, [pc, #596]	; (8005878 <UART_SetConfig+0x6f4>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800562c:	4498      	add	r8, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	469b      	mov	fp, r3
 8005632:	f04f 0c00 	mov.w	ip, #0
 8005636:	46d9      	mov	r9, fp
 8005638:	46e2      	mov	sl, ip
 800563a:	eb19 0309 	adds.w	r3, r9, r9
 800563e:	eb4a 040a 	adc.w	r4, sl, sl
 8005642:	4699      	mov	r9, r3
 8005644:	46a2      	mov	sl, r4
 8005646:	eb19 090b 	adds.w	r9, r9, fp
 800564a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800564e:	f04f 0100 	mov.w	r1, #0
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800565a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800565e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005662:	4689      	mov	r9, r1
 8005664:	4692      	mov	sl, r2
 8005666:	eb1b 0509 	adds.w	r5, fp, r9
 800566a:	eb4c 060a 	adc.w	r6, ip, sl
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	4619      	mov	r1, r3
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	f04f 0400 	mov.w	r4, #0
 8005680:	0094      	lsls	r4, r2, #2
 8005682:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005686:	008b      	lsls	r3, r1, #2
 8005688:	461a      	mov	r2, r3
 800568a:	4623      	mov	r3, r4
 800568c:	4628      	mov	r0, r5
 800568e:	4631      	mov	r1, r6
 8005690:	f7fb fb22 	bl	8000cd8 <__aeabi_uldivmod>
 8005694:	4603      	mov	r3, r0
 8005696:	460c      	mov	r4, r1
 8005698:	461a      	mov	r2, r3
 800569a:	4b77      	ldr	r3, [pc, #476]	; (8005878 <UART_SetConfig+0x6f4>)
 800569c:	fba3 1302 	umull	r1, r3, r3, r2
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	2164      	movs	r1, #100	; 0x64
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	3332      	adds	r3, #50	; 0x32
 80056ae:	4a72      	ldr	r2, [pc, #456]	; (8005878 <UART_SetConfig+0x6f4>)
 80056b0:	fba2 2303 	umull	r2, r3, r2, r3
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	f003 020f 	and.w	r2, r3, #15
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4442      	add	r2, r8
 80056c0:	609a      	str	r2, [r3, #8]
 80056c2:	e0d0      	b.n	8005866 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80056c4:	f7ff f80c 	bl	80046e0 <HAL_RCC_GetPCLK1Freq>
 80056c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	469a      	mov	sl, r3
 80056ce:	f04f 0b00 	mov.w	fp, #0
 80056d2:	46d0      	mov	r8, sl
 80056d4:	46d9      	mov	r9, fp
 80056d6:	eb18 0308 	adds.w	r3, r8, r8
 80056da:	eb49 0409 	adc.w	r4, r9, r9
 80056de:	4698      	mov	r8, r3
 80056e0:	46a1      	mov	r9, r4
 80056e2:	eb18 080a 	adds.w	r8, r8, sl
 80056e6:	eb49 090b 	adc.w	r9, r9, fp
 80056ea:	f04f 0100 	mov.w	r1, #0
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056fe:	4688      	mov	r8, r1
 8005700:	4691      	mov	r9, r2
 8005702:	eb1a 0508 	adds.w	r5, sl, r8
 8005706:	eb4b 0609 	adc.w	r6, fp, r9
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4619      	mov	r1, r3
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	f04f 0400 	mov.w	r4, #0
 800571c:	0094      	lsls	r4, r2, #2
 800571e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005722:	008b      	lsls	r3, r1, #2
 8005724:	461a      	mov	r2, r3
 8005726:	4623      	mov	r3, r4
 8005728:	4628      	mov	r0, r5
 800572a:	4631      	mov	r1, r6
 800572c:	f7fb fad4 	bl	8000cd8 <__aeabi_uldivmod>
 8005730:	4603      	mov	r3, r0
 8005732:	460c      	mov	r4, r1
 8005734:	461a      	mov	r2, r3
 8005736:	4b50      	ldr	r3, [pc, #320]	; (8005878 <UART_SetConfig+0x6f4>)
 8005738:	fba3 2302 	umull	r2, r3, r3, r2
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	469b      	mov	fp, r3
 8005746:	f04f 0c00 	mov.w	ip, #0
 800574a:	46d9      	mov	r9, fp
 800574c:	46e2      	mov	sl, ip
 800574e:	eb19 0309 	adds.w	r3, r9, r9
 8005752:	eb4a 040a 	adc.w	r4, sl, sl
 8005756:	4699      	mov	r9, r3
 8005758:	46a2      	mov	sl, r4
 800575a:	eb19 090b 	adds.w	r9, r9, fp
 800575e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005762:	f04f 0100 	mov.w	r1, #0
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800576e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005772:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005776:	4689      	mov	r9, r1
 8005778:	4692      	mov	sl, r2
 800577a:	eb1b 0509 	adds.w	r5, fp, r9
 800577e:	eb4c 060a 	adc.w	r6, ip, sl
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	4619      	mov	r1, r3
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	f04f 0400 	mov.w	r4, #0
 8005794:	0094      	lsls	r4, r2, #2
 8005796:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800579a:	008b      	lsls	r3, r1, #2
 800579c:	461a      	mov	r2, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	4628      	mov	r0, r5
 80057a2:	4631      	mov	r1, r6
 80057a4:	f7fb fa98 	bl	8000cd8 <__aeabi_uldivmod>
 80057a8:	4603      	mov	r3, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	461a      	mov	r2, r3
 80057ae:	4b32      	ldr	r3, [pc, #200]	; (8005878 <UART_SetConfig+0x6f4>)
 80057b0:	fba3 1302 	umull	r1, r3, r3, r2
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	2164      	movs	r1, #100	; 0x64
 80057b8:	fb01 f303 	mul.w	r3, r1, r3
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	3332      	adds	r3, #50	; 0x32
 80057c2:	4a2d      	ldr	r2, [pc, #180]	; (8005878 <UART_SetConfig+0x6f4>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	095b      	lsrs	r3, r3, #5
 80057ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ce:	4498      	add	r8, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	469b      	mov	fp, r3
 80057d4:	f04f 0c00 	mov.w	ip, #0
 80057d8:	46d9      	mov	r9, fp
 80057da:	46e2      	mov	sl, ip
 80057dc:	eb19 0309 	adds.w	r3, r9, r9
 80057e0:	eb4a 040a 	adc.w	r4, sl, sl
 80057e4:	4699      	mov	r9, r3
 80057e6:	46a2      	mov	sl, r4
 80057e8:	eb19 090b 	adds.w	r9, r9, fp
 80057ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005800:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005804:	4689      	mov	r9, r1
 8005806:	4692      	mov	sl, r2
 8005808:	eb1b 0509 	adds.w	r5, fp, r9
 800580c:	eb4c 060a 	adc.w	r6, ip, sl
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	4619      	mov	r1, r3
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	f04f 0400 	mov.w	r4, #0
 8005822:	0094      	lsls	r4, r2, #2
 8005824:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005828:	008b      	lsls	r3, r1, #2
 800582a:	461a      	mov	r2, r3
 800582c:	4623      	mov	r3, r4
 800582e:	4628      	mov	r0, r5
 8005830:	4631      	mov	r1, r6
 8005832:	f7fb fa51 	bl	8000cd8 <__aeabi_uldivmod>
 8005836:	4603      	mov	r3, r0
 8005838:	460c      	mov	r4, r1
 800583a:	461a      	mov	r2, r3
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <UART_SetConfig+0x6f4>)
 800583e:	fba3 1302 	umull	r1, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	2164      	movs	r1, #100	; 0x64
 8005846:	fb01 f303 	mul.w	r3, r1, r3
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	3332      	adds	r3, #50	; 0x32
 8005850:	4a09      	ldr	r2, [pc, #36]	; (8005878 <UART_SetConfig+0x6f4>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	f003 020f 	and.w	r2, r3, #15
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4442      	add	r2, r8
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	e7ff      	b.n	8005866 <UART_SetConfig+0x6e2>
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005870:	40011000 	.word	0x40011000
 8005874:	40011400 	.word	0x40011400
 8005878:	51eb851f 	.word	0x51eb851f

0800587c <__errno>:
 800587c:	4b01      	ldr	r3, [pc, #4]	; (8005884 <__errno+0x8>)
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000014 	.word	0x20000014

08005888 <__libc_init_array>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	4e0d      	ldr	r6, [pc, #52]	; (80058c0 <__libc_init_array+0x38>)
 800588c:	4c0d      	ldr	r4, [pc, #52]	; (80058c4 <__libc_init_array+0x3c>)
 800588e:	1ba4      	subs	r4, r4, r6
 8005890:	10a4      	asrs	r4, r4, #2
 8005892:	2500      	movs	r5, #0
 8005894:	42a5      	cmp	r5, r4
 8005896:	d109      	bne.n	80058ac <__libc_init_array+0x24>
 8005898:	4e0b      	ldr	r6, [pc, #44]	; (80058c8 <__libc_init_array+0x40>)
 800589a:	4c0c      	ldr	r4, [pc, #48]	; (80058cc <__libc_init_array+0x44>)
 800589c:	f001 fc7e 	bl	800719c <_init>
 80058a0:	1ba4      	subs	r4, r4, r6
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	2500      	movs	r5, #0
 80058a6:	42a5      	cmp	r5, r4
 80058a8:	d105      	bne.n	80058b6 <__libc_init_array+0x2e>
 80058aa:	bd70      	pop	{r4, r5, r6, pc}
 80058ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058b0:	4798      	blx	r3
 80058b2:	3501      	adds	r5, #1
 80058b4:	e7ee      	b.n	8005894 <__libc_init_array+0xc>
 80058b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058ba:	4798      	blx	r3
 80058bc:	3501      	adds	r5, #1
 80058be:	e7f2      	b.n	80058a6 <__libc_init_array+0x1e>
 80058c0:	08007be8 	.word	0x08007be8
 80058c4:	08007be8 	.word	0x08007be8
 80058c8:	08007be8 	.word	0x08007be8
 80058cc:	08007bec 	.word	0x08007bec

080058d0 <memset>:
 80058d0:	4402      	add	r2, r0
 80058d2:	4603      	mov	r3, r0
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d100      	bne.n	80058da <memset+0xa>
 80058d8:	4770      	bx	lr
 80058da:	f803 1b01 	strb.w	r1, [r3], #1
 80058de:	e7f9      	b.n	80058d4 <memset+0x4>

080058e0 <siprintf>:
 80058e0:	b40e      	push	{r1, r2, r3}
 80058e2:	b500      	push	{lr}
 80058e4:	b09c      	sub	sp, #112	; 0x70
 80058e6:	ab1d      	add	r3, sp, #116	; 0x74
 80058e8:	9002      	str	r0, [sp, #8]
 80058ea:	9006      	str	r0, [sp, #24]
 80058ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058f0:	4809      	ldr	r0, [pc, #36]	; (8005918 <siprintf+0x38>)
 80058f2:	9107      	str	r1, [sp, #28]
 80058f4:	9104      	str	r1, [sp, #16]
 80058f6:	4909      	ldr	r1, [pc, #36]	; (800591c <siprintf+0x3c>)
 80058f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fc:	9105      	str	r1, [sp, #20]
 80058fe:	6800      	ldr	r0, [r0, #0]
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	a902      	add	r1, sp, #8
 8005904:	f000 f866 	bl	80059d4 <_svfiprintf_r>
 8005908:	9b02      	ldr	r3, [sp, #8]
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	b01c      	add	sp, #112	; 0x70
 8005910:	f85d eb04 	ldr.w	lr, [sp], #4
 8005914:	b003      	add	sp, #12
 8005916:	4770      	bx	lr
 8005918:	20000014 	.word	0x20000014
 800591c:	ffff0208 	.word	0xffff0208

08005920 <__ssputs_r>:
 8005920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	688e      	ldr	r6, [r1, #8]
 8005926:	429e      	cmp	r6, r3
 8005928:	4682      	mov	sl, r0
 800592a:	460c      	mov	r4, r1
 800592c:	4690      	mov	r8, r2
 800592e:	4699      	mov	r9, r3
 8005930:	d837      	bhi.n	80059a2 <__ssputs_r+0x82>
 8005932:	898a      	ldrh	r2, [r1, #12]
 8005934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005938:	d031      	beq.n	800599e <__ssputs_r+0x7e>
 800593a:	6825      	ldr	r5, [r4, #0]
 800593c:	6909      	ldr	r1, [r1, #16]
 800593e:	1a6f      	subs	r7, r5, r1
 8005940:	6965      	ldr	r5, [r4, #20]
 8005942:	2302      	movs	r3, #2
 8005944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005948:	fb95 f5f3 	sdiv	r5, r5, r3
 800594c:	f109 0301 	add.w	r3, r9, #1
 8005950:	443b      	add	r3, r7
 8005952:	429d      	cmp	r5, r3
 8005954:	bf38      	it	cc
 8005956:	461d      	movcc	r5, r3
 8005958:	0553      	lsls	r3, r2, #21
 800595a:	d530      	bpl.n	80059be <__ssputs_r+0x9e>
 800595c:	4629      	mov	r1, r5
 800595e:	f000 fb2b 	bl	8005fb8 <_malloc_r>
 8005962:	4606      	mov	r6, r0
 8005964:	b950      	cbnz	r0, 800597c <__ssputs_r+0x5c>
 8005966:	230c      	movs	r3, #12
 8005968:	f8ca 3000 	str.w	r3, [sl]
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005972:	81a3      	strh	r3, [r4, #12]
 8005974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597c:	463a      	mov	r2, r7
 800597e:	6921      	ldr	r1, [r4, #16]
 8005980:	f000 faa8 	bl	8005ed4 <memcpy>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800598a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	6126      	str	r6, [r4, #16]
 8005992:	6165      	str	r5, [r4, #20]
 8005994:	443e      	add	r6, r7
 8005996:	1bed      	subs	r5, r5, r7
 8005998:	6026      	str	r6, [r4, #0]
 800599a:	60a5      	str	r5, [r4, #8]
 800599c:	464e      	mov	r6, r9
 800599e:	454e      	cmp	r6, r9
 80059a0:	d900      	bls.n	80059a4 <__ssputs_r+0x84>
 80059a2:	464e      	mov	r6, r9
 80059a4:	4632      	mov	r2, r6
 80059a6:	4641      	mov	r1, r8
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	f000 fa9e 	bl	8005eea <memmove>
 80059ae:	68a3      	ldr	r3, [r4, #8]
 80059b0:	1b9b      	subs	r3, r3, r6
 80059b2:	60a3      	str	r3, [r4, #8]
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	441e      	add	r6, r3
 80059b8:	6026      	str	r6, [r4, #0]
 80059ba:	2000      	movs	r0, #0
 80059bc:	e7dc      	b.n	8005978 <__ssputs_r+0x58>
 80059be:	462a      	mov	r2, r5
 80059c0:	f000 fb54 	bl	800606c <_realloc_r>
 80059c4:	4606      	mov	r6, r0
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d1e2      	bne.n	8005990 <__ssputs_r+0x70>
 80059ca:	6921      	ldr	r1, [r4, #16]
 80059cc:	4650      	mov	r0, sl
 80059ce:	f000 faa5 	bl	8005f1c <_free_r>
 80059d2:	e7c8      	b.n	8005966 <__ssputs_r+0x46>

080059d4 <_svfiprintf_r>:
 80059d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d8:	461d      	mov	r5, r3
 80059da:	898b      	ldrh	r3, [r1, #12]
 80059dc:	061f      	lsls	r7, r3, #24
 80059de:	b09d      	sub	sp, #116	; 0x74
 80059e0:	4680      	mov	r8, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	4616      	mov	r6, r2
 80059e6:	d50f      	bpl.n	8005a08 <_svfiprintf_r+0x34>
 80059e8:	690b      	ldr	r3, [r1, #16]
 80059ea:	b96b      	cbnz	r3, 8005a08 <_svfiprintf_r+0x34>
 80059ec:	2140      	movs	r1, #64	; 0x40
 80059ee:	f000 fae3 	bl	8005fb8 <_malloc_r>
 80059f2:	6020      	str	r0, [r4, #0]
 80059f4:	6120      	str	r0, [r4, #16]
 80059f6:	b928      	cbnz	r0, 8005a04 <_svfiprintf_r+0x30>
 80059f8:	230c      	movs	r3, #12
 80059fa:	f8c8 3000 	str.w	r3, [r8]
 80059fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a02:	e0c8      	b.n	8005b96 <_svfiprintf_r+0x1c2>
 8005a04:	2340      	movs	r3, #64	; 0x40
 8005a06:	6163      	str	r3, [r4, #20]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a12:	2330      	movs	r3, #48	; 0x30
 8005a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a18:	9503      	str	r5, [sp, #12]
 8005a1a:	f04f 0b01 	mov.w	fp, #1
 8005a1e:	4637      	mov	r7, r6
 8005a20:	463d      	mov	r5, r7
 8005a22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a26:	b10b      	cbz	r3, 8005a2c <_svfiprintf_r+0x58>
 8005a28:	2b25      	cmp	r3, #37	; 0x25
 8005a2a:	d13e      	bne.n	8005aaa <_svfiprintf_r+0xd6>
 8005a2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a30:	d00b      	beq.n	8005a4a <_svfiprintf_r+0x76>
 8005a32:	4653      	mov	r3, sl
 8005a34:	4632      	mov	r2, r6
 8005a36:	4621      	mov	r1, r4
 8005a38:	4640      	mov	r0, r8
 8005a3a:	f7ff ff71 	bl	8005920 <__ssputs_r>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f000 80a4 	beq.w	8005b8c <_svfiprintf_r+0x1b8>
 8005a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a46:	4453      	add	r3, sl
 8005a48:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4a:	783b      	ldrb	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 809d 	beq.w	8005b8c <_svfiprintf_r+0x1b8>
 8005a52:	2300      	movs	r3, #0
 8005a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a5c:	9304      	str	r3, [sp, #16]
 8005a5e:	9307      	str	r3, [sp, #28]
 8005a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a64:	931a      	str	r3, [sp, #104]	; 0x68
 8005a66:	462f      	mov	r7, r5
 8005a68:	2205      	movs	r2, #5
 8005a6a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a6e:	4850      	ldr	r0, [pc, #320]	; (8005bb0 <_svfiprintf_r+0x1dc>)
 8005a70:	f7fa fbd6 	bl	8000220 <memchr>
 8005a74:	9b04      	ldr	r3, [sp, #16]
 8005a76:	b9d0      	cbnz	r0, 8005aae <_svfiprintf_r+0xda>
 8005a78:	06d9      	lsls	r1, r3, #27
 8005a7a:	bf44      	itt	mi
 8005a7c:	2220      	movmi	r2, #32
 8005a7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a82:	071a      	lsls	r2, r3, #28
 8005a84:	bf44      	itt	mi
 8005a86:	222b      	movmi	r2, #43	; 0x2b
 8005a88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a8c:	782a      	ldrb	r2, [r5, #0]
 8005a8e:	2a2a      	cmp	r2, #42	; 0x2a
 8005a90:	d015      	beq.n	8005abe <_svfiprintf_r+0xea>
 8005a92:	9a07      	ldr	r2, [sp, #28]
 8005a94:	462f      	mov	r7, r5
 8005a96:	2000      	movs	r0, #0
 8005a98:	250a      	movs	r5, #10
 8005a9a:	4639      	mov	r1, r7
 8005a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aa0:	3b30      	subs	r3, #48	; 0x30
 8005aa2:	2b09      	cmp	r3, #9
 8005aa4:	d94d      	bls.n	8005b42 <_svfiprintf_r+0x16e>
 8005aa6:	b1b8      	cbz	r0, 8005ad8 <_svfiprintf_r+0x104>
 8005aa8:	e00f      	b.n	8005aca <_svfiprintf_r+0xf6>
 8005aaa:	462f      	mov	r7, r5
 8005aac:	e7b8      	b.n	8005a20 <_svfiprintf_r+0x4c>
 8005aae:	4a40      	ldr	r2, [pc, #256]	; (8005bb0 <_svfiprintf_r+0x1dc>)
 8005ab0:	1a80      	subs	r0, r0, r2
 8005ab2:	fa0b f000 	lsl.w	r0, fp, r0
 8005ab6:	4318      	orrs	r0, r3
 8005ab8:	9004      	str	r0, [sp, #16]
 8005aba:	463d      	mov	r5, r7
 8005abc:	e7d3      	b.n	8005a66 <_svfiprintf_r+0x92>
 8005abe:	9a03      	ldr	r2, [sp, #12]
 8005ac0:	1d11      	adds	r1, r2, #4
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	9103      	str	r1, [sp, #12]
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	db01      	blt.n	8005ace <_svfiprintf_r+0xfa>
 8005aca:	9207      	str	r2, [sp, #28]
 8005acc:	e004      	b.n	8005ad8 <_svfiprintf_r+0x104>
 8005ace:	4252      	negs	r2, r2
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	9207      	str	r2, [sp, #28]
 8005ad6:	9304      	str	r3, [sp, #16]
 8005ad8:	783b      	ldrb	r3, [r7, #0]
 8005ada:	2b2e      	cmp	r3, #46	; 0x2e
 8005adc:	d10c      	bne.n	8005af8 <_svfiprintf_r+0x124>
 8005ade:	787b      	ldrb	r3, [r7, #1]
 8005ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ae2:	d133      	bne.n	8005b4c <_svfiprintf_r+0x178>
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	1d1a      	adds	r2, r3, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	9203      	str	r2, [sp, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bfb8      	it	lt
 8005af0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005af4:	3702      	adds	r7, #2
 8005af6:	9305      	str	r3, [sp, #20]
 8005af8:	4d2e      	ldr	r5, [pc, #184]	; (8005bb4 <_svfiprintf_r+0x1e0>)
 8005afa:	7839      	ldrb	r1, [r7, #0]
 8005afc:	2203      	movs	r2, #3
 8005afe:	4628      	mov	r0, r5
 8005b00:	f7fa fb8e 	bl	8000220 <memchr>
 8005b04:	b138      	cbz	r0, 8005b16 <_svfiprintf_r+0x142>
 8005b06:	2340      	movs	r3, #64	; 0x40
 8005b08:	1b40      	subs	r0, r0, r5
 8005b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b0e:	9b04      	ldr	r3, [sp, #16]
 8005b10:	4303      	orrs	r3, r0
 8005b12:	3701      	adds	r7, #1
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	7839      	ldrb	r1, [r7, #0]
 8005b18:	4827      	ldr	r0, [pc, #156]	; (8005bb8 <_svfiprintf_r+0x1e4>)
 8005b1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b1e:	2206      	movs	r2, #6
 8005b20:	1c7e      	adds	r6, r7, #1
 8005b22:	f7fa fb7d 	bl	8000220 <memchr>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d038      	beq.n	8005b9c <_svfiprintf_r+0x1c8>
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <_svfiprintf_r+0x1e8>)
 8005b2c:	bb13      	cbnz	r3, 8005b74 <_svfiprintf_r+0x1a0>
 8005b2e:	9b03      	ldr	r3, [sp, #12]
 8005b30:	3307      	adds	r3, #7
 8005b32:	f023 0307 	bic.w	r3, r3, #7
 8005b36:	3308      	adds	r3, #8
 8005b38:	9303      	str	r3, [sp, #12]
 8005b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3c:	444b      	add	r3, r9
 8005b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b40:	e76d      	b.n	8005a1e <_svfiprintf_r+0x4a>
 8005b42:	fb05 3202 	mla	r2, r5, r2, r3
 8005b46:	2001      	movs	r0, #1
 8005b48:	460f      	mov	r7, r1
 8005b4a:	e7a6      	b.n	8005a9a <_svfiprintf_r+0xc6>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	3701      	adds	r7, #1
 8005b50:	9305      	str	r3, [sp, #20]
 8005b52:	4619      	mov	r1, r3
 8005b54:	250a      	movs	r5, #10
 8005b56:	4638      	mov	r0, r7
 8005b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b5c:	3a30      	subs	r2, #48	; 0x30
 8005b5e:	2a09      	cmp	r2, #9
 8005b60:	d903      	bls.n	8005b6a <_svfiprintf_r+0x196>
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0c8      	beq.n	8005af8 <_svfiprintf_r+0x124>
 8005b66:	9105      	str	r1, [sp, #20]
 8005b68:	e7c6      	b.n	8005af8 <_svfiprintf_r+0x124>
 8005b6a:	fb05 2101 	mla	r1, r5, r1, r2
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4607      	mov	r7, r0
 8005b72:	e7f0      	b.n	8005b56 <_svfiprintf_r+0x182>
 8005b74:	ab03      	add	r3, sp, #12
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	4622      	mov	r2, r4
 8005b7a:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <_svfiprintf_r+0x1ec>)
 8005b7c:	a904      	add	r1, sp, #16
 8005b7e:	4640      	mov	r0, r8
 8005b80:	f3af 8000 	nop.w
 8005b84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b88:	4681      	mov	r9, r0
 8005b8a:	d1d6      	bne.n	8005b3a <_svfiprintf_r+0x166>
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	065b      	lsls	r3, r3, #25
 8005b90:	f53f af35 	bmi.w	80059fe <_svfiprintf_r+0x2a>
 8005b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b96:	b01d      	add	sp, #116	; 0x74
 8005b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9c:	ab03      	add	r3, sp, #12
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	4622      	mov	r2, r4
 8005ba2:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <_svfiprintf_r+0x1ec>)
 8005ba4:	a904      	add	r1, sp, #16
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	f000 f882 	bl	8005cb0 <_printf_i>
 8005bac:	e7ea      	b.n	8005b84 <_svfiprintf_r+0x1b0>
 8005bae:	bf00      	nop
 8005bb0:	08007b68 	.word	0x08007b68
 8005bb4:	08007b6e 	.word	0x08007b6e
 8005bb8:	08007b72 	.word	0x08007b72
 8005bbc:	00000000 	.word	0x00000000
 8005bc0:	08005921 	.word	0x08005921

08005bc4 <_printf_common>:
 8005bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc8:	4691      	mov	r9, r2
 8005bca:	461f      	mov	r7, r3
 8005bcc:	688a      	ldr	r2, [r1, #8]
 8005bce:	690b      	ldr	r3, [r1, #16]
 8005bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	bfb8      	it	lt
 8005bd8:	4613      	movlt	r3, r2
 8005bda:	f8c9 3000 	str.w	r3, [r9]
 8005bde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be2:	4606      	mov	r6, r0
 8005be4:	460c      	mov	r4, r1
 8005be6:	b112      	cbz	r2, 8005bee <_printf_common+0x2a>
 8005be8:	3301      	adds	r3, #1
 8005bea:	f8c9 3000 	str.w	r3, [r9]
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	0699      	lsls	r1, r3, #26
 8005bf2:	bf42      	ittt	mi
 8005bf4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bf8:	3302      	addmi	r3, #2
 8005bfa:	f8c9 3000 	strmi.w	r3, [r9]
 8005bfe:	6825      	ldr	r5, [r4, #0]
 8005c00:	f015 0506 	ands.w	r5, r5, #6
 8005c04:	d107      	bne.n	8005c16 <_printf_common+0x52>
 8005c06:	f104 0a19 	add.w	sl, r4, #25
 8005c0a:	68e3      	ldr	r3, [r4, #12]
 8005c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c10:	1a9b      	subs	r3, r3, r2
 8005c12:	42ab      	cmp	r3, r5
 8005c14:	dc28      	bgt.n	8005c68 <_printf_common+0xa4>
 8005c16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	3300      	adds	r3, #0
 8005c1e:	bf18      	it	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	0692      	lsls	r2, r2, #26
 8005c24:	d42d      	bmi.n	8005c82 <_printf_common+0xbe>
 8005c26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	47c0      	blx	r8
 8005c30:	3001      	adds	r0, #1
 8005c32:	d020      	beq.n	8005c76 <_printf_common+0xb2>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	68e5      	ldr	r5, [r4, #12]
 8005c38:	f8d9 2000 	ldr.w	r2, [r9]
 8005c3c:	f003 0306 	and.w	r3, r3, #6
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	bf08      	it	eq
 8005c44:	1aad      	subeq	r5, r5, r2
 8005c46:	68a3      	ldr	r3, [r4, #8]
 8005c48:	6922      	ldr	r2, [r4, #16]
 8005c4a:	bf0c      	ite	eq
 8005c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c50:	2500      	movne	r5, #0
 8005c52:	4293      	cmp	r3, r2
 8005c54:	bfc4      	itt	gt
 8005c56:	1a9b      	subgt	r3, r3, r2
 8005c58:	18ed      	addgt	r5, r5, r3
 8005c5a:	f04f 0900 	mov.w	r9, #0
 8005c5e:	341a      	adds	r4, #26
 8005c60:	454d      	cmp	r5, r9
 8005c62:	d11a      	bne.n	8005c9a <_printf_common+0xd6>
 8005c64:	2000      	movs	r0, #0
 8005c66:	e008      	b.n	8005c7a <_printf_common+0xb6>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4652      	mov	r2, sl
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	4630      	mov	r0, r6
 8005c70:	47c0      	blx	r8
 8005c72:	3001      	adds	r0, #1
 8005c74:	d103      	bne.n	8005c7e <_printf_common+0xba>
 8005c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7e:	3501      	adds	r5, #1
 8005c80:	e7c3      	b.n	8005c0a <_printf_common+0x46>
 8005c82:	18e1      	adds	r1, r4, r3
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	2030      	movs	r0, #48	; 0x30
 8005c88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c8c:	4422      	add	r2, r4
 8005c8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c96:	3302      	adds	r3, #2
 8005c98:	e7c5      	b.n	8005c26 <_printf_common+0x62>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	4622      	mov	r2, r4
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	47c0      	blx	r8
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d0e6      	beq.n	8005c76 <_printf_common+0xb2>
 8005ca8:	f109 0901 	add.w	r9, r9, #1
 8005cac:	e7d8      	b.n	8005c60 <_printf_common+0x9c>
	...

08005cb0 <_printf_i>:
 8005cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005cb8:	460c      	mov	r4, r1
 8005cba:	7e09      	ldrb	r1, [r1, #24]
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	296e      	cmp	r1, #110	; 0x6e
 8005cc0:	4617      	mov	r7, r2
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	4698      	mov	r8, r3
 8005cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cc8:	f000 80b3 	beq.w	8005e32 <_printf_i+0x182>
 8005ccc:	d822      	bhi.n	8005d14 <_printf_i+0x64>
 8005cce:	2963      	cmp	r1, #99	; 0x63
 8005cd0:	d036      	beq.n	8005d40 <_printf_i+0x90>
 8005cd2:	d80a      	bhi.n	8005cea <_printf_i+0x3a>
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	f000 80b9 	beq.w	8005e4c <_printf_i+0x19c>
 8005cda:	2958      	cmp	r1, #88	; 0x58
 8005cdc:	f000 8083 	beq.w	8005de6 <_printf_i+0x136>
 8005ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ce8:	e032      	b.n	8005d50 <_printf_i+0xa0>
 8005cea:	2964      	cmp	r1, #100	; 0x64
 8005cec:	d001      	beq.n	8005cf2 <_printf_i+0x42>
 8005cee:	2969      	cmp	r1, #105	; 0x69
 8005cf0:	d1f6      	bne.n	8005ce0 <_printf_i+0x30>
 8005cf2:	6820      	ldr	r0, [r4, #0]
 8005cf4:	6813      	ldr	r3, [r2, #0]
 8005cf6:	0605      	lsls	r5, r0, #24
 8005cf8:	f103 0104 	add.w	r1, r3, #4
 8005cfc:	d52a      	bpl.n	8005d54 <_printf_i+0xa4>
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6011      	str	r1, [r2, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	da03      	bge.n	8005d0e <_printf_i+0x5e>
 8005d06:	222d      	movs	r2, #45	; 0x2d
 8005d08:	425b      	negs	r3, r3
 8005d0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d0e:	486f      	ldr	r0, [pc, #444]	; (8005ecc <_printf_i+0x21c>)
 8005d10:	220a      	movs	r2, #10
 8005d12:	e039      	b.n	8005d88 <_printf_i+0xd8>
 8005d14:	2973      	cmp	r1, #115	; 0x73
 8005d16:	f000 809d 	beq.w	8005e54 <_printf_i+0x1a4>
 8005d1a:	d808      	bhi.n	8005d2e <_printf_i+0x7e>
 8005d1c:	296f      	cmp	r1, #111	; 0x6f
 8005d1e:	d020      	beq.n	8005d62 <_printf_i+0xb2>
 8005d20:	2970      	cmp	r1, #112	; 0x70
 8005d22:	d1dd      	bne.n	8005ce0 <_printf_i+0x30>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	f043 0320 	orr.w	r3, r3, #32
 8005d2a:	6023      	str	r3, [r4, #0]
 8005d2c:	e003      	b.n	8005d36 <_printf_i+0x86>
 8005d2e:	2975      	cmp	r1, #117	; 0x75
 8005d30:	d017      	beq.n	8005d62 <_printf_i+0xb2>
 8005d32:	2978      	cmp	r1, #120	; 0x78
 8005d34:	d1d4      	bne.n	8005ce0 <_printf_i+0x30>
 8005d36:	2378      	movs	r3, #120	; 0x78
 8005d38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d3c:	4864      	ldr	r0, [pc, #400]	; (8005ed0 <_printf_i+0x220>)
 8005d3e:	e055      	b.n	8005dec <_printf_i+0x13c>
 8005d40:	6813      	ldr	r3, [r2, #0]
 8005d42:	1d19      	adds	r1, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6011      	str	r1, [r2, #0]
 8005d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d50:	2301      	movs	r3, #1
 8005d52:	e08c      	b.n	8005e6e <_printf_i+0x1be>
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6011      	str	r1, [r2, #0]
 8005d58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d5c:	bf18      	it	ne
 8005d5e:	b21b      	sxthne	r3, r3
 8005d60:	e7cf      	b.n	8005d02 <_printf_i+0x52>
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	6825      	ldr	r5, [r4, #0]
 8005d66:	1d18      	adds	r0, r3, #4
 8005d68:	6010      	str	r0, [r2, #0]
 8005d6a:	0628      	lsls	r0, r5, #24
 8005d6c:	d501      	bpl.n	8005d72 <_printf_i+0xc2>
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	e002      	b.n	8005d78 <_printf_i+0xc8>
 8005d72:	0668      	lsls	r0, r5, #25
 8005d74:	d5fb      	bpl.n	8005d6e <_printf_i+0xbe>
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	4854      	ldr	r0, [pc, #336]	; (8005ecc <_printf_i+0x21c>)
 8005d7a:	296f      	cmp	r1, #111	; 0x6f
 8005d7c:	bf14      	ite	ne
 8005d7e:	220a      	movne	r2, #10
 8005d80:	2208      	moveq	r2, #8
 8005d82:	2100      	movs	r1, #0
 8005d84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d88:	6865      	ldr	r5, [r4, #4]
 8005d8a:	60a5      	str	r5, [r4, #8]
 8005d8c:	2d00      	cmp	r5, #0
 8005d8e:	f2c0 8095 	blt.w	8005ebc <_printf_i+0x20c>
 8005d92:	6821      	ldr	r1, [r4, #0]
 8005d94:	f021 0104 	bic.w	r1, r1, #4
 8005d98:	6021      	str	r1, [r4, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d13d      	bne.n	8005e1a <_printf_i+0x16a>
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	f040 808e 	bne.w	8005ec0 <_printf_i+0x210>
 8005da4:	4665      	mov	r5, ip
 8005da6:	2a08      	cmp	r2, #8
 8005da8:	d10b      	bne.n	8005dc2 <_printf_i+0x112>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	07db      	lsls	r3, r3, #31
 8005dae:	d508      	bpl.n	8005dc2 <_printf_i+0x112>
 8005db0:	6923      	ldr	r3, [r4, #16]
 8005db2:	6862      	ldr	r2, [r4, #4]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	bfde      	ittt	le
 8005db8:	2330      	movle	r3, #48	; 0x30
 8005dba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dbe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005dc2:	ebac 0305 	sub.w	r3, ip, r5
 8005dc6:	6123      	str	r3, [r4, #16]
 8005dc8:	f8cd 8000 	str.w	r8, [sp]
 8005dcc:	463b      	mov	r3, r7
 8005dce:	aa03      	add	r2, sp, #12
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7ff fef6 	bl	8005bc4 <_printf_common>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d14d      	bne.n	8005e78 <_printf_i+0x1c8>
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005de0:	b005      	add	sp, #20
 8005de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005de6:	4839      	ldr	r0, [pc, #228]	; (8005ecc <_printf_i+0x21c>)
 8005de8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005dec:	6813      	ldr	r3, [r2, #0]
 8005dee:	6821      	ldr	r1, [r4, #0]
 8005df0:	1d1d      	adds	r5, r3, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6015      	str	r5, [r2, #0]
 8005df6:	060a      	lsls	r2, r1, #24
 8005df8:	d50b      	bpl.n	8005e12 <_printf_i+0x162>
 8005dfa:	07ca      	lsls	r2, r1, #31
 8005dfc:	bf44      	itt	mi
 8005dfe:	f041 0120 	orrmi.w	r1, r1, #32
 8005e02:	6021      	strmi	r1, [r4, #0]
 8005e04:	b91b      	cbnz	r3, 8005e0e <_printf_i+0x15e>
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	f022 0220 	bic.w	r2, r2, #32
 8005e0c:	6022      	str	r2, [r4, #0]
 8005e0e:	2210      	movs	r2, #16
 8005e10:	e7b7      	b.n	8005d82 <_printf_i+0xd2>
 8005e12:	064d      	lsls	r5, r1, #25
 8005e14:	bf48      	it	mi
 8005e16:	b29b      	uxthmi	r3, r3
 8005e18:	e7ef      	b.n	8005dfa <_printf_i+0x14a>
 8005e1a:	4665      	mov	r5, ip
 8005e1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e20:	fb02 3311 	mls	r3, r2, r1, r3
 8005e24:	5cc3      	ldrb	r3, [r0, r3]
 8005e26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	d1f5      	bne.n	8005e1c <_printf_i+0x16c>
 8005e30:	e7b9      	b.n	8005da6 <_printf_i+0xf6>
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	6825      	ldr	r5, [r4, #0]
 8005e36:	6961      	ldr	r1, [r4, #20]
 8005e38:	1d18      	adds	r0, r3, #4
 8005e3a:	6010      	str	r0, [r2, #0]
 8005e3c:	0628      	lsls	r0, r5, #24
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	d501      	bpl.n	8005e46 <_printf_i+0x196>
 8005e42:	6019      	str	r1, [r3, #0]
 8005e44:	e002      	b.n	8005e4c <_printf_i+0x19c>
 8005e46:	066a      	lsls	r2, r5, #25
 8005e48:	d5fb      	bpl.n	8005e42 <_printf_i+0x192>
 8005e4a:	8019      	strh	r1, [r3, #0]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6123      	str	r3, [r4, #16]
 8005e50:	4665      	mov	r5, ip
 8005e52:	e7b9      	b.n	8005dc8 <_printf_i+0x118>
 8005e54:	6813      	ldr	r3, [r2, #0]
 8005e56:	1d19      	adds	r1, r3, #4
 8005e58:	6011      	str	r1, [r2, #0]
 8005e5a:	681d      	ldr	r5, [r3, #0]
 8005e5c:	6862      	ldr	r2, [r4, #4]
 8005e5e:	2100      	movs	r1, #0
 8005e60:	4628      	mov	r0, r5
 8005e62:	f7fa f9dd 	bl	8000220 <memchr>
 8005e66:	b108      	cbz	r0, 8005e6c <_printf_i+0x1bc>
 8005e68:	1b40      	subs	r0, r0, r5
 8005e6a:	6060      	str	r0, [r4, #4]
 8005e6c:	6863      	ldr	r3, [r4, #4]
 8005e6e:	6123      	str	r3, [r4, #16]
 8005e70:	2300      	movs	r3, #0
 8005e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e76:	e7a7      	b.n	8005dc8 <_printf_i+0x118>
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	4630      	mov	r0, r6
 8005e80:	47c0      	blx	r8
 8005e82:	3001      	adds	r0, #1
 8005e84:	d0aa      	beq.n	8005ddc <_printf_i+0x12c>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	079b      	lsls	r3, r3, #30
 8005e8a:	d413      	bmi.n	8005eb4 <_printf_i+0x204>
 8005e8c:	68e0      	ldr	r0, [r4, #12]
 8005e8e:	9b03      	ldr	r3, [sp, #12]
 8005e90:	4298      	cmp	r0, r3
 8005e92:	bfb8      	it	lt
 8005e94:	4618      	movlt	r0, r3
 8005e96:	e7a3      	b.n	8005de0 <_printf_i+0x130>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	464a      	mov	r2, r9
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	47c0      	blx	r8
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d09a      	beq.n	8005ddc <_printf_i+0x12c>
 8005ea6:	3501      	adds	r5, #1
 8005ea8:	68e3      	ldr	r3, [r4, #12]
 8005eaa:	9a03      	ldr	r2, [sp, #12]
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	42ab      	cmp	r3, r5
 8005eb0:	dcf2      	bgt.n	8005e98 <_printf_i+0x1e8>
 8005eb2:	e7eb      	b.n	8005e8c <_printf_i+0x1dc>
 8005eb4:	2500      	movs	r5, #0
 8005eb6:	f104 0919 	add.w	r9, r4, #25
 8005eba:	e7f5      	b.n	8005ea8 <_printf_i+0x1f8>
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1ac      	bne.n	8005e1a <_printf_i+0x16a>
 8005ec0:	7803      	ldrb	r3, [r0, #0]
 8005ec2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ec6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eca:	e76c      	b.n	8005da6 <_printf_i+0xf6>
 8005ecc:	08007b79 	.word	0x08007b79
 8005ed0:	08007b8a 	.word	0x08007b8a

08005ed4 <memcpy>:
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	1e43      	subs	r3, r0, #1
 8005ed8:	440a      	add	r2, r1
 8005eda:	4291      	cmp	r1, r2
 8005edc:	d100      	bne.n	8005ee0 <memcpy+0xc>
 8005ede:	bd10      	pop	{r4, pc}
 8005ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ee8:	e7f7      	b.n	8005eda <memcpy+0x6>

08005eea <memmove>:
 8005eea:	4288      	cmp	r0, r1
 8005eec:	b510      	push	{r4, lr}
 8005eee:	eb01 0302 	add.w	r3, r1, r2
 8005ef2:	d807      	bhi.n	8005f04 <memmove+0x1a>
 8005ef4:	1e42      	subs	r2, r0, #1
 8005ef6:	4299      	cmp	r1, r3
 8005ef8:	d00a      	beq.n	8005f10 <memmove+0x26>
 8005efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005efe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005f02:	e7f8      	b.n	8005ef6 <memmove+0xc>
 8005f04:	4283      	cmp	r3, r0
 8005f06:	d9f5      	bls.n	8005ef4 <memmove+0xa>
 8005f08:	1881      	adds	r1, r0, r2
 8005f0a:	1ad2      	subs	r2, r2, r3
 8005f0c:	42d3      	cmn	r3, r2
 8005f0e:	d100      	bne.n	8005f12 <memmove+0x28>
 8005f10:	bd10      	pop	{r4, pc}
 8005f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f16:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f1a:	e7f7      	b.n	8005f0c <memmove+0x22>

08005f1c <_free_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4605      	mov	r5, r0
 8005f20:	2900      	cmp	r1, #0
 8005f22:	d045      	beq.n	8005fb0 <_free_r+0x94>
 8005f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f28:	1f0c      	subs	r4, r1, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfb8      	it	lt
 8005f2e:	18e4      	addlt	r4, r4, r3
 8005f30:	f000 f8d2 	bl	80060d8 <__malloc_lock>
 8005f34:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <_free_r+0x98>)
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	4610      	mov	r0, r2
 8005f3a:	b933      	cbnz	r3, 8005f4a <_free_r+0x2e>
 8005f3c:	6063      	str	r3, [r4, #4]
 8005f3e:	6014      	str	r4, [r2, #0]
 8005f40:	4628      	mov	r0, r5
 8005f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f46:	f000 b8c8 	b.w	80060da <__malloc_unlock>
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	d90c      	bls.n	8005f68 <_free_r+0x4c>
 8005f4e:	6821      	ldr	r1, [r4, #0]
 8005f50:	1862      	adds	r2, r4, r1
 8005f52:	4293      	cmp	r3, r2
 8005f54:	bf04      	itt	eq
 8005f56:	681a      	ldreq	r2, [r3, #0]
 8005f58:	685b      	ldreq	r3, [r3, #4]
 8005f5a:	6063      	str	r3, [r4, #4]
 8005f5c:	bf04      	itt	eq
 8005f5e:	1852      	addeq	r2, r2, r1
 8005f60:	6022      	streq	r2, [r4, #0]
 8005f62:	6004      	str	r4, [r0, #0]
 8005f64:	e7ec      	b.n	8005f40 <_free_r+0x24>
 8005f66:	4613      	mov	r3, r2
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	b10a      	cbz	r2, 8005f70 <_free_r+0x54>
 8005f6c:	42a2      	cmp	r2, r4
 8005f6e:	d9fa      	bls.n	8005f66 <_free_r+0x4a>
 8005f70:	6819      	ldr	r1, [r3, #0]
 8005f72:	1858      	adds	r0, r3, r1
 8005f74:	42a0      	cmp	r0, r4
 8005f76:	d10b      	bne.n	8005f90 <_free_r+0x74>
 8005f78:	6820      	ldr	r0, [r4, #0]
 8005f7a:	4401      	add	r1, r0
 8005f7c:	1858      	adds	r0, r3, r1
 8005f7e:	4282      	cmp	r2, r0
 8005f80:	6019      	str	r1, [r3, #0]
 8005f82:	d1dd      	bne.n	8005f40 <_free_r+0x24>
 8005f84:	6810      	ldr	r0, [r2, #0]
 8005f86:	6852      	ldr	r2, [r2, #4]
 8005f88:	605a      	str	r2, [r3, #4]
 8005f8a:	4401      	add	r1, r0
 8005f8c:	6019      	str	r1, [r3, #0]
 8005f8e:	e7d7      	b.n	8005f40 <_free_r+0x24>
 8005f90:	d902      	bls.n	8005f98 <_free_r+0x7c>
 8005f92:	230c      	movs	r3, #12
 8005f94:	602b      	str	r3, [r5, #0]
 8005f96:	e7d3      	b.n	8005f40 <_free_r+0x24>
 8005f98:	6820      	ldr	r0, [r4, #0]
 8005f9a:	1821      	adds	r1, r4, r0
 8005f9c:	428a      	cmp	r2, r1
 8005f9e:	bf04      	itt	eq
 8005fa0:	6811      	ldreq	r1, [r2, #0]
 8005fa2:	6852      	ldreq	r2, [r2, #4]
 8005fa4:	6062      	str	r2, [r4, #4]
 8005fa6:	bf04      	itt	eq
 8005fa8:	1809      	addeq	r1, r1, r0
 8005faa:	6021      	streq	r1, [r4, #0]
 8005fac:	605c      	str	r4, [r3, #4]
 8005fae:	e7c7      	b.n	8005f40 <_free_r+0x24>
 8005fb0:	bd38      	pop	{r3, r4, r5, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200004a8 	.word	0x200004a8

08005fb8 <_malloc_r>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	1ccd      	adds	r5, r1, #3
 8005fbc:	f025 0503 	bic.w	r5, r5, #3
 8005fc0:	3508      	adds	r5, #8
 8005fc2:	2d0c      	cmp	r5, #12
 8005fc4:	bf38      	it	cc
 8005fc6:	250c      	movcc	r5, #12
 8005fc8:	2d00      	cmp	r5, #0
 8005fca:	4606      	mov	r6, r0
 8005fcc:	db01      	blt.n	8005fd2 <_malloc_r+0x1a>
 8005fce:	42a9      	cmp	r1, r5
 8005fd0:	d903      	bls.n	8005fda <_malloc_r+0x22>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	6033      	str	r3, [r6, #0]
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
 8005fda:	f000 f87d 	bl	80060d8 <__malloc_lock>
 8005fde:	4a21      	ldr	r2, [pc, #132]	; (8006064 <_malloc_r+0xac>)
 8005fe0:	6814      	ldr	r4, [r2, #0]
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	b991      	cbnz	r1, 800600c <_malloc_r+0x54>
 8005fe6:	4c20      	ldr	r4, [pc, #128]	; (8006068 <_malloc_r+0xb0>)
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	b91b      	cbnz	r3, 8005ff4 <_malloc_r+0x3c>
 8005fec:	4630      	mov	r0, r6
 8005fee:	f000 f863 	bl	80060b8 <_sbrk_r>
 8005ff2:	6020      	str	r0, [r4, #0]
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f000 f85e 	bl	80060b8 <_sbrk_r>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d124      	bne.n	800604a <_malloc_r+0x92>
 8006000:	230c      	movs	r3, #12
 8006002:	6033      	str	r3, [r6, #0]
 8006004:	4630      	mov	r0, r6
 8006006:	f000 f868 	bl	80060da <__malloc_unlock>
 800600a:	e7e4      	b.n	8005fd6 <_malloc_r+0x1e>
 800600c:	680b      	ldr	r3, [r1, #0]
 800600e:	1b5b      	subs	r3, r3, r5
 8006010:	d418      	bmi.n	8006044 <_malloc_r+0x8c>
 8006012:	2b0b      	cmp	r3, #11
 8006014:	d90f      	bls.n	8006036 <_malloc_r+0x7e>
 8006016:	600b      	str	r3, [r1, #0]
 8006018:	50cd      	str	r5, [r1, r3]
 800601a:	18cc      	adds	r4, r1, r3
 800601c:	4630      	mov	r0, r6
 800601e:	f000 f85c 	bl	80060da <__malloc_unlock>
 8006022:	f104 000b 	add.w	r0, r4, #11
 8006026:	1d23      	adds	r3, r4, #4
 8006028:	f020 0007 	bic.w	r0, r0, #7
 800602c:	1ac3      	subs	r3, r0, r3
 800602e:	d0d3      	beq.n	8005fd8 <_malloc_r+0x20>
 8006030:	425a      	negs	r2, r3
 8006032:	50e2      	str	r2, [r4, r3]
 8006034:	e7d0      	b.n	8005fd8 <_malloc_r+0x20>
 8006036:	428c      	cmp	r4, r1
 8006038:	684b      	ldr	r3, [r1, #4]
 800603a:	bf16      	itet	ne
 800603c:	6063      	strne	r3, [r4, #4]
 800603e:	6013      	streq	r3, [r2, #0]
 8006040:	460c      	movne	r4, r1
 8006042:	e7eb      	b.n	800601c <_malloc_r+0x64>
 8006044:	460c      	mov	r4, r1
 8006046:	6849      	ldr	r1, [r1, #4]
 8006048:	e7cc      	b.n	8005fe4 <_malloc_r+0x2c>
 800604a:	1cc4      	adds	r4, r0, #3
 800604c:	f024 0403 	bic.w	r4, r4, #3
 8006050:	42a0      	cmp	r0, r4
 8006052:	d005      	beq.n	8006060 <_malloc_r+0xa8>
 8006054:	1a21      	subs	r1, r4, r0
 8006056:	4630      	mov	r0, r6
 8006058:	f000 f82e 	bl	80060b8 <_sbrk_r>
 800605c:	3001      	adds	r0, #1
 800605e:	d0cf      	beq.n	8006000 <_malloc_r+0x48>
 8006060:	6025      	str	r5, [r4, #0]
 8006062:	e7db      	b.n	800601c <_malloc_r+0x64>
 8006064:	200004a8 	.word	0x200004a8
 8006068:	200004ac 	.word	0x200004ac

0800606c <_realloc_r>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	4607      	mov	r7, r0
 8006070:	4614      	mov	r4, r2
 8006072:	460e      	mov	r6, r1
 8006074:	b921      	cbnz	r1, 8006080 <_realloc_r+0x14>
 8006076:	4611      	mov	r1, r2
 8006078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800607c:	f7ff bf9c 	b.w	8005fb8 <_malloc_r>
 8006080:	b922      	cbnz	r2, 800608c <_realloc_r+0x20>
 8006082:	f7ff ff4b 	bl	8005f1c <_free_r>
 8006086:	4625      	mov	r5, r4
 8006088:	4628      	mov	r0, r5
 800608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800608c:	f000 f826 	bl	80060dc <_malloc_usable_size_r>
 8006090:	42a0      	cmp	r0, r4
 8006092:	d20f      	bcs.n	80060b4 <_realloc_r+0x48>
 8006094:	4621      	mov	r1, r4
 8006096:	4638      	mov	r0, r7
 8006098:	f7ff ff8e 	bl	8005fb8 <_malloc_r>
 800609c:	4605      	mov	r5, r0
 800609e:	2800      	cmp	r0, #0
 80060a0:	d0f2      	beq.n	8006088 <_realloc_r+0x1c>
 80060a2:	4631      	mov	r1, r6
 80060a4:	4622      	mov	r2, r4
 80060a6:	f7ff ff15 	bl	8005ed4 <memcpy>
 80060aa:	4631      	mov	r1, r6
 80060ac:	4638      	mov	r0, r7
 80060ae:	f7ff ff35 	bl	8005f1c <_free_r>
 80060b2:	e7e9      	b.n	8006088 <_realloc_r+0x1c>
 80060b4:	4635      	mov	r5, r6
 80060b6:	e7e7      	b.n	8006088 <_realloc_r+0x1c>

080060b8 <_sbrk_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4c06      	ldr	r4, [pc, #24]	; (80060d4 <_sbrk_r+0x1c>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4605      	mov	r5, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	6023      	str	r3, [r4, #0]
 80060c4:	f7fc fdaa 	bl	8002c1c <_sbrk>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_sbrk_r+0x1a>
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_sbrk_r+0x1a>
 80060d0:	602b      	str	r3, [r5, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20000628 	.word	0x20000628

080060d8 <__malloc_lock>:
 80060d8:	4770      	bx	lr

080060da <__malloc_unlock>:
 80060da:	4770      	bx	lr

080060dc <_malloc_usable_size_r>:
 80060dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060e0:	1f18      	subs	r0, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bfbc      	itt	lt
 80060e6:	580b      	ldrlt	r3, [r1, r0]
 80060e8:	18c0      	addlt	r0, r0, r3
 80060ea:	4770      	bx	lr

080060ec <pow>:
 80060ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f0:	ed2d 8b04 	vpush	{d8-d9}
 80060f4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80063c8 <pow+0x2dc>
 80060f8:	b08d      	sub	sp, #52	; 0x34
 80060fa:	ec57 6b10 	vmov	r6, r7, d0
 80060fe:	ec55 4b11 	vmov	r4, r5, d1
 8006102:	f000 f965 	bl	80063d0 <__ieee754_pow>
 8006106:	f999 3000 	ldrsb.w	r3, [r9]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	3301      	adds	r3, #1
 800610e:	eeb0 8a40 	vmov.f32	s16, s0
 8006112:	eef0 8a60 	vmov.f32	s17, s1
 8006116:	46c8      	mov	r8, r9
 8006118:	d05f      	beq.n	80061da <pow+0xee>
 800611a:	4622      	mov	r2, r4
 800611c:	462b      	mov	r3, r5
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa fd23 	bl	8000b6c <__aeabi_dcmpun>
 8006126:	4683      	mov	fp, r0
 8006128:	2800      	cmp	r0, #0
 800612a:	d156      	bne.n	80061da <pow+0xee>
 800612c:	4632      	mov	r2, r6
 800612e:	463b      	mov	r3, r7
 8006130:	4630      	mov	r0, r6
 8006132:	4639      	mov	r1, r7
 8006134:	f7fa fd1a 	bl	8000b6c <__aeabi_dcmpun>
 8006138:	9001      	str	r0, [sp, #4]
 800613a:	b1e8      	cbz	r0, 8006178 <pow+0x8c>
 800613c:	2200      	movs	r2, #0
 800613e:	2300      	movs	r3, #0
 8006140:	4620      	mov	r0, r4
 8006142:	4629      	mov	r1, r5
 8006144:	f7fa fce0 	bl	8000b08 <__aeabi_dcmpeq>
 8006148:	2800      	cmp	r0, #0
 800614a:	d046      	beq.n	80061da <pow+0xee>
 800614c:	2301      	movs	r3, #1
 800614e:	9302      	str	r3, [sp, #8]
 8006150:	4b96      	ldr	r3, [pc, #600]	; (80063ac <pow+0x2c0>)
 8006152:	9303      	str	r3, [sp, #12]
 8006154:	4b96      	ldr	r3, [pc, #600]	; (80063b0 <pow+0x2c4>)
 8006156:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800615a:	2200      	movs	r2, #0
 800615c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006160:	9b00      	ldr	r3, [sp, #0]
 8006162:	2b02      	cmp	r3, #2
 8006164:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006168:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800616c:	d033      	beq.n	80061d6 <pow+0xea>
 800616e:	a802      	add	r0, sp, #8
 8006170:	f000 fefd 	bl	8006f6e <matherr>
 8006174:	bb48      	cbnz	r0, 80061ca <pow+0xde>
 8006176:	e05d      	b.n	8006234 <pow+0x148>
 8006178:	f04f 0a00 	mov.w	sl, #0
 800617c:	f04f 0b00 	mov.w	fp, #0
 8006180:	4652      	mov	r2, sl
 8006182:	465b      	mov	r3, fp
 8006184:	4630      	mov	r0, r6
 8006186:	4639      	mov	r1, r7
 8006188:	f7fa fcbe 	bl	8000b08 <__aeabi_dcmpeq>
 800618c:	ec4b ab19 	vmov	d9, sl, fp
 8006190:	2800      	cmp	r0, #0
 8006192:	d054      	beq.n	800623e <pow+0x152>
 8006194:	4652      	mov	r2, sl
 8006196:	465b      	mov	r3, fp
 8006198:	4620      	mov	r0, r4
 800619a:	4629      	mov	r1, r5
 800619c:	f7fa fcb4 	bl	8000b08 <__aeabi_dcmpeq>
 80061a0:	4680      	mov	r8, r0
 80061a2:	b318      	cbz	r0, 80061ec <pow+0x100>
 80061a4:	2301      	movs	r3, #1
 80061a6:	9302      	str	r3, [sp, #8]
 80061a8:	4b80      	ldr	r3, [pc, #512]	; (80063ac <pow+0x2c0>)
 80061aa:	9303      	str	r3, [sp, #12]
 80061ac:	9b01      	ldr	r3, [sp, #4]
 80061ae:	930a      	str	r3, [sp, #40]	; 0x28
 80061b0:	9b00      	ldr	r3, [sp, #0]
 80061b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80061b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80061ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0d5      	beq.n	800616e <pow+0x82>
 80061c2:	4b7b      	ldr	r3, [pc, #492]	; (80063b0 <pow+0x2c4>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80061ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061cc:	b11b      	cbz	r3, 80061d6 <pow+0xea>
 80061ce:	f7ff fb55 	bl	800587c <__errno>
 80061d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d4:	6003      	str	r3, [r0, #0]
 80061d6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80061da:	eeb0 0a48 	vmov.f32	s0, s16
 80061de:	eef0 0a68 	vmov.f32	s1, s17
 80061e2:	b00d      	add	sp, #52	; 0x34
 80061e4:	ecbd 8b04 	vpop	{d8-d9}
 80061e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ec:	ec45 4b10 	vmov	d0, r4, r5
 80061f0:	f000 feb5 	bl	8006f5e <finite>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d0f0      	beq.n	80061da <pow+0xee>
 80061f8:	4652      	mov	r2, sl
 80061fa:	465b      	mov	r3, fp
 80061fc:	4620      	mov	r0, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	f7fa fc8c 	bl	8000b1c <__aeabi_dcmplt>
 8006204:	2800      	cmp	r0, #0
 8006206:	d0e8      	beq.n	80061da <pow+0xee>
 8006208:	2301      	movs	r3, #1
 800620a:	9302      	str	r3, [sp, #8]
 800620c:	4b67      	ldr	r3, [pc, #412]	; (80063ac <pow+0x2c0>)
 800620e:	9303      	str	r3, [sp, #12]
 8006210:	f999 3000 	ldrsb.w	r3, [r9]
 8006214:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8006218:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800621c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006220:	b913      	cbnz	r3, 8006228 <pow+0x13c>
 8006222:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006226:	e7a2      	b.n	800616e <pow+0x82>
 8006228:	4962      	ldr	r1, [pc, #392]	; (80063b4 <pow+0x2c8>)
 800622a:	2000      	movs	r0, #0
 800622c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d19c      	bne.n	800616e <pow+0x82>
 8006234:	f7ff fb22 	bl	800587c <__errno>
 8006238:	2321      	movs	r3, #33	; 0x21
 800623a:	6003      	str	r3, [r0, #0]
 800623c:	e7c5      	b.n	80061ca <pow+0xde>
 800623e:	eeb0 0a48 	vmov.f32	s0, s16
 8006242:	eef0 0a68 	vmov.f32	s1, s17
 8006246:	f000 fe8a 	bl	8006f5e <finite>
 800624a:	9000      	str	r0, [sp, #0]
 800624c:	2800      	cmp	r0, #0
 800624e:	f040 8081 	bne.w	8006354 <pow+0x268>
 8006252:	ec47 6b10 	vmov	d0, r6, r7
 8006256:	f000 fe82 	bl	8006f5e <finite>
 800625a:	2800      	cmp	r0, #0
 800625c:	d07a      	beq.n	8006354 <pow+0x268>
 800625e:	ec45 4b10 	vmov	d0, r4, r5
 8006262:	f000 fe7c 	bl	8006f5e <finite>
 8006266:	2800      	cmp	r0, #0
 8006268:	d074      	beq.n	8006354 <pow+0x268>
 800626a:	ec53 2b18 	vmov	r2, r3, d8
 800626e:	ee18 0a10 	vmov	r0, s16
 8006272:	4619      	mov	r1, r3
 8006274:	f7fa fc7a 	bl	8000b6c <__aeabi_dcmpun>
 8006278:	f999 9000 	ldrsb.w	r9, [r9]
 800627c:	4b4b      	ldr	r3, [pc, #300]	; (80063ac <pow+0x2c0>)
 800627e:	b1b0      	cbz	r0, 80062ae <pow+0x1c2>
 8006280:	2201      	movs	r2, #1
 8006282:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006286:	9b00      	ldr	r3, [sp, #0]
 8006288:	930a      	str	r3, [sp, #40]	; 0x28
 800628a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800628e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006292:	f1b9 0f00 	cmp.w	r9, #0
 8006296:	d0c4      	beq.n	8006222 <pow+0x136>
 8006298:	4652      	mov	r2, sl
 800629a:	465b      	mov	r3, fp
 800629c:	4650      	mov	r0, sl
 800629e:	4659      	mov	r1, fp
 80062a0:	f7fa faf4 	bl	800088c <__aeabi_ddiv>
 80062a4:	f1b9 0f02 	cmp.w	r9, #2
 80062a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80062ac:	e7c1      	b.n	8006232 <pow+0x146>
 80062ae:	2203      	movs	r2, #3
 80062b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062b4:	900a      	str	r0, [sp, #40]	; 0x28
 80062b6:	4629      	mov	r1, r5
 80062b8:	4620      	mov	r0, r4
 80062ba:	2200      	movs	r2, #0
 80062bc:	4b3e      	ldr	r3, [pc, #248]	; (80063b8 <pow+0x2cc>)
 80062be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80062c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062c6:	f7fa f9b7 	bl	8000638 <__aeabi_dmul>
 80062ca:	4604      	mov	r4, r0
 80062cc:	460d      	mov	r5, r1
 80062ce:	f1b9 0f00 	cmp.w	r9, #0
 80062d2:	d124      	bne.n	800631e <pow+0x232>
 80062d4:	4b39      	ldr	r3, [pc, #228]	; (80063bc <pow+0x2d0>)
 80062d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80062da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062de:	4630      	mov	r0, r6
 80062e0:	4652      	mov	r2, sl
 80062e2:	465b      	mov	r3, fp
 80062e4:	4639      	mov	r1, r7
 80062e6:	f7fa fc19 	bl	8000b1c <__aeabi_dcmplt>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d056      	beq.n	800639c <pow+0x2b0>
 80062ee:	ec45 4b10 	vmov	d0, r4, r5
 80062f2:	f000 fe49 	bl	8006f88 <rint>
 80062f6:	4622      	mov	r2, r4
 80062f8:	462b      	mov	r3, r5
 80062fa:	ec51 0b10 	vmov	r0, r1, d0
 80062fe:	f7fa fc03 	bl	8000b08 <__aeabi_dcmpeq>
 8006302:	b920      	cbnz	r0, 800630e <pow+0x222>
 8006304:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <pow+0x2d4>)
 8006306:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800630a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800630e:	f998 3000 	ldrsb.w	r3, [r8]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d142      	bne.n	800639c <pow+0x2b0>
 8006316:	f7ff fab1 	bl	800587c <__errno>
 800631a:	2322      	movs	r3, #34	; 0x22
 800631c:	e78d      	b.n	800623a <pow+0x14e>
 800631e:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <pow+0x2d8>)
 8006320:	2200      	movs	r2, #0
 8006322:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006326:	4630      	mov	r0, r6
 8006328:	4652      	mov	r2, sl
 800632a:	465b      	mov	r3, fp
 800632c:	4639      	mov	r1, r7
 800632e:	f7fa fbf5 	bl	8000b1c <__aeabi_dcmplt>
 8006332:	2800      	cmp	r0, #0
 8006334:	d0eb      	beq.n	800630e <pow+0x222>
 8006336:	ec45 4b10 	vmov	d0, r4, r5
 800633a:	f000 fe25 	bl	8006f88 <rint>
 800633e:	4622      	mov	r2, r4
 8006340:	462b      	mov	r3, r5
 8006342:	ec51 0b10 	vmov	r0, r1, d0
 8006346:	f7fa fbdf 	bl	8000b08 <__aeabi_dcmpeq>
 800634a:	2800      	cmp	r0, #0
 800634c:	d1df      	bne.n	800630e <pow+0x222>
 800634e:	2200      	movs	r2, #0
 8006350:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <pow+0x2c8>)
 8006352:	e7da      	b.n	800630a <pow+0x21e>
 8006354:	2200      	movs	r2, #0
 8006356:	2300      	movs	r3, #0
 8006358:	ec51 0b18 	vmov	r0, r1, d8
 800635c:	f7fa fbd4 	bl	8000b08 <__aeabi_dcmpeq>
 8006360:	2800      	cmp	r0, #0
 8006362:	f43f af3a 	beq.w	80061da <pow+0xee>
 8006366:	ec47 6b10 	vmov	d0, r6, r7
 800636a:	f000 fdf8 	bl	8006f5e <finite>
 800636e:	2800      	cmp	r0, #0
 8006370:	f43f af33 	beq.w	80061da <pow+0xee>
 8006374:	ec45 4b10 	vmov	d0, r4, r5
 8006378:	f000 fdf1 	bl	8006f5e <finite>
 800637c:	2800      	cmp	r0, #0
 800637e:	f43f af2c 	beq.w	80061da <pow+0xee>
 8006382:	2304      	movs	r3, #4
 8006384:	9302      	str	r3, [sp, #8]
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <pow+0x2c0>)
 8006388:	9303      	str	r3, [sp, #12]
 800638a:	2300      	movs	r3, #0
 800638c:	930a      	str	r3, [sp, #40]	; 0x28
 800638e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006392:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006396:	ed8d 9b08 	vstr	d9, [sp, #32]
 800639a:	e7b8      	b.n	800630e <pow+0x222>
 800639c:	a802      	add	r0, sp, #8
 800639e:	f000 fde6 	bl	8006f6e <matherr>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f47f af11 	bne.w	80061ca <pow+0xde>
 80063a8:	e7b5      	b.n	8006316 <pow+0x22a>
 80063aa:	bf00      	nop
 80063ac:	08007b9b 	.word	0x08007b9b
 80063b0:	3ff00000 	.word	0x3ff00000
 80063b4:	fff00000 	.word	0xfff00000
 80063b8:	3fe00000 	.word	0x3fe00000
 80063bc:	47efffff 	.word	0x47efffff
 80063c0:	c7efffff 	.word	0xc7efffff
 80063c4:	7ff00000 	.word	0x7ff00000
 80063c8:	20000078 	.word	0x20000078
 80063cc:	00000000 	.word	0x00000000

080063d0 <__ieee754_pow>:
 80063d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	b091      	sub	sp, #68	; 0x44
 80063d6:	ed8d 1b00 	vstr	d1, [sp]
 80063da:	e9dd 2900 	ldrd	r2, r9, [sp]
 80063de:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80063e2:	ea58 0302 	orrs.w	r3, r8, r2
 80063e6:	ec57 6b10 	vmov	r6, r7, d0
 80063ea:	f000 84be 	beq.w	8006d6a <__ieee754_pow+0x99a>
 80063ee:	4b7a      	ldr	r3, [pc, #488]	; (80065d8 <__ieee754_pow+0x208>)
 80063f0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80063f4:	429c      	cmp	r4, r3
 80063f6:	463d      	mov	r5, r7
 80063f8:	ee10 aa10 	vmov	sl, s0
 80063fc:	dc09      	bgt.n	8006412 <__ieee754_pow+0x42>
 80063fe:	d103      	bne.n	8006408 <__ieee754_pow+0x38>
 8006400:	b93e      	cbnz	r6, 8006412 <__ieee754_pow+0x42>
 8006402:	45a0      	cmp	r8, r4
 8006404:	dc0d      	bgt.n	8006422 <__ieee754_pow+0x52>
 8006406:	e001      	b.n	800640c <__ieee754_pow+0x3c>
 8006408:	4598      	cmp	r8, r3
 800640a:	dc02      	bgt.n	8006412 <__ieee754_pow+0x42>
 800640c:	4598      	cmp	r8, r3
 800640e:	d10e      	bne.n	800642e <__ieee754_pow+0x5e>
 8006410:	b16a      	cbz	r2, 800642e <__ieee754_pow+0x5e>
 8006412:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006416:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800641a:	ea54 030a 	orrs.w	r3, r4, sl
 800641e:	f000 84a4 	beq.w	8006d6a <__ieee754_pow+0x99a>
 8006422:	486e      	ldr	r0, [pc, #440]	; (80065dc <__ieee754_pow+0x20c>)
 8006424:	b011      	add	sp, #68	; 0x44
 8006426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f000 bda5 	b.w	8006f78 <nan>
 800642e:	2d00      	cmp	r5, #0
 8006430:	da53      	bge.n	80064da <__ieee754_pow+0x10a>
 8006432:	4b6b      	ldr	r3, [pc, #428]	; (80065e0 <__ieee754_pow+0x210>)
 8006434:	4598      	cmp	r8, r3
 8006436:	dc4d      	bgt.n	80064d4 <__ieee754_pow+0x104>
 8006438:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800643c:	4598      	cmp	r8, r3
 800643e:	dd4c      	ble.n	80064da <__ieee754_pow+0x10a>
 8006440:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006444:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006448:	2b14      	cmp	r3, #20
 800644a:	dd26      	ble.n	800649a <__ieee754_pow+0xca>
 800644c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006450:	fa22 f103 	lsr.w	r1, r2, r3
 8006454:	fa01 f303 	lsl.w	r3, r1, r3
 8006458:	4293      	cmp	r3, r2
 800645a:	d13e      	bne.n	80064da <__ieee754_pow+0x10a>
 800645c:	f001 0101 	and.w	r1, r1, #1
 8006460:	f1c1 0b02 	rsb	fp, r1, #2
 8006464:	2a00      	cmp	r2, #0
 8006466:	d15b      	bne.n	8006520 <__ieee754_pow+0x150>
 8006468:	4b5b      	ldr	r3, [pc, #364]	; (80065d8 <__ieee754_pow+0x208>)
 800646a:	4598      	cmp	r8, r3
 800646c:	d124      	bne.n	80064b8 <__ieee754_pow+0xe8>
 800646e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006472:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006476:	ea53 030a 	orrs.w	r3, r3, sl
 800647a:	f000 8476 	beq.w	8006d6a <__ieee754_pow+0x99a>
 800647e:	4b59      	ldr	r3, [pc, #356]	; (80065e4 <__ieee754_pow+0x214>)
 8006480:	429c      	cmp	r4, r3
 8006482:	dd2d      	ble.n	80064e0 <__ieee754_pow+0x110>
 8006484:	f1b9 0f00 	cmp.w	r9, #0
 8006488:	f280 8473 	bge.w	8006d72 <__ieee754_pow+0x9a2>
 800648c:	2000      	movs	r0, #0
 800648e:	2100      	movs	r1, #0
 8006490:	ec41 0b10 	vmov	d0, r0, r1
 8006494:	b011      	add	sp, #68	; 0x44
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	2a00      	cmp	r2, #0
 800649c:	d13e      	bne.n	800651c <__ieee754_pow+0x14c>
 800649e:	f1c3 0314 	rsb	r3, r3, #20
 80064a2:	fa48 f103 	asr.w	r1, r8, r3
 80064a6:	fa01 f303 	lsl.w	r3, r1, r3
 80064aa:	4543      	cmp	r3, r8
 80064ac:	f040 8469 	bne.w	8006d82 <__ieee754_pow+0x9b2>
 80064b0:	f001 0101 	and.w	r1, r1, #1
 80064b4:	f1c1 0b02 	rsb	fp, r1, #2
 80064b8:	4b4b      	ldr	r3, [pc, #300]	; (80065e8 <__ieee754_pow+0x218>)
 80064ba:	4598      	cmp	r8, r3
 80064bc:	d118      	bne.n	80064f0 <__ieee754_pow+0x120>
 80064be:	f1b9 0f00 	cmp.w	r9, #0
 80064c2:	f280 845a 	bge.w	8006d7a <__ieee754_pow+0x9aa>
 80064c6:	4948      	ldr	r1, [pc, #288]	; (80065e8 <__ieee754_pow+0x218>)
 80064c8:	4632      	mov	r2, r6
 80064ca:	463b      	mov	r3, r7
 80064cc:	2000      	movs	r0, #0
 80064ce:	f7fa f9dd 	bl	800088c <__aeabi_ddiv>
 80064d2:	e7dd      	b.n	8006490 <__ieee754_pow+0xc0>
 80064d4:	f04f 0b02 	mov.w	fp, #2
 80064d8:	e7c4      	b.n	8006464 <__ieee754_pow+0x94>
 80064da:	f04f 0b00 	mov.w	fp, #0
 80064de:	e7c1      	b.n	8006464 <__ieee754_pow+0x94>
 80064e0:	f1b9 0f00 	cmp.w	r9, #0
 80064e4:	dad2      	bge.n	800648c <__ieee754_pow+0xbc>
 80064e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80064ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80064ee:	e7cf      	b.n	8006490 <__ieee754_pow+0xc0>
 80064f0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80064f4:	d106      	bne.n	8006504 <__ieee754_pow+0x134>
 80064f6:	4632      	mov	r2, r6
 80064f8:	463b      	mov	r3, r7
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f7fa f89b 	bl	8000638 <__aeabi_dmul>
 8006502:	e7c5      	b.n	8006490 <__ieee754_pow+0xc0>
 8006504:	4b39      	ldr	r3, [pc, #228]	; (80065ec <__ieee754_pow+0x21c>)
 8006506:	4599      	cmp	r9, r3
 8006508:	d10a      	bne.n	8006520 <__ieee754_pow+0x150>
 800650a:	2d00      	cmp	r5, #0
 800650c:	db08      	blt.n	8006520 <__ieee754_pow+0x150>
 800650e:	ec47 6b10 	vmov	d0, r6, r7
 8006512:	b011      	add	sp, #68	; 0x44
 8006514:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	f000 bc68 	b.w	8006dec <__ieee754_sqrt>
 800651c:	f04f 0b00 	mov.w	fp, #0
 8006520:	ec47 6b10 	vmov	d0, r6, r7
 8006524:	f000 fd12 	bl	8006f4c <fabs>
 8006528:	ec51 0b10 	vmov	r0, r1, d0
 800652c:	f1ba 0f00 	cmp.w	sl, #0
 8006530:	d127      	bne.n	8006582 <__ieee754_pow+0x1b2>
 8006532:	b124      	cbz	r4, 800653e <__ieee754_pow+0x16e>
 8006534:	4b2c      	ldr	r3, [pc, #176]	; (80065e8 <__ieee754_pow+0x218>)
 8006536:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800653a:	429a      	cmp	r2, r3
 800653c:	d121      	bne.n	8006582 <__ieee754_pow+0x1b2>
 800653e:	f1b9 0f00 	cmp.w	r9, #0
 8006542:	da05      	bge.n	8006550 <__ieee754_pow+0x180>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	2000      	movs	r0, #0
 800654a:	4927      	ldr	r1, [pc, #156]	; (80065e8 <__ieee754_pow+0x218>)
 800654c:	f7fa f99e 	bl	800088c <__aeabi_ddiv>
 8006550:	2d00      	cmp	r5, #0
 8006552:	da9d      	bge.n	8006490 <__ieee754_pow+0xc0>
 8006554:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006558:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800655c:	ea54 030b 	orrs.w	r3, r4, fp
 8006560:	d108      	bne.n	8006574 <__ieee754_pow+0x1a4>
 8006562:	4602      	mov	r2, r0
 8006564:	460b      	mov	r3, r1
 8006566:	4610      	mov	r0, r2
 8006568:	4619      	mov	r1, r3
 800656a:	f7f9 fead 	bl	80002c8 <__aeabi_dsub>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	e7ac      	b.n	80064ce <__ieee754_pow+0xfe>
 8006574:	f1bb 0f01 	cmp.w	fp, #1
 8006578:	d18a      	bne.n	8006490 <__ieee754_pow+0xc0>
 800657a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800657e:	4619      	mov	r1, r3
 8006580:	e786      	b.n	8006490 <__ieee754_pow+0xc0>
 8006582:	0fed      	lsrs	r5, r5, #31
 8006584:	1e6b      	subs	r3, r5, #1
 8006586:	930d      	str	r3, [sp, #52]	; 0x34
 8006588:	ea5b 0303 	orrs.w	r3, fp, r3
 800658c:	d102      	bne.n	8006594 <__ieee754_pow+0x1c4>
 800658e:	4632      	mov	r2, r6
 8006590:	463b      	mov	r3, r7
 8006592:	e7e8      	b.n	8006566 <__ieee754_pow+0x196>
 8006594:	4b16      	ldr	r3, [pc, #88]	; (80065f0 <__ieee754_pow+0x220>)
 8006596:	4598      	cmp	r8, r3
 8006598:	f340 80fe 	ble.w	8006798 <__ieee754_pow+0x3c8>
 800659c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80065a0:	4598      	cmp	r8, r3
 80065a2:	dd0a      	ble.n	80065ba <__ieee754_pow+0x1ea>
 80065a4:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <__ieee754_pow+0x214>)
 80065a6:	429c      	cmp	r4, r3
 80065a8:	dc0d      	bgt.n	80065c6 <__ieee754_pow+0x1f6>
 80065aa:	f1b9 0f00 	cmp.w	r9, #0
 80065ae:	f6bf af6d 	bge.w	800648c <__ieee754_pow+0xbc>
 80065b2:	a307      	add	r3, pc, #28	; (adr r3, 80065d0 <__ieee754_pow+0x200>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	e79f      	b.n	80064fa <__ieee754_pow+0x12a>
 80065ba:	4b0e      	ldr	r3, [pc, #56]	; (80065f4 <__ieee754_pow+0x224>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	ddf4      	ble.n	80065aa <__ieee754_pow+0x1da>
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <__ieee754_pow+0x218>)
 80065c2:	429c      	cmp	r4, r3
 80065c4:	dd18      	ble.n	80065f8 <__ieee754_pow+0x228>
 80065c6:	f1b9 0f00 	cmp.w	r9, #0
 80065ca:	dcf2      	bgt.n	80065b2 <__ieee754_pow+0x1e2>
 80065cc:	e75e      	b.n	800648c <__ieee754_pow+0xbc>
 80065ce:	bf00      	nop
 80065d0:	8800759c 	.word	0x8800759c
 80065d4:	7e37e43c 	.word	0x7e37e43c
 80065d8:	7ff00000 	.word	0x7ff00000
 80065dc:	08007b6d 	.word	0x08007b6d
 80065e0:	433fffff 	.word	0x433fffff
 80065e4:	3fefffff 	.word	0x3fefffff
 80065e8:	3ff00000 	.word	0x3ff00000
 80065ec:	3fe00000 	.word	0x3fe00000
 80065f0:	41e00000 	.word	0x41e00000
 80065f4:	3feffffe 	.word	0x3feffffe
 80065f8:	2200      	movs	r2, #0
 80065fa:	4b63      	ldr	r3, [pc, #396]	; (8006788 <__ieee754_pow+0x3b8>)
 80065fc:	f7f9 fe64 	bl	80002c8 <__aeabi_dsub>
 8006600:	a355      	add	r3, pc, #340	; (adr r3, 8006758 <__ieee754_pow+0x388>)
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	4604      	mov	r4, r0
 8006608:	460d      	mov	r5, r1
 800660a:	f7fa f815 	bl	8000638 <__aeabi_dmul>
 800660e:	a354      	add	r3, pc, #336	; (adr r3, 8006760 <__ieee754_pow+0x390>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	4606      	mov	r6, r0
 8006616:	460f      	mov	r7, r1
 8006618:	4620      	mov	r0, r4
 800661a:	4629      	mov	r1, r5
 800661c:	f7fa f80c 	bl	8000638 <__aeabi_dmul>
 8006620:	2200      	movs	r2, #0
 8006622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006626:	4b59      	ldr	r3, [pc, #356]	; (800678c <__ieee754_pow+0x3bc>)
 8006628:	4620      	mov	r0, r4
 800662a:	4629      	mov	r1, r5
 800662c:	f7fa f804 	bl	8000638 <__aeabi_dmul>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	a14c      	add	r1, pc, #304	; (adr r1, 8006768 <__ieee754_pow+0x398>)
 8006636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800663a:	f7f9 fe45 	bl	80002c8 <__aeabi_dsub>
 800663e:	4622      	mov	r2, r4
 8006640:	462b      	mov	r3, r5
 8006642:	f7f9 fff9 	bl	8000638 <__aeabi_dmul>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	2000      	movs	r0, #0
 800664c:	4950      	ldr	r1, [pc, #320]	; (8006790 <__ieee754_pow+0x3c0>)
 800664e:	f7f9 fe3b 	bl	80002c8 <__aeabi_dsub>
 8006652:	4622      	mov	r2, r4
 8006654:	462b      	mov	r3, r5
 8006656:	4680      	mov	r8, r0
 8006658:	4689      	mov	r9, r1
 800665a:	4620      	mov	r0, r4
 800665c:	4629      	mov	r1, r5
 800665e:	f7f9 ffeb 	bl	8000638 <__aeabi_dmul>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4640      	mov	r0, r8
 8006668:	4649      	mov	r1, r9
 800666a:	f7f9 ffe5 	bl	8000638 <__aeabi_dmul>
 800666e:	a340      	add	r3, pc, #256	; (adr r3, 8006770 <__ieee754_pow+0x3a0>)
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f7f9 ffe0 	bl	8000638 <__aeabi_dmul>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006680:	f7f9 fe22 	bl	80002c8 <__aeabi_dsub>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4604      	mov	r4, r0
 800668a:	460d      	mov	r5, r1
 800668c:	4630      	mov	r0, r6
 800668e:	4639      	mov	r1, r7
 8006690:	f7f9 fe1c 	bl	80002cc <__adddf3>
 8006694:	2000      	movs	r0, #0
 8006696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800669a:	4632      	mov	r2, r6
 800669c:	463b      	mov	r3, r7
 800669e:	f7f9 fe13 	bl	80002c8 <__aeabi_dsub>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7f9 fe0d 	bl	80002c8 <__aeabi_dsub>
 80066ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066b0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80066b4:	4313      	orrs	r3, r2
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	f040 81eb 	bne.w	8006a94 <__ieee754_pow+0x6c4>
 80066be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006778 <__ieee754_pow+0x3a8>
 80066c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80066c6:	2400      	movs	r4, #0
 80066c8:	4622      	mov	r2, r4
 80066ca:	462b      	mov	r3, r5
 80066cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80066d4:	f7f9 fdf8 	bl	80002c8 <__aeabi_dsub>
 80066d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066dc:	f7f9 ffac 	bl	8000638 <__aeabi_dmul>
 80066e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066e4:	4680      	mov	r8, r0
 80066e6:	4689      	mov	r9, r1
 80066e8:	4630      	mov	r0, r6
 80066ea:	4639      	mov	r1, r7
 80066ec:	f7f9 ffa4 	bl	8000638 <__aeabi_dmul>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4640      	mov	r0, r8
 80066f6:	4649      	mov	r1, r9
 80066f8:	f7f9 fde8 	bl	80002cc <__adddf3>
 80066fc:	4622      	mov	r2, r4
 80066fe:	462b      	mov	r3, r5
 8006700:	4680      	mov	r8, r0
 8006702:	4689      	mov	r9, r1
 8006704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006708:	f7f9 ff96 	bl	8000638 <__aeabi_dmul>
 800670c:	460b      	mov	r3, r1
 800670e:	4604      	mov	r4, r0
 8006710:	460d      	mov	r5, r1
 8006712:	4602      	mov	r2, r0
 8006714:	4649      	mov	r1, r9
 8006716:	4640      	mov	r0, r8
 8006718:	e9cd 4500 	strd	r4, r5, [sp]
 800671c:	f7f9 fdd6 	bl	80002cc <__adddf3>
 8006720:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <__ieee754_pow+0x3c4>)
 8006722:	4299      	cmp	r1, r3
 8006724:	4606      	mov	r6, r0
 8006726:	460f      	mov	r7, r1
 8006728:	468b      	mov	fp, r1
 800672a:	f340 82f7 	ble.w	8006d1c <__ieee754_pow+0x94c>
 800672e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006732:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006736:	4303      	orrs	r3, r0
 8006738:	f000 81ea 	beq.w	8006b10 <__ieee754_pow+0x740>
 800673c:	a310      	add	r3, pc, #64	; (adr r3, 8006780 <__ieee754_pow+0x3b0>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006746:	f7f9 ff77 	bl	8000638 <__aeabi_dmul>
 800674a:	a30d      	add	r3, pc, #52	; (adr r3, 8006780 <__ieee754_pow+0x3b0>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	e6d5      	b.n	80064fe <__ieee754_pow+0x12e>
 8006752:	bf00      	nop
 8006754:	f3af 8000 	nop.w
 8006758:	60000000 	.word	0x60000000
 800675c:	3ff71547 	.word	0x3ff71547
 8006760:	f85ddf44 	.word	0xf85ddf44
 8006764:	3e54ae0b 	.word	0x3e54ae0b
 8006768:	55555555 	.word	0x55555555
 800676c:	3fd55555 	.word	0x3fd55555
 8006770:	652b82fe 	.word	0x652b82fe
 8006774:	3ff71547 	.word	0x3ff71547
 8006778:	00000000 	.word	0x00000000
 800677c:	bff00000 	.word	0xbff00000
 8006780:	8800759c 	.word	0x8800759c
 8006784:	7e37e43c 	.word	0x7e37e43c
 8006788:	3ff00000 	.word	0x3ff00000
 800678c:	3fd00000 	.word	0x3fd00000
 8006790:	3fe00000 	.word	0x3fe00000
 8006794:	408fffff 	.word	0x408fffff
 8006798:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	da05      	bge.n	80067ae <__ieee754_pow+0x3de>
 80067a2:	4bd3      	ldr	r3, [pc, #844]	; (8006af0 <__ieee754_pow+0x720>)
 80067a4:	f7f9 ff48 	bl	8000638 <__aeabi_dmul>
 80067a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80067ac:	460c      	mov	r4, r1
 80067ae:	1523      	asrs	r3, r4, #20
 80067b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80067b4:	4413      	add	r3, r2
 80067b6:	9309      	str	r3, [sp, #36]	; 0x24
 80067b8:	4bce      	ldr	r3, [pc, #824]	; (8006af4 <__ieee754_pow+0x724>)
 80067ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80067be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80067c2:	429c      	cmp	r4, r3
 80067c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80067c8:	dd08      	ble.n	80067dc <__ieee754_pow+0x40c>
 80067ca:	4bcb      	ldr	r3, [pc, #812]	; (8006af8 <__ieee754_pow+0x728>)
 80067cc:	429c      	cmp	r4, r3
 80067ce:	f340 815e 	ble.w	8006a8e <__ieee754_pow+0x6be>
 80067d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d4:	3301      	adds	r3, #1
 80067d6:	9309      	str	r3, [sp, #36]	; 0x24
 80067d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80067dc:	f04f 0a00 	mov.w	sl, #0
 80067e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80067e4:	930c      	str	r3, [sp, #48]	; 0x30
 80067e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067e8:	4bc4      	ldr	r3, [pc, #784]	; (8006afc <__ieee754_pow+0x72c>)
 80067ea:	4413      	add	r3, r2
 80067ec:	ed93 7b00 	vldr	d7, [r3]
 80067f0:	4629      	mov	r1, r5
 80067f2:	ec53 2b17 	vmov	r2, r3, d7
 80067f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80067fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067fe:	f7f9 fd63 	bl	80002c8 <__aeabi_dsub>
 8006802:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006806:	4606      	mov	r6, r0
 8006808:	460f      	mov	r7, r1
 800680a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800680e:	f7f9 fd5d 	bl	80002cc <__adddf3>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	2000      	movs	r0, #0
 8006818:	49b9      	ldr	r1, [pc, #740]	; (8006b00 <__ieee754_pow+0x730>)
 800681a:	f7fa f837 	bl	800088c <__aeabi_ddiv>
 800681e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7f9 ff05 	bl	8000638 <__aeabi_dmul>
 800682e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006832:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006836:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800683a:	2300      	movs	r3, #0
 800683c:	9302      	str	r3, [sp, #8]
 800683e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006842:	106d      	asrs	r5, r5, #1
 8006844:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006848:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800684c:	2200      	movs	r2, #0
 800684e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8006852:	4640      	mov	r0, r8
 8006854:	4649      	mov	r1, r9
 8006856:	4614      	mov	r4, r2
 8006858:	461d      	mov	r5, r3
 800685a:	f7f9 feed 	bl	8000638 <__aeabi_dmul>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7f9 fd2f 	bl	80002c8 <__aeabi_dsub>
 800686a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800686e:	4606      	mov	r6, r0
 8006870:	460f      	mov	r7, r1
 8006872:	4620      	mov	r0, r4
 8006874:	4629      	mov	r1, r5
 8006876:	f7f9 fd27 	bl	80002c8 <__aeabi_dsub>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006882:	f7f9 fd21 	bl	80002c8 <__aeabi_dsub>
 8006886:	4642      	mov	r2, r8
 8006888:	464b      	mov	r3, r9
 800688a:	f7f9 fed5 	bl	8000638 <__aeabi_dmul>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	f7f9 fd17 	bl	80002c8 <__aeabi_dsub>
 800689a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800689e:	f7f9 fecb 	bl	8000638 <__aeabi_dmul>
 80068a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	f7f9 fec3 	bl	8000638 <__aeabi_dmul>
 80068b2:	a37b      	add	r3, pc, #492	; (adr r3, 8006aa0 <__ieee754_pow+0x6d0>)
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	4604      	mov	r4, r0
 80068ba:	460d      	mov	r5, r1
 80068bc:	f7f9 febc 	bl	8000638 <__aeabi_dmul>
 80068c0:	a379      	add	r3, pc, #484	; (adr r3, 8006aa8 <__ieee754_pow+0x6d8>)
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	f7f9 fd01 	bl	80002cc <__adddf3>
 80068ca:	4622      	mov	r2, r4
 80068cc:	462b      	mov	r3, r5
 80068ce:	f7f9 feb3 	bl	8000638 <__aeabi_dmul>
 80068d2:	a377      	add	r3, pc, #476	; (adr r3, 8006ab0 <__ieee754_pow+0x6e0>)
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	f7f9 fcf8 	bl	80002cc <__adddf3>
 80068dc:	4622      	mov	r2, r4
 80068de:	462b      	mov	r3, r5
 80068e0:	f7f9 feaa 	bl	8000638 <__aeabi_dmul>
 80068e4:	a374      	add	r3, pc, #464	; (adr r3, 8006ab8 <__ieee754_pow+0x6e8>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f7f9 fcef 	bl	80002cc <__adddf3>
 80068ee:	4622      	mov	r2, r4
 80068f0:	462b      	mov	r3, r5
 80068f2:	f7f9 fea1 	bl	8000638 <__aeabi_dmul>
 80068f6:	a372      	add	r3, pc, #456	; (adr r3, 8006ac0 <__ieee754_pow+0x6f0>)
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	f7f9 fce6 	bl	80002cc <__adddf3>
 8006900:	4622      	mov	r2, r4
 8006902:	462b      	mov	r3, r5
 8006904:	f7f9 fe98 	bl	8000638 <__aeabi_dmul>
 8006908:	a36f      	add	r3, pc, #444	; (adr r3, 8006ac8 <__ieee754_pow+0x6f8>)
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f7f9 fcdd 	bl	80002cc <__adddf3>
 8006912:	4622      	mov	r2, r4
 8006914:	4606      	mov	r6, r0
 8006916:	460f      	mov	r7, r1
 8006918:	462b      	mov	r3, r5
 800691a:	4620      	mov	r0, r4
 800691c:	4629      	mov	r1, r5
 800691e:	f7f9 fe8b 	bl	8000638 <__aeabi_dmul>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 fe85 	bl	8000638 <__aeabi_dmul>
 800692e:	4642      	mov	r2, r8
 8006930:	4604      	mov	r4, r0
 8006932:	460d      	mov	r5, r1
 8006934:	464b      	mov	r3, r9
 8006936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800693a:	f7f9 fcc7 	bl	80002cc <__adddf3>
 800693e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006942:	f7f9 fe79 	bl	8000638 <__aeabi_dmul>
 8006946:	4622      	mov	r2, r4
 8006948:	462b      	mov	r3, r5
 800694a:	f7f9 fcbf 	bl	80002cc <__adddf3>
 800694e:	4642      	mov	r2, r8
 8006950:	4606      	mov	r6, r0
 8006952:	460f      	mov	r7, r1
 8006954:	464b      	mov	r3, r9
 8006956:	4640      	mov	r0, r8
 8006958:	4649      	mov	r1, r9
 800695a:	f7f9 fe6d 	bl	8000638 <__aeabi_dmul>
 800695e:	2200      	movs	r2, #0
 8006960:	4b68      	ldr	r3, [pc, #416]	; (8006b04 <__ieee754_pow+0x734>)
 8006962:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006966:	f7f9 fcb1 	bl	80002cc <__adddf3>
 800696a:	4632      	mov	r2, r6
 800696c:	463b      	mov	r3, r7
 800696e:	f7f9 fcad 	bl	80002cc <__adddf3>
 8006972:	9802      	ldr	r0, [sp, #8]
 8006974:	460d      	mov	r5, r1
 8006976:	4604      	mov	r4, r0
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4640      	mov	r0, r8
 800697e:	4649      	mov	r1, r9
 8006980:	f7f9 fe5a 	bl	8000638 <__aeabi_dmul>
 8006984:	2200      	movs	r2, #0
 8006986:	4680      	mov	r8, r0
 8006988:	4689      	mov	r9, r1
 800698a:	4b5e      	ldr	r3, [pc, #376]	; (8006b04 <__ieee754_pow+0x734>)
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fc9a 	bl	80002c8 <__aeabi_dsub>
 8006994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006998:	f7f9 fc96 	bl	80002c8 <__aeabi_dsub>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7f9 fc90 	bl	80002c8 <__aeabi_dsub>
 80069a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ac:	f7f9 fe44 	bl	8000638 <__aeabi_dmul>
 80069b0:	4622      	mov	r2, r4
 80069b2:	4606      	mov	r6, r0
 80069b4:	460f      	mov	r7, r1
 80069b6:	462b      	mov	r3, r5
 80069b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069bc:	f7f9 fe3c 	bl	8000638 <__aeabi_dmul>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fc80 	bl	80002cc <__adddf3>
 80069cc:	4606      	mov	r6, r0
 80069ce:	460f      	mov	r7, r1
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4640      	mov	r0, r8
 80069d6:	4649      	mov	r1, r9
 80069d8:	f7f9 fc78 	bl	80002cc <__adddf3>
 80069dc:	9802      	ldr	r0, [sp, #8]
 80069de:	a33c      	add	r3, pc, #240	; (adr r3, 8006ad0 <__ieee754_pow+0x700>)
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	f7f9 fe26 	bl	8000638 <__aeabi_dmul>
 80069ec:	4642      	mov	r2, r8
 80069ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069f2:	464b      	mov	r3, r9
 80069f4:	4620      	mov	r0, r4
 80069f6:	4629      	mov	r1, r5
 80069f8:	f7f9 fc66 	bl	80002c8 <__aeabi_dsub>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	f7f9 fc60 	bl	80002c8 <__aeabi_dsub>
 8006a08:	a333      	add	r3, pc, #204	; (adr r3, 8006ad8 <__ieee754_pow+0x708>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fe13 	bl	8000638 <__aeabi_dmul>
 8006a12:	a333      	add	r3, pc, #204	; (adr r3, 8006ae0 <__ieee754_pow+0x710>)
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	4606      	mov	r6, r0
 8006a1a:	460f      	mov	r7, r1
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4629      	mov	r1, r5
 8006a20:	f7f9 fe0a 	bl	8000638 <__aeabi_dmul>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4630      	mov	r0, r6
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	f7f9 fc4e 	bl	80002cc <__adddf3>
 8006a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a32:	4b35      	ldr	r3, [pc, #212]	; (8006b08 <__ieee754_pow+0x738>)
 8006a34:	4413      	add	r3, r2
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f7f9 fc47 	bl	80002cc <__adddf3>
 8006a3e:	4604      	mov	r4, r0
 8006a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a42:	460d      	mov	r5, r1
 8006a44:	f7f9 fd8e 	bl	8000564 <__aeabi_i2d>
 8006a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a4a:	4b30      	ldr	r3, [pc, #192]	; (8006b0c <__ieee754_pow+0x73c>)
 8006a4c:	4413      	add	r3, r2
 8006a4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a52:	4606      	mov	r6, r0
 8006a54:	460f      	mov	r7, r1
 8006a56:	4622      	mov	r2, r4
 8006a58:	462b      	mov	r3, r5
 8006a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a5e:	f7f9 fc35 	bl	80002cc <__adddf3>
 8006a62:	4642      	mov	r2, r8
 8006a64:	464b      	mov	r3, r9
 8006a66:	f7f9 fc31 	bl	80002cc <__adddf3>
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	f7f9 fc2d 	bl	80002cc <__adddf3>
 8006a72:	9802      	ldr	r0, [sp, #8]
 8006a74:	4632      	mov	r2, r6
 8006a76:	463b      	mov	r3, r7
 8006a78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a7c:	f7f9 fc24 	bl	80002c8 <__aeabi_dsub>
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	f7f9 fc20 	bl	80002c8 <__aeabi_dsub>
 8006a88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a8c:	e607      	b.n	800669e <__ieee754_pow+0x2ce>
 8006a8e:	f04f 0a01 	mov.w	sl, #1
 8006a92:	e6a5      	b.n	80067e0 <__ieee754_pow+0x410>
 8006a94:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006ae8 <__ieee754_pow+0x718>
 8006a98:	e613      	b.n	80066c2 <__ieee754_pow+0x2f2>
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w
 8006aa0:	4a454eef 	.word	0x4a454eef
 8006aa4:	3fca7e28 	.word	0x3fca7e28
 8006aa8:	93c9db65 	.word	0x93c9db65
 8006aac:	3fcd864a 	.word	0x3fcd864a
 8006ab0:	a91d4101 	.word	0xa91d4101
 8006ab4:	3fd17460 	.word	0x3fd17460
 8006ab8:	518f264d 	.word	0x518f264d
 8006abc:	3fd55555 	.word	0x3fd55555
 8006ac0:	db6fabff 	.word	0xdb6fabff
 8006ac4:	3fdb6db6 	.word	0x3fdb6db6
 8006ac8:	33333303 	.word	0x33333303
 8006acc:	3fe33333 	.word	0x3fe33333
 8006ad0:	e0000000 	.word	0xe0000000
 8006ad4:	3feec709 	.word	0x3feec709
 8006ad8:	dc3a03fd 	.word	0xdc3a03fd
 8006adc:	3feec709 	.word	0x3feec709
 8006ae0:	145b01f5 	.word	0x145b01f5
 8006ae4:	be3e2fe0 	.word	0xbe3e2fe0
 8006ae8:	00000000 	.word	0x00000000
 8006aec:	3ff00000 	.word	0x3ff00000
 8006af0:	43400000 	.word	0x43400000
 8006af4:	0003988e 	.word	0x0003988e
 8006af8:	000bb679 	.word	0x000bb679
 8006afc:	08007ba0 	.word	0x08007ba0
 8006b00:	3ff00000 	.word	0x3ff00000
 8006b04:	40080000 	.word	0x40080000
 8006b08:	08007bc0 	.word	0x08007bc0
 8006b0c:	08007bb0 	.word	0x08007bb0
 8006b10:	a3b4      	add	r3, pc, #720	; (adr r3, 8006de4 <__ieee754_pow+0xa14>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	4640      	mov	r0, r8
 8006b18:	4649      	mov	r1, r9
 8006b1a:	f7f9 fbd7 	bl	80002cc <__adddf3>
 8006b1e:	4622      	mov	r2, r4
 8006b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b24:	462b      	mov	r3, r5
 8006b26:	4630      	mov	r0, r6
 8006b28:	4639      	mov	r1, r7
 8006b2a:	f7f9 fbcd 	bl	80002c8 <__aeabi_dsub>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b36:	f7fa f80f 	bl	8000b58 <__aeabi_dcmpgt>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f47f adfe 	bne.w	800673c <__ieee754_pow+0x36c>
 8006b40:	4aa3      	ldr	r2, [pc, #652]	; (8006dd0 <__ieee754_pow+0xa00>)
 8006b42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b46:	4293      	cmp	r3, r2
 8006b48:	f340 810a 	ble.w	8006d60 <__ieee754_pow+0x990>
 8006b4c:	151b      	asrs	r3, r3, #20
 8006b4e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006b52:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006b56:	fa4a f303 	asr.w	r3, sl, r3
 8006b5a:	445b      	add	r3, fp
 8006b5c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006b60:	4e9c      	ldr	r6, [pc, #624]	; (8006dd4 <__ieee754_pow+0xa04>)
 8006b62:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006b66:	4116      	asrs	r6, r2
 8006b68:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	ea23 0106 	bic.w	r1, r3, r6
 8006b72:	f1c2 0214 	rsb	r2, r2, #20
 8006b76:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006b7a:	fa4a fa02 	asr.w	sl, sl, r2
 8006b7e:	f1bb 0f00 	cmp.w	fp, #0
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4620      	mov	r0, r4
 8006b88:	4629      	mov	r1, r5
 8006b8a:	bfb8      	it	lt
 8006b8c:	f1ca 0a00 	rsblt	sl, sl, #0
 8006b90:	f7f9 fb9a 	bl	80002c8 <__aeabi_dsub>
 8006b94:	e9cd 0100 	strd	r0, r1, [sp]
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ba0:	f7f9 fb94 	bl	80002cc <__adddf3>
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	a378      	add	r3, pc, #480	; (adr r3, 8006d88 <__ieee754_pow+0x9b8>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	4604      	mov	r4, r0
 8006bae:	460d      	mov	r5, r1
 8006bb0:	f7f9 fd42 	bl	8000638 <__aeabi_dmul>
 8006bb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bb8:	4606      	mov	r6, r0
 8006bba:	460f      	mov	r7, r1
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	f7f9 fb82 	bl	80002c8 <__aeabi_dsub>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4640      	mov	r0, r8
 8006bca:	4649      	mov	r1, r9
 8006bcc:	f7f9 fb7c 	bl	80002c8 <__aeabi_dsub>
 8006bd0:	a36f      	add	r3, pc, #444	; (adr r3, 8006d90 <__ieee754_pow+0x9c0>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fd2f 	bl	8000638 <__aeabi_dmul>
 8006bda:	a36f      	add	r3, pc, #444	; (adr r3, 8006d98 <__ieee754_pow+0x9c8>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	4680      	mov	r8, r0
 8006be2:	4689      	mov	r9, r1
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 fd26 	bl	8000638 <__aeabi_dmul>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	f7f9 fb6a 	bl	80002cc <__adddf3>
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 fb62 	bl	80002cc <__adddf3>
 8006c08:	4632      	mov	r2, r6
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	4689      	mov	r9, r1
 8006c10:	f7f9 fb5a 	bl	80002c8 <__aeabi_dsub>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4620      	mov	r0, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f7f9 fb54 	bl	80002c8 <__aeabi_dsub>
 8006c20:	4642      	mov	r2, r8
 8006c22:	4606      	mov	r6, r0
 8006c24:	460f      	mov	r7, r1
 8006c26:	464b      	mov	r3, r9
 8006c28:	4640      	mov	r0, r8
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	f7f9 fd04 	bl	8000638 <__aeabi_dmul>
 8006c30:	a35b      	add	r3, pc, #364	; (adr r3, 8006da0 <__ieee754_pow+0x9d0>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	4604      	mov	r4, r0
 8006c38:	460d      	mov	r5, r1
 8006c3a:	f7f9 fcfd 	bl	8000638 <__aeabi_dmul>
 8006c3e:	a35a      	add	r3, pc, #360	; (adr r3, 8006da8 <__ieee754_pow+0x9d8>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f7f9 fb40 	bl	80002c8 <__aeabi_dsub>
 8006c48:	4622      	mov	r2, r4
 8006c4a:	462b      	mov	r3, r5
 8006c4c:	f7f9 fcf4 	bl	8000638 <__aeabi_dmul>
 8006c50:	a357      	add	r3, pc, #348	; (adr r3, 8006db0 <__ieee754_pow+0x9e0>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f7f9 fb39 	bl	80002cc <__adddf3>
 8006c5a:	4622      	mov	r2, r4
 8006c5c:	462b      	mov	r3, r5
 8006c5e:	f7f9 fceb 	bl	8000638 <__aeabi_dmul>
 8006c62:	a355      	add	r3, pc, #340	; (adr r3, 8006db8 <__ieee754_pow+0x9e8>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f7f9 fb2e 	bl	80002c8 <__aeabi_dsub>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	462b      	mov	r3, r5
 8006c70:	f7f9 fce2 	bl	8000638 <__aeabi_dmul>
 8006c74:	a352      	add	r3, pc, #328	; (adr r3, 8006dc0 <__ieee754_pow+0x9f0>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f7f9 fb27 	bl	80002cc <__adddf3>
 8006c7e:	4622      	mov	r2, r4
 8006c80:	462b      	mov	r3, r5
 8006c82:	f7f9 fcd9 	bl	8000638 <__aeabi_dmul>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	f7f9 fb1b 	bl	80002c8 <__aeabi_dsub>
 8006c92:	4604      	mov	r4, r0
 8006c94:	460d      	mov	r5, r1
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f7f9 fccb 	bl	8000638 <__aeabi_dmul>
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	e9cd 0100 	strd	r0, r1, [sp]
 8006ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cac:	4620      	mov	r0, r4
 8006cae:	4629      	mov	r1, r5
 8006cb0:	f7f9 fb0a 	bl	80002c8 <__aeabi_dsub>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cbc:	f7f9 fde6 	bl	800088c <__aeabi_ddiv>
 8006cc0:	4632      	mov	r2, r6
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	460d      	mov	r5, r1
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	4640      	mov	r0, r8
 8006cca:	4649      	mov	r1, r9
 8006ccc:	f7f9 fcb4 	bl	8000638 <__aeabi_dmul>
 8006cd0:	4632      	mov	r2, r6
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	f7f9 fafa 	bl	80002cc <__adddf3>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4620      	mov	r0, r4
 8006cde:	4629      	mov	r1, r5
 8006ce0:	f7f9 faf2 	bl	80002c8 <__aeabi_dsub>
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	f7f9 faee 	bl	80002c8 <__aeabi_dsub>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	4939      	ldr	r1, [pc, #228]	; (8006dd8 <__ieee754_pow+0xa08>)
 8006cf4:	f7f9 fae8 	bl	80002c8 <__aeabi_dsub>
 8006cf8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006cfc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	da2f      	bge.n	8006d66 <__ieee754_pow+0x996>
 8006d06:	4650      	mov	r0, sl
 8006d08:	ec43 2b10 	vmov	d0, r2, r3
 8006d0c:	f000 f9c0 	bl	8007090 <scalbn>
 8006d10:	ec51 0b10 	vmov	r0, r1, d0
 8006d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d18:	f7ff bbf1 	b.w	80064fe <__ieee754_pow+0x12e>
 8006d1c:	4b2f      	ldr	r3, [pc, #188]	; (8006ddc <__ieee754_pow+0xa0c>)
 8006d1e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006d22:	429e      	cmp	r6, r3
 8006d24:	f77f af0c 	ble.w	8006b40 <__ieee754_pow+0x770>
 8006d28:	4b2d      	ldr	r3, [pc, #180]	; (8006de0 <__ieee754_pow+0xa10>)
 8006d2a:	440b      	add	r3, r1
 8006d2c:	4303      	orrs	r3, r0
 8006d2e:	d00b      	beq.n	8006d48 <__ieee754_pow+0x978>
 8006d30:	a325      	add	r3, pc, #148	; (adr r3, 8006dc8 <__ieee754_pow+0x9f8>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d3a:	f7f9 fc7d 	bl	8000638 <__aeabi_dmul>
 8006d3e:	a322      	add	r3, pc, #136	; (adr r3, 8006dc8 <__ieee754_pow+0x9f8>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	f7ff bbdb 	b.w	80064fe <__ieee754_pow+0x12e>
 8006d48:	4622      	mov	r2, r4
 8006d4a:	462b      	mov	r3, r5
 8006d4c:	f7f9 fabc 	bl	80002c8 <__aeabi_dsub>
 8006d50:	4642      	mov	r2, r8
 8006d52:	464b      	mov	r3, r9
 8006d54:	f7f9 fef6 	bl	8000b44 <__aeabi_dcmpge>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f43f aef1 	beq.w	8006b40 <__ieee754_pow+0x770>
 8006d5e:	e7e7      	b.n	8006d30 <__ieee754_pow+0x960>
 8006d60:	f04f 0a00 	mov.w	sl, #0
 8006d64:	e718      	b.n	8006b98 <__ieee754_pow+0x7c8>
 8006d66:	4621      	mov	r1, r4
 8006d68:	e7d4      	b.n	8006d14 <__ieee754_pow+0x944>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	491a      	ldr	r1, [pc, #104]	; (8006dd8 <__ieee754_pow+0xa08>)
 8006d6e:	f7ff bb8f 	b.w	8006490 <__ieee754_pow+0xc0>
 8006d72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006d76:	f7ff bb8b 	b.w	8006490 <__ieee754_pow+0xc0>
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	f7ff bb87 	b.w	8006490 <__ieee754_pow+0xc0>
 8006d82:	4693      	mov	fp, r2
 8006d84:	f7ff bb98 	b.w	80064b8 <__ieee754_pow+0xe8>
 8006d88:	00000000 	.word	0x00000000
 8006d8c:	3fe62e43 	.word	0x3fe62e43
 8006d90:	fefa39ef 	.word	0xfefa39ef
 8006d94:	3fe62e42 	.word	0x3fe62e42
 8006d98:	0ca86c39 	.word	0x0ca86c39
 8006d9c:	be205c61 	.word	0xbe205c61
 8006da0:	72bea4d0 	.word	0x72bea4d0
 8006da4:	3e663769 	.word	0x3e663769
 8006da8:	c5d26bf1 	.word	0xc5d26bf1
 8006dac:	3ebbbd41 	.word	0x3ebbbd41
 8006db0:	af25de2c 	.word	0xaf25de2c
 8006db4:	3f11566a 	.word	0x3f11566a
 8006db8:	16bebd93 	.word	0x16bebd93
 8006dbc:	3f66c16c 	.word	0x3f66c16c
 8006dc0:	5555553e 	.word	0x5555553e
 8006dc4:	3fc55555 	.word	0x3fc55555
 8006dc8:	c2f8f359 	.word	0xc2f8f359
 8006dcc:	01a56e1f 	.word	0x01a56e1f
 8006dd0:	3fe00000 	.word	0x3fe00000
 8006dd4:	000fffff 	.word	0x000fffff
 8006dd8:	3ff00000 	.word	0x3ff00000
 8006ddc:	4090cbff 	.word	0x4090cbff
 8006de0:	3f6f3400 	.word	0x3f6f3400
 8006de4:	652b82fe 	.word	0x652b82fe
 8006de8:	3c971547 	.word	0x3c971547

08006dec <__ieee754_sqrt>:
 8006dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df0:	4955      	ldr	r1, [pc, #340]	; (8006f48 <__ieee754_sqrt+0x15c>)
 8006df2:	ec55 4b10 	vmov	r4, r5, d0
 8006df6:	43a9      	bics	r1, r5
 8006df8:	462b      	mov	r3, r5
 8006dfa:	462a      	mov	r2, r5
 8006dfc:	d112      	bne.n	8006e24 <__ieee754_sqrt+0x38>
 8006dfe:	ee10 2a10 	vmov	r2, s0
 8006e02:	ee10 0a10 	vmov	r0, s0
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fc16 	bl	8000638 <__aeabi_dmul>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4620      	mov	r0, r4
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7f9 fa5a 	bl	80002cc <__adddf3>
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	ec45 4b10 	vmov	d0, r4, r5
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	ee10 0a10 	vmov	r0, s0
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	dc0f      	bgt.n	8006e4e <__ieee754_sqrt+0x62>
 8006e2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006e32:	4330      	orrs	r0, r6
 8006e34:	d0f2      	beq.n	8006e1c <__ieee754_sqrt+0x30>
 8006e36:	b155      	cbz	r5, 8006e4e <__ieee754_sqrt+0x62>
 8006e38:	ee10 2a10 	vmov	r2, s0
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	f7f9 fa42 	bl	80002c8 <__aeabi_dsub>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	f7f9 fd20 	bl	800088c <__aeabi_ddiv>
 8006e4c:	e7e4      	b.n	8006e18 <__ieee754_sqrt+0x2c>
 8006e4e:	151b      	asrs	r3, r3, #20
 8006e50:	d073      	beq.n	8006f3a <__ieee754_sqrt+0x14e>
 8006e52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006e56:	07dd      	lsls	r5, r3, #31
 8006e58:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006e5c:	bf48      	it	mi
 8006e5e:	0fc8      	lsrmi	r0, r1, #31
 8006e60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006e64:	bf44      	itt	mi
 8006e66:	0049      	lslmi	r1, r1, #1
 8006e68:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006e6c:	2500      	movs	r5, #0
 8006e6e:	1058      	asrs	r0, r3, #1
 8006e70:	0fcb      	lsrs	r3, r1, #31
 8006e72:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006e76:	0049      	lsls	r1, r1, #1
 8006e78:	2316      	movs	r3, #22
 8006e7a:	462c      	mov	r4, r5
 8006e7c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006e80:	19a7      	adds	r7, r4, r6
 8006e82:	4297      	cmp	r7, r2
 8006e84:	bfde      	ittt	le
 8006e86:	19bc      	addle	r4, r7, r6
 8006e88:	1bd2      	suble	r2, r2, r7
 8006e8a:	19ad      	addle	r5, r5, r6
 8006e8c:	0fcf      	lsrs	r7, r1, #31
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006e94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006e98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006e9c:	d1f0      	bne.n	8006e80 <__ieee754_sqrt+0x94>
 8006e9e:	f04f 0c20 	mov.w	ip, #32
 8006ea2:	469e      	mov	lr, r3
 8006ea4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006ea8:	42a2      	cmp	r2, r4
 8006eaa:	eb06 070e 	add.w	r7, r6, lr
 8006eae:	dc02      	bgt.n	8006eb6 <__ieee754_sqrt+0xca>
 8006eb0:	d112      	bne.n	8006ed8 <__ieee754_sqrt+0xec>
 8006eb2:	428f      	cmp	r7, r1
 8006eb4:	d810      	bhi.n	8006ed8 <__ieee754_sqrt+0xec>
 8006eb6:	2f00      	cmp	r7, #0
 8006eb8:	eb07 0e06 	add.w	lr, r7, r6
 8006ebc:	da42      	bge.n	8006f44 <__ieee754_sqrt+0x158>
 8006ebe:	f1be 0f00 	cmp.w	lr, #0
 8006ec2:	db3f      	blt.n	8006f44 <__ieee754_sqrt+0x158>
 8006ec4:	f104 0801 	add.w	r8, r4, #1
 8006ec8:	1b12      	subs	r2, r2, r4
 8006eca:	428f      	cmp	r7, r1
 8006ecc:	bf88      	it	hi
 8006ece:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8006ed2:	1bc9      	subs	r1, r1, r7
 8006ed4:	4433      	add	r3, r6
 8006ed6:	4644      	mov	r4, r8
 8006ed8:	0052      	lsls	r2, r2, #1
 8006eda:	f1bc 0c01 	subs.w	ip, ip, #1
 8006ede:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006ee2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006ee6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006eea:	d1dd      	bne.n	8006ea8 <__ieee754_sqrt+0xbc>
 8006eec:	430a      	orrs	r2, r1
 8006eee:	d006      	beq.n	8006efe <__ieee754_sqrt+0x112>
 8006ef0:	1c5c      	adds	r4, r3, #1
 8006ef2:	bf13      	iteet	ne
 8006ef4:	3301      	addne	r3, #1
 8006ef6:	3501      	addeq	r5, #1
 8006ef8:	4663      	moveq	r3, ip
 8006efa:	f023 0301 	bicne.w	r3, r3, #1
 8006efe:	106a      	asrs	r2, r5, #1
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	07e9      	lsls	r1, r5, #31
 8006f04:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006f08:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006f0c:	bf48      	it	mi
 8006f0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006f12:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006f16:	461c      	mov	r4, r3
 8006f18:	e780      	b.n	8006e1c <__ieee754_sqrt+0x30>
 8006f1a:	0aca      	lsrs	r2, r1, #11
 8006f1c:	3815      	subs	r0, #21
 8006f1e:	0549      	lsls	r1, r1, #21
 8006f20:	2a00      	cmp	r2, #0
 8006f22:	d0fa      	beq.n	8006f1a <__ieee754_sqrt+0x12e>
 8006f24:	02d6      	lsls	r6, r2, #11
 8006f26:	d50a      	bpl.n	8006f3e <__ieee754_sqrt+0x152>
 8006f28:	f1c3 0420 	rsb	r4, r3, #32
 8006f2c:	fa21 f404 	lsr.w	r4, r1, r4
 8006f30:	1e5d      	subs	r5, r3, #1
 8006f32:	4099      	lsls	r1, r3
 8006f34:	4322      	orrs	r2, r4
 8006f36:	1b43      	subs	r3, r0, r5
 8006f38:	e78b      	b.n	8006e52 <__ieee754_sqrt+0x66>
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	e7f0      	b.n	8006f20 <__ieee754_sqrt+0x134>
 8006f3e:	0052      	lsls	r2, r2, #1
 8006f40:	3301      	adds	r3, #1
 8006f42:	e7ef      	b.n	8006f24 <__ieee754_sqrt+0x138>
 8006f44:	46a0      	mov	r8, r4
 8006f46:	e7bf      	b.n	8006ec8 <__ieee754_sqrt+0xdc>
 8006f48:	7ff00000 	.word	0x7ff00000

08006f4c <fabs>:
 8006f4c:	ec51 0b10 	vmov	r0, r1, d0
 8006f50:	ee10 2a10 	vmov	r2, s0
 8006f54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f58:	ec43 2b10 	vmov	d0, r2, r3
 8006f5c:	4770      	bx	lr

08006f5e <finite>:
 8006f5e:	ee10 3a90 	vmov	r3, s1
 8006f62:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8006f66:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006f6a:	0fc0      	lsrs	r0, r0, #31
 8006f6c:	4770      	bx	lr

08006f6e <matherr>:
 8006f6e:	2000      	movs	r0, #0
 8006f70:	4770      	bx	lr
 8006f72:	0000      	movs	r0, r0
 8006f74:	0000      	movs	r0, r0
	...

08006f78 <nan>:
 8006f78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006f80 <nan+0x8>
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	00000000 	.word	0x00000000
 8006f84:	7ff80000 	.word	0x7ff80000

08006f88 <rint>:
 8006f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f8a:	ec51 0b10 	vmov	r0, r1, d0
 8006f8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006f92:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006f96:	2e13      	cmp	r6, #19
 8006f98:	460b      	mov	r3, r1
 8006f9a:	ee10 4a10 	vmov	r4, s0
 8006f9e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006fa2:	dc56      	bgt.n	8007052 <rint+0xca>
 8006fa4:	2e00      	cmp	r6, #0
 8006fa6:	da2b      	bge.n	8007000 <rint+0x78>
 8006fa8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006fac:	4302      	orrs	r2, r0
 8006fae:	d023      	beq.n	8006ff8 <rint+0x70>
 8006fb0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006fb4:	4302      	orrs	r2, r0
 8006fb6:	4254      	negs	r4, r2
 8006fb8:	4314      	orrs	r4, r2
 8006fba:	0c4b      	lsrs	r3, r1, #17
 8006fbc:	0b24      	lsrs	r4, r4, #12
 8006fbe:	045b      	lsls	r3, r3, #17
 8006fc0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006fc4:	ea44 0103 	orr.w	r1, r4, r3
 8006fc8:	460b      	mov	r3, r1
 8006fca:	492f      	ldr	r1, [pc, #188]	; (8007088 <rint+0x100>)
 8006fcc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8006fd0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7f9 f977 	bl	80002cc <__adddf3>
 8006fde:	e9cd 0100 	strd	r0, r1, [sp]
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fea:	f7f9 f96d 	bl	80002c8 <__aeabi_dsub>
 8006fee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ff2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	ec41 0b10 	vmov	d0, r0, r1
 8006ffc:	b003      	add	sp, #12
 8006ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007000:	4a22      	ldr	r2, [pc, #136]	; (800708c <rint+0x104>)
 8007002:	4132      	asrs	r2, r6
 8007004:	ea01 0702 	and.w	r7, r1, r2
 8007008:	4307      	orrs	r7, r0
 800700a:	d0f5      	beq.n	8006ff8 <rint+0x70>
 800700c:	0852      	lsrs	r2, r2, #1
 800700e:	4011      	ands	r1, r2
 8007010:	430c      	orrs	r4, r1
 8007012:	d00b      	beq.n	800702c <rint+0xa4>
 8007014:	ea23 0202 	bic.w	r2, r3, r2
 8007018:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800701c:	2e13      	cmp	r6, #19
 800701e:	fa43 f306 	asr.w	r3, r3, r6
 8007022:	bf0c      	ite	eq
 8007024:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007028:	2400      	movne	r4, #0
 800702a:	4313      	orrs	r3, r2
 800702c:	4916      	ldr	r1, [pc, #88]	; (8007088 <rint+0x100>)
 800702e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007032:	4622      	mov	r2, r4
 8007034:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007038:	4620      	mov	r0, r4
 800703a:	4629      	mov	r1, r5
 800703c:	f7f9 f946 	bl	80002cc <__adddf3>
 8007040:	e9cd 0100 	strd	r0, r1, [sp]
 8007044:	4622      	mov	r2, r4
 8007046:	462b      	mov	r3, r5
 8007048:	e9dd 0100 	ldrd	r0, r1, [sp]
 800704c:	f7f9 f93c 	bl	80002c8 <__aeabi_dsub>
 8007050:	e7d2      	b.n	8006ff8 <rint+0x70>
 8007052:	2e33      	cmp	r6, #51	; 0x33
 8007054:	dd07      	ble.n	8007066 <rint+0xde>
 8007056:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800705a:	d1cd      	bne.n	8006ff8 <rint+0x70>
 800705c:	ee10 2a10 	vmov	r2, s0
 8007060:	f7f9 f934 	bl	80002cc <__adddf3>
 8007064:	e7c8      	b.n	8006ff8 <rint+0x70>
 8007066:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800706a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800706e:	40f2      	lsrs	r2, r6
 8007070:	4210      	tst	r0, r2
 8007072:	d0c1      	beq.n	8006ff8 <rint+0x70>
 8007074:	0852      	lsrs	r2, r2, #1
 8007076:	4210      	tst	r0, r2
 8007078:	bf1f      	itttt	ne
 800707a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800707e:	ea20 0202 	bicne.w	r2, r0, r2
 8007082:	4134      	asrne	r4, r6
 8007084:	4314      	orrne	r4, r2
 8007086:	e7d1      	b.n	800702c <rint+0xa4>
 8007088:	08007bd0 	.word	0x08007bd0
 800708c:	000fffff 	.word	0x000fffff

08007090 <scalbn>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	ec55 4b10 	vmov	r4, r5, d0
 8007096:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800709a:	4606      	mov	r6, r0
 800709c:	462b      	mov	r3, r5
 800709e:	b9aa      	cbnz	r2, 80070cc <scalbn+0x3c>
 80070a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80070a4:	4323      	orrs	r3, r4
 80070a6:	d03b      	beq.n	8007120 <scalbn+0x90>
 80070a8:	4b31      	ldr	r3, [pc, #196]	; (8007170 <scalbn+0xe0>)
 80070aa:	4629      	mov	r1, r5
 80070ac:	2200      	movs	r2, #0
 80070ae:	ee10 0a10 	vmov	r0, s0
 80070b2:	f7f9 fac1 	bl	8000638 <__aeabi_dmul>
 80070b6:	4b2f      	ldr	r3, [pc, #188]	; (8007174 <scalbn+0xe4>)
 80070b8:	429e      	cmp	r6, r3
 80070ba:	4604      	mov	r4, r0
 80070bc:	460d      	mov	r5, r1
 80070be:	da12      	bge.n	80070e6 <scalbn+0x56>
 80070c0:	a327      	add	r3, pc, #156	; (adr r3, 8007160 <scalbn+0xd0>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 fab7 	bl	8000638 <__aeabi_dmul>
 80070ca:	e009      	b.n	80070e0 <scalbn+0x50>
 80070cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80070d0:	428a      	cmp	r2, r1
 80070d2:	d10c      	bne.n	80070ee <scalbn+0x5e>
 80070d4:	ee10 2a10 	vmov	r2, s0
 80070d8:	4620      	mov	r0, r4
 80070da:	4629      	mov	r1, r5
 80070dc:	f7f9 f8f6 	bl	80002cc <__adddf3>
 80070e0:	4604      	mov	r4, r0
 80070e2:	460d      	mov	r5, r1
 80070e4:	e01c      	b.n	8007120 <scalbn+0x90>
 80070e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80070ea:	460b      	mov	r3, r1
 80070ec:	3a36      	subs	r2, #54	; 0x36
 80070ee:	4432      	add	r2, r6
 80070f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80070f4:	428a      	cmp	r2, r1
 80070f6:	dd0b      	ble.n	8007110 <scalbn+0x80>
 80070f8:	ec45 4b11 	vmov	d1, r4, r5
 80070fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007168 <scalbn+0xd8>
 8007100:	f000 f83c 	bl	800717c <copysign>
 8007104:	a318      	add	r3, pc, #96	; (adr r3, 8007168 <scalbn+0xd8>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	ec51 0b10 	vmov	r0, r1, d0
 800710e:	e7da      	b.n	80070c6 <scalbn+0x36>
 8007110:	2a00      	cmp	r2, #0
 8007112:	dd08      	ble.n	8007126 <scalbn+0x96>
 8007114:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007118:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800711c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007120:	ec45 4b10 	vmov	d0, r4, r5
 8007124:	bd70      	pop	{r4, r5, r6, pc}
 8007126:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800712a:	da0d      	bge.n	8007148 <scalbn+0xb8>
 800712c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007130:	429e      	cmp	r6, r3
 8007132:	ec45 4b11 	vmov	d1, r4, r5
 8007136:	dce1      	bgt.n	80070fc <scalbn+0x6c>
 8007138:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007160 <scalbn+0xd0>
 800713c:	f000 f81e 	bl	800717c <copysign>
 8007140:	a307      	add	r3, pc, #28	; (adr r3, 8007160 <scalbn+0xd0>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	e7e0      	b.n	800710a <scalbn+0x7a>
 8007148:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800714c:	3236      	adds	r2, #54	; 0x36
 800714e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007152:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007156:	4620      	mov	r0, r4
 8007158:	4629      	mov	r1, r5
 800715a:	2200      	movs	r2, #0
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <scalbn+0xe8>)
 800715e:	e7b2      	b.n	80070c6 <scalbn+0x36>
 8007160:	c2f8f359 	.word	0xc2f8f359
 8007164:	01a56e1f 	.word	0x01a56e1f
 8007168:	8800759c 	.word	0x8800759c
 800716c:	7e37e43c 	.word	0x7e37e43c
 8007170:	43500000 	.word	0x43500000
 8007174:	ffff3cb0 	.word	0xffff3cb0
 8007178:	3c900000 	.word	0x3c900000

0800717c <copysign>:
 800717c:	ec51 0b10 	vmov	r0, r1, d0
 8007180:	ee11 0a90 	vmov	r0, s3
 8007184:	ee10 2a10 	vmov	r2, s0
 8007188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800718c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007190:	ea41 0300 	orr.w	r3, r1, r0
 8007194:	ec43 2b10 	vmov	d0, r2, r3
 8007198:	4770      	bx	lr
	...

0800719c <_init>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr

080071a8 <_fini>:
 80071a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071aa:	bf00      	nop
 80071ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ae:	bc08      	pop	{r3}
 80071b0:	469e      	mov	lr, r3
 80071b2:	4770      	bx	lr
